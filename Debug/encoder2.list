
encoder2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004314  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c8  20000000  08004598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000055d0  200001c8  08004760  000201c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005798  08004760  00025798  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023ecd  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004a93  00000000  00000000  000440c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b24e  00000000  00000000  00048b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001090  00000000  00000000  00053da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001380  00000000  00000000  00054e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008e2a  00000000  00000000  000561b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006106  00000000  00000000  0005efe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000650e8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003190  00000000  00000000  00065164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800449c 	.word	0x0800449c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	0800449c 	.word	0x0800449c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 f8a8 	bl	80006fc <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f85e 	bl	800067c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	2000011c 	.word	0x2000011c
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f82f 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	200f      	movs	r0, #15
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f003 f826 	bl	8003650 <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20003f3c 	.word	0x20003f3c
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20003f3c 	.word	0x20003f3c

08000630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b538      	push	{r3, r4, r5, lr}
 8000632:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff fff6 	bl	8000624 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000638:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	bf1c      	itt	ne
 800063c:	4b05      	ldrne	r3, [pc, #20]	; (8000654 <HAL_Delay+0x24>)
 800063e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000640:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000642:	bf18      	it	ne
 8000644:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000646:	f7ff ffed 	bl	8000624 <HAL_GetTick>
 800064a:	1b40      	subs	r0, r0, r5
 800064c:	4284      	cmp	r4, r0
 800064e:	d8fa      	bhi.n	8000646 <HAL_Delay+0x16>
  {
  }
}
 8000650:	bd38      	pop	{r3, r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000

08000658 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800065a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	0c1b      	lsrs	r3, r3, #16
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000668:	0200      	lsls	r0, r0, #8
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000672:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000674:	60d3      	str	r3, [r2, #12]
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	68dc      	ldr	r4, [r3, #12]
 8000682:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000686:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	2b04      	cmp	r3, #4
 800068e:	bf28      	it	cs
 8000690:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 0501 	mov.w	r5, #1
 8000698:	fa05 f303 	lsl.w	r3, r5, r3
 800069c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	bf8c      	ite	hi
 80006a2:	3c03      	subhi	r4, #3
 80006a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	4019      	ands	r1, r3
 80006a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006aa:	fa05 f404 	lsl.w	r4, r5, r4
 80006ae:	3c01      	subs	r4, #1
 80006b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	ea42 0201 	orr.w	r2, r2, r1
 80006b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfaf      	iteee	ge
 80006be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	f000 000f 	andlt.w	r0, r0, #15
 80006c6:	4b06      	ldrlt	r3, [pc, #24]	; (80006e0 <HAL_NVIC_SetPriority+0x64>)
 80006c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	bfa5      	ittet	ge
 80006cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000ed14 	.word	0xe000ed14

080006e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006e4:	0942      	lsrs	r2, r0, #5
 80006e6:	2301      	movs	r3, #1
 80006e8:	f000 001f 	and.w	r0, r0, #31
 80006ec:	fa03 f000 	lsl.w	r0, r3, r0
 80006f0:	4b01      	ldr	r3, [pc, #4]	; (80006f8 <HAL_NVIC_EnableIRQ+0x14>)
 80006f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100

080006fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006fc:	3801      	subs	r0, #1
 80006fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000702:	d20a      	bcs.n	800071a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	21f0      	movs	r1, #240	; 0xf0
 800070c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000e010 	.word	0xe000e010
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800072a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800072c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800072e:	bf0c      	ite	eq
 8000730:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000734:	f022 0204 	bicne.w	r2, r2, #4
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	4770      	bx	lr
 800073c:	e000e010 	.word	0xe000e010

08000740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000744:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000748:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80008e8 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800074c:	4a64      	ldr	r2, [pc, #400]	; (80008e0 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000750:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000754:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000756:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000758:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075c:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000760:	42b7      	cmp	r7, r6
 8000762:	f040 80ad 	bne.w	80008c0 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000766:	684c      	ldr	r4, [r1, #4]
 8000768:	f024 0a10 	bic.w	sl, r4, #16
 800076c:	f1ba 0f02 	cmp.w	sl, #2
 8000770:	d116      	bne.n	80007a0 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000772:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000776:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800077a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800077e:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000782:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000786:	f04f 0e0f 	mov.w	lr, #15
 800078a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800078e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000792:	690d      	ldr	r5, [r1, #16]
 8000794:	fa05 f50b 	lsl.w	r5, r5, fp
 8000798:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 800079c:	f8cc 5020 	str.w	r5, [ip, #32]
 80007a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007a6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007aa:	fa05 f50c 	lsl.w	r5, r5, ip
 80007ae:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b8:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007bc:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007c0:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c4:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c8:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80007ca:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ce:	d815      	bhi.n	80007fc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007d0:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007d4:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007d8:	68cd      	ldr	r5, [r1, #12]
 80007da:	fa05 fa0c 	lsl.w	sl, r5, ip
 80007de:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007e2:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007e6:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ea:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007ee:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007f2:	fa0e fe03 	lsl.w	lr, lr, r3
 80007f6:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80007fa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007fc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007fe:	9d00      	ldr	r5, [sp, #0]
 8000800:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000802:	688f      	ldr	r7, [r1, #8]
 8000804:	fa07 f70c 	lsl.w	r7, r7, ip
 8000808:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800080a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800080c:	00e5      	lsls	r5, r4, #3
 800080e:	d557      	bpl.n	80008c0 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000810:	f04f 0b00 	mov.w	fp, #0
 8000814:	f8cd b00c 	str.w	fp, [sp, #12]
 8000818:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800081c:	4d31      	ldr	r5, [pc, #196]	; (80008e4 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000822:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000826:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800082a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800082e:	9703      	str	r7, [sp, #12]
 8000830:	9f03      	ldr	r7, [sp, #12]
 8000832:	f023 0703 	bic.w	r7, r3, #3
 8000836:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800083a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800083e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000842:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000846:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800084a:	f04f 0e0f 	mov.w	lr, #15
 800084e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000852:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000854:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000858:	d039      	beq.n	80008ce <HAL_GPIO_Init+0x18e>
 800085a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800085e:	42a8      	cmp	r0, r5
 8000860:	d037      	beq.n	80008d2 <HAL_GPIO_Init+0x192>
 8000862:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000866:	42a8      	cmp	r0, r5
 8000868:	d035      	beq.n	80008d6 <HAL_GPIO_Init+0x196>
 800086a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800086e:	42a8      	cmp	r0, r5
 8000870:	d033      	beq.n	80008da <HAL_GPIO_Init+0x19a>
 8000872:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000876:	42a8      	cmp	r0, r5
 8000878:	bf14      	ite	ne
 800087a:	2507      	movne	r5, #7
 800087c:	2504      	moveq	r5, #4
 800087e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000882:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000886:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000888:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800088a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800088c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000890:	bf0c      	ite	eq
 8000892:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000894:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000896:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000898:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800089a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800089e:	bf0c      	ite	eq
 80008a0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008a2:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008a4:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008a6:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008a8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008ac:	bf0c      	ite	eq
 80008ae:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008b0:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008b2:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008b4:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008b6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008b8:	bf54      	ite	pl
 80008ba:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008bc:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008be:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008c0:	3301      	adds	r3, #1
 80008c2:	2b10      	cmp	r3, #16
 80008c4:	f47f af47 	bne.w	8000756 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008c8:	b005      	add	sp, #20
 80008ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ce:	465d      	mov	r5, fp
 80008d0:	e7d5      	b.n	800087e <HAL_GPIO_Init+0x13e>
 80008d2:	2501      	movs	r5, #1
 80008d4:	e7d3      	b.n	800087e <HAL_GPIO_Init+0x13e>
 80008d6:	2502      	movs	r5, #2
 80008d8:	e7d1      	b.n	800087e <HAL_GPIO_Init+0x13e>
 80008da:	2503      	movs	r5, #3
 80008dc:	e7cf      	b.n	800087e <HAL_GPIO_Init+0x13e>
 80008de:	bf00      	nop
 80008e0:	40013c00 	.word	0x40013c00
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008ec:	b10a      	cbz	r2, 80008f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008ee:	6181      	str	r1, [r0, #24]
 80008f0:	4770      	bx	lr
 80008f2:	0409      	lsls	r1, r1, #16
 80008f4:	e7fb      	b.n	80008ee <HAL_GPIO_WritePin+0x2>

080008f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80008f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80008f8:	4606      	mov	r6, r0
{ 
 80008fa:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d064      	beq.n	80009ca <HAL_PCD_Init+0xd4>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000900:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000902:	4634      	mov	r4, r6
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000904:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8000908:	f002 ffa2 	bl	8003850 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 800090c:	f854 0b10 	ldr.w	r0, [r4], #16
 8000910:	f000 ffad 	bl	800186e <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000916:	466d      	mov	r5, sp
 8000918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000922:	e885 0003 	stmia.w	r5, {r0, r1}
 8000926:	1d37      	adds	r7, r6, #4
 8000928:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800092c:	6830      	ldr	r0, [r6, #0]
 800092e:	f000 ff5e 	bl	80017ee <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000932:	2100      	movs	r1, #0
 8000934:	6830      	ldr	r0, [r6, #0]
 8000936:	f000 ffa0 	bl	800187a <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 800093a:	2100      	movs	r1, #0
 800093c:	4633      	mov	r3, r6
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800093e:	4632      	mov	r2, r6
 8000940:	f106 0410 	add.w	r4, r6, #16
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000944:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000946:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8000948:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 800094c:	87d1      	strh	r1, [r2, #62]	; 0x3e
 for (i = 0U; i < 15U; i++)
 800094e:	3101      	adds	r1, #1
 8000950:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].is_in = 1U;
 8000952:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000956:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 800095a:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 800095c:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 800095e:	64d0      	str	r0, [r2, #76]	; 0x4c
 8000960:	f102 021c 	add.w	r2, r2, #28
 for (i = 0U; i < 15U; i++)
 8000964:	d1f0      	bne.n	8000948 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000966:	2200      	movs	r2, #0
 8000968:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->OUT_ep[i].is_in = 0U;
 800096c:	4611      	mov	r1, r2
   hpcd->Instance->DIEPTXF[i] = 0U;
 800096e:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->OUT_ep[i].num = i;
 8000972:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000976:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000978:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 for (i = 0U; i < 15U; i++)
 800097c:	3201      	adds	r2, #1
 800097e:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].is_in = 0U;
 8000980:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000984:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000988:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 800098c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000990:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000994:	6041      	str	r1, [r0, #4]
 8000996:	f103 031c 	add.w	r3, r3, #28
 for (i = 0U; i < 15U; i++)
 800099a:	d1e8      	bne.n	800096e <HAL_PCD_Init+0x78>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 800099c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099e:	466d      	mov	r5, sp
 80009a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80009ae:	4670      	mov	r0, lr
 80009b0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80009b4:	f000 ff78 	bl	80018a8 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80009b8:	2301      	movs	r3, #1
 80009ba:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 80009be:	6830      	ldr	r0, [r6, #0]
 80009c0:	f001 fa95 	bl	8001eee <USB_DevDisconnect>
 return HAL_OK;
 80009c4:	2000      	movs	r0, #0
}
 80009c6:	b00b      	add	sp, #44	; 0x2c
 80009c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80009ca:	2001      	movs	r0, #1
 80009cc:	e7fb      	b.n	80009c6 <HAL_PCD_Init+0xd0>

080009ce <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80009ce:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80009d2:	2b01      	cmp	r3, #1
{ 
 80009d4:	b510      	push	{r4, lr}
 80009d6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80009d8:	d00c      	beq.n	80009f4 <HAL_PCD_Start+0x26>
 80009da:	2301      	movs	r3, #1
 80009dc:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 80009e0:	6800      	ldr	r0, [r0, #0]
 80009e2:	f001 fa78 	bl	8001ed6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80009e6:	6820      	ldr	r0, [r4, #0]
 80009e8:	f000 ff3b 	bl	8001862 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 80009ec:	2000      	movs	r0, #0
 80009ee:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80009f2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80009f4:	2002      	movs	r0, #2
}
 80009f6:	bd10      	pop	{r4, pc}

080009f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80009f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80009fc:	f8d0 9000 	ldr.w	r9, [r0]
{
 8000a00:	b087      	sub	sp, #28
 8000a02:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000a04:	4648      	mov	r0, r9
 8000a06:	f001 faac 	bl	8001f62 <USB_GetMode>
 8000a0a:	9002      	str	r0, [sp, #8]
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	f040 812e 	bne.w	8000c6e <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000a12:	6820      	ldr	r0, [r4, #0]
 8000a14:	f001 fa77 	bl	8001f06 <USB_ReadInterrupts>
 8000a18:	2800      	cmp	r0, #0
 8000a1a:	f000 8128 	beq.w	8000c6e <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000a1e:	6820      	ldr	r0, [r4, #0]
 8000a20:	f001 fa71 	bl	8001f06 <USB_ReadInterrupts>
 8000a24:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000a26:	bf48      	it	mi
 8000a28:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000a2a:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000a2c:	bf42      	ittt	mi
 8000a2e:	6953      	ldrmi	r3, [r2, #20]
 8000a30:	f003 0302 	andmi.w	r3, r3, #2
 8000a34:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000a36:	f001 fa66 	bl	8001f06 <USB_ReadInterrupts>
 8000a3a:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8000a3e:	d00a      	beq.n	8000a56 <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000a40:	6820      	ldr	r0, [r4, #0]
 8000a42:	f001 fa64 	bl	8001f0e <USB_ReadDevAllOutEpInterrupt>
 8000a46:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8000a4a:	4607      	mov	r7, r0
 8000a4c:	46a2      	mov	sl, r4
      epnum = 0U;
 8000a4e:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000a50:	2f00      	cmp	r7, #0
 8000a52:	f040 810f 	bne.w	8000c74 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000a56:	6820      	ldr	r0, [r4, #0]
 8000a58:	f001 fa55 	bl	8001f06 <USB_ReadInterrupts>
 8000a5c:	0341      	lsls	r1, r0, #13
 8000a5e:	d50b      	bpl.n	8000a78 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000a60:	6820      	ldr	r0, [r4, #0]
 8000a62:	f001 fa5c 	bl	8001f1e <USB_ReadDevAllInEpInterrupt>
 8000a66:	4626      	mov	r6, r4
 8000a68:	9003      	str	r0, [sp, #12]
 8000a6a:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8000a6e:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000a70:	9b03      	ldr	r3, [sp, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f040 813f 	bne.w	8000cf6 <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	f001 fa44 	bl	8001f06 <USB_ReadInterrupts>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	da0d      	bge.n	8000a9e <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000a82:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8000a86:	f023 0301 	bic.w	r3, r3, #1
 8000a8a:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f002 ff54 	bl	800393c <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000a94:	6822      	ldr	r2, [r4, #0]
 8000a96:	6953      	ldr	r3, [r2, #20]
 8000a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a9c:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000a9e:	6820      	ldr	r0, [r4, #0]
 8000aa0:	f001 fa31 	bl	8001f06 <USB_ReadInterrupts>
 8000aa4:	0506      	lsls	r6, r0, #20
 8000aa6:	d50b      	bpl.n	8000ac0 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000aa8:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8000aac:	07d8      	lsls	r0, r3, #31
 8000aae:	d502      	bpl.n	8000ab6 <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f002 ff2b 	bl	800390c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000ab6:	6822      	ldr	r2, [r4, #0]
 8000ab8:	6953      	ldr	r3, [r2, #20]
 8000aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000abe:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000ac0:	6820      	ldr	r0, [r4, #0]
 8000ac2:	f001 fa20 	bl	8001f06 <USB_ReadInterrupts>
 8000ac6:	04c1      	lsls	r1, r0, #19
 8000ac8:	d537      	bpl.n	8000b3a <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000aca:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8000ace:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000ad0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000ad2:	f023 0301 	bic.w	r3, r3, #1
 8000ad6:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000ad8:	2110      	movs	r1, #16
 8000ada:	f000 ff81 	bl	80019e0 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ade:	6861      	ldr	r1, [r4, #4]
 8000ae0:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000ae4:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ae6:	9802      	ldr	r0, [sp, #8]
 8000ae8:	4288      	cmp	r0, r1
 8000aea:	f040 8192 	bne.w	8000e12 <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000af4:	69f3      	ldr	r3, [r6, #28]
 8000af6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000afa:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000afc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 818f 	beq.w	8000e22 <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000b04:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000b08:	f043 030b 	orr.w	r3, r3, #11
 8000b0c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000b10:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000b12:	f043 030b 	orr.w	r3, r3, #11
 8000b16:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b18:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000b1c:	7c21      	ldrb	r1, [r4, #16]
 8000b1e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000b20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000b24:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000b28:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000b2c:	f001 fa38 	bl	8001fa0 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000b30:	6822      	ldr	r2, [r4, #0]
 8000b32:	6953      	ldr	r3, [r2, #20]
 8000b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b38:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000b3a:	6820      	ldr	r0, [r4, #0]
 8000b3c:	f001 f9e3 	bl	8001f06 <USB_ReadInterrupts>
 8000b40:	0482      	lsls	r2, r0, #18
 8000b42:	d51d      	bpl.n	8000b80 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000b44:	6820      	ldr	r0, [r4, #0]
 8000b46:	f001 fa10 	bl	8001f6a <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000b4a:	6820      	ldr	r0, [r4, #0]
 8000b4c:	68c3      	ldr	r3, [r0, #12]
 8000b4e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000b52:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000b54:	f000 ff6d 	bl	8001a32 <USB_GetDevSpeed>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	f040 816b 	bne.w	8000e34 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b5e:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000b60:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b66:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000b68:	68d3      	ldr	r3, [r2, #12]
 8000b6a:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000b6e:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000b70:	4620      	mov	r0, r4
 8000b72:	f002 feba 	bl	80038ea <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000b76:	6822      	ldr	r2, [r4, #0]
 8000b78:	6953      	ldr	r3, [r2, #20]
 8000b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b7e:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000b80:	6820      	ldr	r0, [r4, #0]
 8000b82:	f001 f9c0 	bl	8001f06 <USB_ReadInterrupts>
 8000b86:	06c3      	lsls	r3, r0, #27
 8000b88:	d52b      	bpl.n	8000be2 <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b8a:	6822      	ldr	r2, [r4, #0]
 8000b8c:	6993      	ldr	r3, [r2, #24]
 8000b8e:	f023 0310 	bic.w	r3, r3, #16
 8000b92:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000b94:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000b98:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000b9c:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000b9e:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000ba2:	f040 81a8 	bne.w	8000ef6 <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000ba6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000baa:	421e      	tst	r6, r3
 8000bac:	d014      	beq.n	8000bd8 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000bae:	271c      	movs	r7, #28
 8000bb0:	fb07 4708 	mla	r7, r7, r8, r4
 8000bb4:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000bb8:	4632      	mov	r2, r6
 8000bba:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000bbe:	4648      	mov	r0, r9
 8000bc0:	f001 f933 	bl	8001e2a <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000bc4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000bc8:	4433      	add	r3, r6
 8000bca:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000bce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000bd2:	441e      	add	r6, r3
 8000bd4:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	6993      	ldr	r3, [r2, #24]
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000be2:	6820      	ldr	r0, [r4, #0]
 8000be4:	f001 f98f 	bl	8001f06 <USB_ReadInterrupts>
 8000be8:	0707      	lsls	r7, r0, #28
 8000bea:	d507      	bpl.n	8000bfc <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000bec:	4620      	mov	r0, r4
 8000bee:	f002 fe78 	bl	80038e2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000bf2:	6822      	ldr	r2, [r4, #0]
 8000bf4:	6953      	ldr	r3, [r2, #20]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000bfc:	6820      	ldr	r0, [r4, #0]
 8000bfe:	f001 f982 	bl	8001f06 <USB_ReadInterrupts>
 8000c02:	02c6      	lsls	r6, r0, #11
 8000c04:	d508      	bpl.n	8000c18 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000c06:	b2e9      	uxtb	r1, r5
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f002 fe9f 	bl	800394c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000c0e:	6822      	ldr	r2, [r4, #0]
 8000c10:	6953      	ldr	r3, [r2, #20]
 8000c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c16:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000c18:	6820      	ldr	r0, [r4, #0]
 8000c1a:	f001 f974 	bl	8001f06 <USB_ReadInterrupts>
 8000c1e:	0280      	lsls	r0, r0, #10
 8000c20:	d508      	bpl.n	8000c34 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000c22:	b2e9      	uxtb	r1, r5
 8000c24:	4620      	mov	r0, r4
 8000c26:	f002 fe8d 	bl	8003944 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000c2a:	6822      	ldr	r2, [r4, #0]
 8000c2c:	6953      	ldr	r3, [r2, #20]
 8000c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c32:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000c34:	6820      	ldr	r0, [r4, #0]
 8000c36:	f001 f966 	bl	8001f06 <USB_ReadInterrupts>
 8000c3a:	0041      	lsls	r1, r0, #1
 8000c3c:	d507      	bpl.n	8000c4e <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f002 fe88 	bl	8003954 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000c44:	6822      	ldr	r2, [r4, #0]
 8000c46:	6953      	ldr	r3, [r2, #20]
 8000c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c4c:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000c4e:	6820      	ldr	r0, [r4, #0]
 8000c50:	f001 f959 	bl	8001f06 <USB_ReadInterrupts>
 8000c54:	0742      	lsls	r2, r0, #29
 8000c56:	d50a      	bpl.n	8000c6e <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000c5c:	076b      	lsls	r3, r5, #29
 8000c5e:	d502      	bpl.n	8000c66 <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000c60:	4620      	mov	r0, r4
 8000c62:	f002 fe7b 	bl	800395c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000c66:	6823      	ldr	r3, [r4, #0]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	4315      	orrs	r5, r2
 8000c6c:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000c6e:	b007      	add	sp, #28
 8000c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8000c74:	07f8      	lsls	r0, r7, #31
 8000c76:	d538      	bpl.n	8000cea <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c78:	fa5f fb85 	uxtb.w	fp, r5
 8000c7c:	4659      	mov	r1, fp
 8000c7e:	6820      	ldr	r0, [r4, #0]
 8000c80:	f001 f955 	bl	8001f2e <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c84:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000c88:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c8a:	d021      	beq.n	8000cd0 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 8000c8c:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c8e:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8000c90:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c92:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8000c94:	d10c      	bne.n	8000cb0 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000c96:	6931      	ldr	r1, [r6, #16]
 8000c98:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 8000c9c:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000ca0:	1a41      	subs	r1, r0, r1
 8000ca2:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000ca6:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 8000caa:	4408      	add	r0, r1
 8000cac:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000cb0:	4659      	mov	r1, fp
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f002 fe04 	bl	80038c0 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000cb8:	6921      	ldr	r1, [r4, #16]
 8000cba:	2901      	cmp	r1, #1
 8000cbc:	d108      	bne.n	8000cd0 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000cbe:	b93d      	cbnz	r5, 8000cd0 <HAL_PCD_IRQHandler+0x2d8>
 8000cc0:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000cc4:	b922      	cbnz	r2, 8000cd0 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000cc6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000cca:	6820      	ldr	r0, [r4, #0]
 8000ccc:	f001 f968 	bl	8001fa0 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000cd0:	f018 0f08 	tst.w	r8, #8
 8000cd4:	d004      	beq.n	8000ce0 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f002 fdec 	bl	80038b4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000cdc:	2308      	movs	r3, #8
 8000cde:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000ce0:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000ce4:	bf1c      	itt	ne
 8000ce6:	2310      	movne	r3, #16
 8000ce8:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8000cea:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000cec:	087f      	lsrs	r7, r7, #1
 8000cee:	3620      	adds	r6, #32
 8000cf0:	f10a 0a1c 	add.w	sl, sl, #28
 8000cf4:	e6ac      	b.n	8000a50 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 8000cf6:	9b03      	ldr	r3, [sp, #12]
 8000cf8:	07da      	lsls	r2, r3, #31
 8000cfa:	d558      	bpl.n	8000dae <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000cfc:	fa5f fb85 	uxtb.w	fp, r5
 8000d00:	4659      	mov	r1, fp
 8000d02:	6820      	ldr	r0, [r4, #0]
 8000d04:	f001 f91d 	bl	8001f42 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d08:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000d0a:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d0c:	d520      	bpl.n	8000d50 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d0e:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8000d12:	2101      	movs	r1, #1
 8000d14:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000d16:	ea23 0301 	bic.w	r3, r3, r1
 8000d1a:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8000d24:	6923      	ldr	r3, [r4, #16]
 8000d26:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000d28:	bf01      	itttt	eq
 8000d2a:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8000d2c:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8000d2e:	189b      	addeq	r3, r3, r2
 8000d30:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000d32:	4659      	mov	r1, fp
 8000d34:	4620      	mov	r0, r4
 8000d36:	f002 fdcc 	bl	80038d2 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8000d3a:	6921      	ldr	r1, [r4, #16]
 8000d3c:	2901      	cmp	r1, #1
 8000d3e:	d107      	bne.n	8000d50 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000d40:	b935      	cbnz	r5, 8000d50 <HAL_PCD_IRQHandler+0x358>
 8000d42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000d44:	b923      	cbnz	r3, 8000d50 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000d46:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000d4a:	6820      	ldr	r0, [r4, #0]
 8000d4c:	f001 f928 	bl	8001fa0 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000d50:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000d52:	bf44      	itt	mi
 8000d54:	2308      	movmi	r3, #8
 8000d56:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000d5a:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000d5c:	bf44      	itt	mi
 8000d5e:	2310      	movmi	r3, #16
 8000d60:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000d64:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000d66:	bf44      	itt	mi
 8000d68:	2340      	movmi	r3, #64	; 0x40
 8000d6a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000d6e:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000d70:	bf44      	itt	mi
 8000d72:	2302      	movmi	r3, #2
 8000d74:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000d78:	063f      	lsls	r7, r7, #24
 8000d7a:	d518      	bpl.n	8000dae <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000d80:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8000d82:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000d84:	1aff      	subs	r7, r7, r3
 8000d86:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	bf28      	it	cs
 8000d8c:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d8e:	9b04      	ldr	r3, [sp, #16]
 8000d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8000d94:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000d98:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 8000d9c:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000da0:	9305      	str	r3, [sp, #20]
 8000da2:	9b05      	ldr	r3, [sp, #20]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4553      	cmp	r3, sl
 8000daa:	d808      	bhi.n	8000dbe <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8000dac:	b32f      	cbz	r7, 8000dfa <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 8000dae:	9b03      	ldr	r3, [sp, #12]
 8000db0:	085b      	lsrs	r3, r3, #1
        epnum++;
 8000db2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000db4:	9303      	str	r3, [sp, #12]
 8000db6:	361c      	adds	r6, #28
 8000db8:	f108 0820 	add.w	r8, r8, #32
 8000dbc:	e658      	b.n	8000a70 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 8000dbe:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000dc0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d9f2      	bls.n	8000dac <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_PCD_IRQHandler+0x3b4>
 8000dca:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000dcc:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	429f      	cmp	r7, r3
 8000dd2:	bf28      	it	cs
 8000dd4:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000dd6:	7c23      	ldrb	r3, [r4, #16]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	465a      	mov	r2, fp
 8000ddc:	b2bb      	uxth	r3, r7
 8000dde:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000de0:	f001 f80f 	bl	8001e02 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000de4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000de6:	443b      	add	r3, r7
 8000de8:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000dea:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 8000dec:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 8000df0:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 8000df2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 8000df6:	6533      	str	r3, [r6, #80]	; 0x50
 8000df8:	e7d3      	b.n	8000da2 <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000dfa:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 8000dfc:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000dfe:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 8000e02:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 8000e06:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000e08:	ea23 0302 	bic.w	r3, r3, r2
 8000e0c:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8000e10:	e7cd      	b.n	8000dae <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e12:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000e14:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e16:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000e18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e1c:	9002      	str	r0, [sp, #8]
 8000e1e:	3320      	adds	r3, #32
 8000e20:	e661      	b.n	8000ae6 <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000e22:	6973      	ldr	r3, [r6, #20]
 8000e24:	f043 030b 	orr.w	r3, r3, #11
 8000e28:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000e2a:	6933      	ldr	r3, [r6, #16]
 8000e2c:	f043 030b 	orr.w	r3, r3, #11
 8000e30:	6133      	str	r3, [r6, #16]
 8000e32:	e671      	b.n	8000b18 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000e34:	2303      	movs	r3, #3
 8000e36:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000e38:	2340      	movs	r3, #64	; 0x40
 8000e3a:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8000e3c:	f000 fbf8 	bl	8001630 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <HAL_PCD_IRQHandler+0x51c>)
 8000e42:	4a35      	ldr	r2, [pc, #212]	; (8000f18 <HAL_PCD_IRQHandler+0x520>)
 8000e44:	4403      	add	r3, r0
 8000e46:	4293      	cmp	r3, r2
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	d804      	bhi.n	8000e56 <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	e68c      	b.n	8000b70 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000e56:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <HAL_PCD_IRQHandler+0x524>)
 8000e58:	4931      	ldr	r1, [pc, #196]	; (8000f20 <HAL_PCD_IRQHandler+0x528>)
 8000e5a:	4402      	add	r2, r0
 8000e5c:	428a      	cmp	r2, r1
 8000e5e:	d803      	bhi.n	8000e68 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000e66:	e7f4      	b.n	8000e52 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000e68:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000e6c:	492d      	ldr	r1, [pc, #180]	; (8000f24 <HAL_PCD_IRQHandler+0x52c>)
 8000e6e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000e72:	428a      	cmp	r2, r1
 8000e74:	d803      	bhi.n	8000e7e <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000e7c:	e7e9      	b.n	8000e52 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000e7e:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000e82:	4929      	ldr	r1, [pc, #164]	; (8000f28 <HAL_PCD_IRQHandler+0x530>)
 8000e84:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000e88:	428a      	cmp	r2, r1
 8000e8a:	d803      	bhi.n	8000e94 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000e92:	e7de      	b.n	8000e52 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000e94:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <HAL_PCD_IRQHandler+0x534>)
 8000e96:	4926      	ldr	r1, [pc, #152]	; (8000f30 <HAL_PCD_IRQHandler+0x538>)
 8000e98:	4402      	add	r2, r0
 8000e9a:	428a      	cmp	r2, r1
 8000e9c:	d803      	bhi.n	8000ea6 <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000ea4:	e7d5      	b.n	8000e52 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000ea6:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <HAL_PCD_IRQHandler+0x53c>)
 8000ea8:	4923      	ldr	r1, [pc, #140]	; (8000f38 <HAL_PCD_IRQHandler+0x540>)
 8000eaa:	4402      	add	r2, r0
 8000eac:	428a      	cmp	r2, r1
 8000eae:	d803      	bhi.n	8000eb8 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000eb6:	e7cc      	b.n	8000e52 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000eb8:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <HAL_PCD_IRQHandler+0x544>)
 8000eba:	4921      	ldr	r1, [pc, #132]	; (8000f40 <HAL_PCD_IRQHandler+0x548>)
 8000ebc:	4402      	add	r2, r0
 8000ebe:	428a      	cmp	r2, r1
 8000ec0:	d803      	bhi.n	8000eca <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000ec8:	e7c3      	b.n	8000e52 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000eca:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000ece:	491d      	ldr	r1, [pc, #116]	; (8000f44 <HAL_PCD_IRQHandler+0x54c>)
 8000ed0:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000ed4:	428a      	cmp	r2, r1
 8000ed6:	d803      	bhi.n	8000ee0 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ede:	e7b8      	b.n	8000e52 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000ee0:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <HAL_PCD_IRQHandler+0x550>)
 8000ee2:	491a      	ldr	r1, [pc, #104]	; (8000f4c <HAL_PCD_IRQHandler+0x554>)
 8000ee4:	4402      	add	r2, r0
 8000ee6:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	bf94      	ite	ls
 8000eec:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000ef0:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000ef4:	e7ad      	b.n	8000e52 <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	f47f ae6e 	bne.w	8000bd8 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000efc:	2208      	movs	r2, #8
 8000efe:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000f02:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000f04:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f06:	f000 ff90 	bl	8001e2a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000f0a:	fb07 4708 	mla	r7, r7, r8, r4
 8000f0e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000f12:	e65c      	b.n	8000bce <HAL_PCD_IRQHandler+0x1d6>
 8000f14:	ff275340 	.word	0xff275340
 8000f18:	000c34ff 	.word	0x000c34ff
 8000f1c:	ff1b1e40 	.word	0xff1b1e40
 8000f20:	000f423f 	.word	0x000f423f
 8000f24:	00124f7f 	.word	0x00124f7f
 8000f28:	0013d61f 	.word	0x0013d61f
 8000f2c:	fee5b660 	.word	0xfee5b660
 8000f30:	0016e35f 	.word	0x0016e35f
 8000f34:	feced300 	.word	0xfeced300
 8000f38:	001b773f 	.word	0x001b773f
 8000f3c:	feb35bc0 	.word	0xfeb35bc0
 8000f40:	002191bf 	.word	0x002191bf
 8000f44:	0038751f 	.word	0x0038751f
 8000f48:	fe5954e0 	.word	0xfe5954e0
 8000f4c:	00419cdf 	.word	0x00419cdf

08000f50 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8000f50:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000f54:	2b01      	cmp	r3, #1
{
 8000f56:	b510      	push	{r4, lr}
 8000f58:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000f5a:	d009      	beq.n	8000f70 <HAL_PCD_SetAddress+0x20>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000f62:	6800      	ldr	r0, [r0, #0]
 8000f64:	f000 ffa7 	bl	8001eb6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000f6e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000f70:	2002      	movs	r0, #2
}
 8000f72:	bd10      	pop	{r4, pc}

08000f74 <HAL_PCD_EP_Open>:
{
 8000f74:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8000f76:	b24e      	sxtb	r6, r1
 8000f78:	2e00      	cmp	r6, #0
{
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	f04f 051c 	mov.w	r5, #28
 8000f80:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f84:	bfb5      	itete	lt
 8000f86:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f8a:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000f8e:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000f90:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8000f94:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 8000f96:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8000f98:	bfb8      	it	lt
 8000f9a:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8000f9c:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8000f9e:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fa0:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8000fa4:	bf04      	itt	eq
 8000fa6:	2300      	moveq	r3, #0
 8000fa8:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 8000faa:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000fac:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000fae:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 8000fb2:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d009      	beq.n	8000fcc <HAL_PCD_EP_Open+0x58>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000fbe:	6820      	ldr	r0, [r4, #0]
 8000fc0:	f000 fd52 	bl	8001a68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8000fcc:	2002      	movs	r0, #2
}
 8000fce:	bd70      	pop	{r4, r5, r6, pc}

08000fd0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8000fd0:	b24b      	sxtb	r3, r1
 8000fd2:	2b00      	cmp	r3, #0
{  
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	f04f 021c 	mov.w	r2, #28
 8000fda:	4604      	mov	r4, r0
 8000fdc:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fe0:	bfb5      	itete	lt
 8000fe2:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fe6:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000fea:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000fec:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = (0x80 & ep_addr) != 0;
 8000ff0:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8000ff2:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000ff4:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000ff6:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d009      	beq.n	8001012 <HAL_PCD_EP_Close+0x42>
 8000ffe:	2301      	movs	r3, #1
 8001000:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001004:	6820      	ldr	r0, [r4, #0]
 8001006:	f000 fd6e 	bl	8001ae6 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800100a:	2000      	movs	r0, #0
 800100c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001010:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8001012:	2002      	movs	r0, #2
}
 8001014:	bd10      	pop	{r4, pc}

08001016 <HAL_PCD_EP_Receive>:
{
 8001016:	b538      	push	{r3, r4, r5, lr}
 8001018:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800101c:	241c      	movs	r4, #28
 800101e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8001022:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001026:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 800102a:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 800102e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 8001030:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 8001034:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8001038:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 800103c:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 8001040:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001042:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001044:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001046:	bf08      	it	eq
 8001048:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 800104c:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 800104e:	b91d      	cbnz	r5, 8001058 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001050:	f000 fe6a 	bl	8001d28 <USB_EP0StartXfer>
}
 8001054:	2000      	movs	r0, #0
 8001056:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001058:	f000 fda0 	bl	8001b9c <USB_EPStartXfer>
 800105c:	e7fa      	b.n	8001054 <HAL_PCD_EP_Receive+0x3e>

0800105e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800105e:	231c      	movs	r3, #28
 8001060:	f001 010f 	and.w	r1, r1, #15
 8001064:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001068:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 800106c:	4770      	bx	lr

0800106e <HAL_PCD_EP_Transmit>:
{
 800106e:	b538      	push	{r3, r4, r5, lr}
 8001070:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001074:	241c      	movs	r4, #28
 8001076:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800107a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800107e:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8001080:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8001082:	2300      	movs	r3, #0
 8001084:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8001086:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8001088:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800108a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 800108e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 8001092:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001094:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8001096:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8001098:	bf08      	it	eq
 800109a:	64a2      	streq	r2, [r4, #72]	; 0x48
 800109c:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 800109e:	b91d      	cbnz	r5, 80010a8 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010a0:	f000 fe42 	bl	8001d28 <USB_EP0StartXfer>
}
 80010a4:	2000      	movs	r0, #0
 80010a6:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010a8:	f000 fd78 	bl	8001b9c <USB_EPStartXfer>
 80010ac:	e7fa      	b.n	80010a4 <HAL_PCD_EP_Transmit+0x36>

080010ae <HAL_PCD_EP_SetStall>:
{
 80010ae:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80010b0:	b24b      	sxtb	r3, r1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80010b8:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010bc:	bfb5      	itete	lt
 80010be:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80010c2:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010c6:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80010c8:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 80010cc:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010ce:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80010d0:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 80010d2:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80010d4:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80010d6:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80010d8:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80010dc:	4293      	cmp	r3, r2
{
 80010de:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80010e0:	d00f      	beq.n	8001102 <HAL_PCD_EP_SetStall+0x54>
 80010e2:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80010e6:	6800      	ldr	r0, [r0, #0]
 80010e8:	f000 fead 	bl	8001e46 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80010ec:	b92d      	cbnz	r5, 80010fa <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80010ee:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80010f2:	7c21      	ldrb	r1, [r4, #16]
 80010f4:	6820      	ldr	r0, [r4, #0]
 80010f6:	f000 ff53 	bl	8001fa0 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80010fa:	2000      	movs	r0, #0
 80010fc:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001100:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001102:	2002      	movs	r0, #2
}
 8001104:	bd38      	pop	{r3, r4, r5, pc}

08001106 <HAL_PCD_EP_ClrStall>:
{
 8001106:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8001108:	b24b      	sxtb	r3, r1
 800110a:	2b00      	cmp	r3, #0
{
 800110c:	4605      	mov	r5, r0
 800110e:	f04f 021c 	mov.w	r2, #28
 8001112:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001116:	bfb5      	itete	lt
 8001118:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 800111c:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001120:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001122:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001126:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001128:	2400      	movs	r4, #0
 800112a:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800112c:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800112e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001130:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001134:	2b01      	cmp	r3, #1
 8001136:	d009      	beq.n	800114c <HAL_PCD_EP_ClrStall+0x46>
 8001138:	2301      	movs	r3, #1
 800113a:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 800113e:	6828      	ldr	r0, [r5, #0]
 8001140:	f000 fea0 	bl	8001e84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001144:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 8001148:	4620      	mov	r0, r4
 800114a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800114c:	2002      	movs	r0, #2
}
 800114e:	bd38      	pop	{r3, r4, r5, pc}

08001150 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001150:	6800      	ldr	r0, [r0, #0]
{
 8001152:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001154:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8001156:	b921      	cbnz	r1, 8001162 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800115c:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
  }
  
  return HAL_OK;
}
 800115e:	2000      	movs	r0, #0
 8001160:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001162:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 8001164:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001166:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 800116a:	1e4e      	subs	r6, r1, #1
 800116c:	b2ec      	uxtb	r4, r5
 800116e:	42b4      	cmp	r4, r6
 8001170:	f105 0501 	add.w	r5, r5, #1
 8001174:	db06      	blt.n	8001184 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001176:	313f      	adds	r1, #63	; 0x3f
 8001178:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800117c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001180:	6043      	str	r3, [r0, #4]
 8001182:	e7ec      	b.n	800115e <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001184:	3440      	adds	r4, #64	; 0x40
 8001186:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800118a:	6864      	ldr	r4, [r4, #4]
 800118c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8001190:	e7ec      	b.n	800116c <HAL_PCDEx_SetTxFiFo+0x1c>

08001192 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001192:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8001194:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8001196:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001198:	4770      	bx	lr
	...

0800119c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a0:	4604      	mov	r4, r0
 80011a2:	b918      	cbnz	r0, 80011ac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80011a4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80011a6:	b002      	add	sp, #8
 80011a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ac:	6803      	ldr	r3, [r0, #0]
 80011ae:	07dd      	lsls	r5, r3, #31
 80011b0:	d410      	bmi.n	80011d4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	0798      	lsls	r0, r3, #30
 80011b6:	d458      	bmi.n	800126a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	071a      	lsls	r2, r3, #28
 80011bc:	f100 809a 	bmi.w	80012f4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	075b      	lsls	r3, r3, #29
 80011c4:	f100 80b8 	bmi.w	8001338 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c8:	69a2      	ldr	r2, [r4, #24]
 80011ca:	2a00      	cmp	r2, #0
 80011cc:	f040 8119 	bne.w	8001402 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80011d0:	2000      	movs	r0, #0
 80011d2:	e7e8      	b.n	80011a6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d4:	4ba6      	ldr	r3, [pc, #664]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	f002 020c 	and.w	r2, r2, #12
 80011dc:	2a04      	cmp	r2, #4
 80011de:	d007      	beq.n	80011f0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e6:	2a08      	cmp	r2, #8
 80011e8:	d10a      	bne.n	8001200 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	0259      	lsls	r1, r3, #9
 80011ee:	d507      	bpl.n	8001200 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	4b9f      	ldr	r3, [pc, #636]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	039a      	lsls	r2, r3, #14
 80011f6:	d5dc      	bpl.n	80011b2 <HAL_RCC_OscConfig+0x16>
 80011f8:	6863      	ldr	r3, [r4, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1d9      	bne.n	80011b2 <HAL_RCC_OscConfig+0x16>
 80011fe:	e7d1      	b.n	80011a4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001200:	6863      	ldr	r3, [r4, #4]
 8001202:	4d9b      	ldr	r5, [pc, #620]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001208:	d111      	bne.n	800122e <HAL_RCC_OscConfig+0x92>
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001212:	f7ff fa07 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	4d96      	ldr	r5, [pc, #600]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001218:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	682b      	ldr	r3, [r5, #0]
 800121c:	039b      	lsls	r3, r3, #14
 800121e:	d4c8      	bmi.n	80011b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fa00 	bl	8000624 <HAL_GetTick>
 8001224:	1b80      	subs	r0, r0, r6
 8001226:	2864      	cmp	r0, #100	; 0x64
 8001228:	d9f7      	bls.n	800121a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800122a:	2003      	movs	r0, #3
 800122c:	e7bb      	b.n	80011a6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001232:	d104      	bne.n	800123e <HAL_RCC_OscConfig+0xa2>
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123a:	602b      	str	r3, [r5, #0]
 800123c:	e7e5      	b.n	800120a <HAL_RCC_OscConfig+0x6e>
 800123e:	682a      	ldr	r2, [r5, #0]
 8001240:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001244:	602a      	str	r2, [r5, #0]
 8001246:	682a      	ldr	r2, [r5, #0]
 8001248:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800124c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1df      	bne.n	8001212 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001252:	f7ff f9e7 	bl	8000624 <HAL_GetTick>
 8001256:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	039f      	lsls	r7, r3, #14
 800125c:	d5a9      	bpl.n	80011b2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125e:	f7ff f9e1 	bl	8000624 <HAL_GetTick>
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	2864      	cmp	r0, #100	; 0x64
 8001266:	d9f7      	bls.n	8001258 <HAL_RCC_OscConfig+0xbc>
 8001268:	e7df      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126a:	4b81      	ldr	r3, [pc, #516]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	f012 0f0c 	tst.w	r2, #12
 8001272:	d007      	beq.n	8001284 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127a:	2a08      	cmp	r2, #8
 800127c:	d111      	bne.n	80012a2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	025e      	lsls	r6, r3, #9
 8001282:	d40e      	bmi.n	80012a2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001284:	4b7a      	ldr	r3, [pc, #488]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	0795      	lsls	r5, r2, #30
 800128a:	d502      	bpl.n	8001292 <HAL_RCC_OscConfig+0xf6>
 800128c:	68e2      	ldr	r2, [r4, #12]
 800128e:	2a01      	cmp	r2, #1
 8001290:	d188      	bne.n	80011a4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	6921      	ldr	r1, [r4, #16]
 8001296:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800129a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800129e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a0:	e78a      	b.n	80011b8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a2:	68e2      	ldr	r2, [r4, #12]
 80012a4:	4b73      	ldr	r3, [pc, #460]	; (8001474 <HAL_RCC_OscConfig+0x2d8>)
 80012a6:	b1b2      	cbz	r2, 80012d6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012ac:	f7ff f9ba 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	4d6f      	ldr	r5, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80012b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	0798      	lsls	r0, r3, #30
 80012b8:	d507      	bpl.n	80012ca <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	6922      	ldr	r2, [r4, #16]
 80012be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012c6:	602b      	str	r3, [r5, #0]
 80012c8:	e776      	b.n	80011b8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff f9ab 	bl	8000624 <HAL_GetTick>
 80012ce:	1b80      	subs	r0, r0, r6
 80012d0:	2802      	cmp	r0, #2
 80012d2:	d9ef      	bls.n	80012b4 <HAL_RCC_OscConfig+0x118>
 80012d4:	e7a9      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80012d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012d8:	f7ff f9a4 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012dc:	4d64      	ldr	r5, [pc, #400]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80012de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	0799      	lsls	r1, r3, #30
 80012e4:	f57f af68 	bpl.w	80011b8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff f99c 	bl	8000624 <HAL_GetTick>
 80012ec:	1b80      	subs	r0, r0, r6
 80012ee:	2802      	cmp	r0, #2
 80012f0:	d9f6      	bls.n	80012e0 <HAL_RCC_OscConfig+0x144>
 80012f2:	e79a      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012f4:	6962      	ldr	r2, [r4, #20]
 80012f6:	4b60      	ldr	r3, [pc, #384]	; (8001478 <HAL_RCC_OscConfig+0x2dc>)
 80012f8:	b17a      	cbz	r2, 800131a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012fe:	f7ff f991 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4d5b      	ldr	r5, [pc, #364]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001304:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001308:	079f      	lsls	r7, r3, #30
 800130a:	f53f af59 	bmi.w	80011c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130e:	f7ff f989 	bl	8000624 <HAL_GetTick>
 8001312:	1b80      	subs	r0, r0, r6
 8001314:	2802      	cmp	r0, #2
 8001316:	d9f6      	bls.n	8001306 <HAL_RCC_OscConfig+0x16a>
 8001318:	e787      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800131a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800131c:	f7ff f982 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	4d53      	ldr	r5, [pc, #332]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001322:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001324:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001326:	0798      	lsls	r0, r3, #30
 8001328:	f57f af4a 	bpl.w	80011c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132c:	f7ff f97a 	bl	8000624 <HAL_GetTick>
 8001330:	1b80      	subs	r0, r0, r6
 8001332:	2802      	cmp	r0, #2
 8001334:	d9f6      	bls.n	8001324 <HAL_RCC_OscConfig+0x188>
 8001336:	e778      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001338:	4b4d      	ldr	r3, [pc, #308]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 800133a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800133c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001340:	d128      	bne.n	8001394 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	9201      	str	r2, [sp, #4]
 8001344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001346:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001356:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	4d48      	ldr	r5, [pc, #288]	; (800147c <HAL_RCC_OscConfig+0x2e0>)
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	05d9      	lsls	r1, r3, #23
 800135e:	d51b      	bpl.n	8001398 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001360:	68a3      	ldr	r3, [r4, #8]
 8001362:	4d43      	ldr	r5, [pc, #268]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 8001364:	2b01      	cmp	r3, #1
 8001366:	d127      	bne.n	80013b8 <HAL_RCC_OscConfig+0x21c>
 8001368:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001370:	f7ff f958 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	4d3e      	ldr	r5, [pc, #248]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001376:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001378:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800137e:	079b      	lsls	r3, r3, #30
 8001380:	d539      	bpl.n	80013f6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001382:	2e00      	cmp	r6, #0
 8001384:	f43f af20 	beq.w	80011c8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001388:	4a39      	ldr	r2, [pc, #228]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 800138a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800138c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	e719      	b.n	80011c8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001394:	2600      	movs	r6, #0
 8001396:	e7df      	b.n	8001358 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80013a0:	f7ff f940 	bl	8000624 <HAL_GetTick>
 80013a4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	05da      	lsls	r2, r3, #23
 80013aa:	d4d9      	bmi.n	8001360 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ac:	f7ff f93a 	bl	8000624 <HAL_GetTick>
 80013b0:	1bc0      	subs	r0, r0, r7
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d9f7      	bls.n	80013a6 <HAL_RCC_OscConfig+0x20a>
 80013b6:	e738      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d104      	bne.n	80013c6 <HAL_RCC_OscConfig+0x22a>
 80013bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	672b      	str	r3, [r5, #112]	; 0x70
 80013c4:	e7d0      	b.n	8001368 <HAL_RCC_OscConfig+0x1cc>
 80013c6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	672a      	str	r2, [r5, #112]	; 0x70
 80013ce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013d0:	f022 0204 	bic.w	r2, r2, #4
 80013d4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1ca      	bne.n	8001370 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80013da:	f7ff f923 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013e2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013e6:	0798      	lsls	r0, r3, #30
 80013e8:	d5cb      	bpl.n	8001382 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff f91b 	bl	8000624 <HAL_GetTick>
 80013ee:	1bc0      	subs	r0, r0, r7
 80013f0:	4540      	cmp	r0, r8
 80013f2:	d9f7      	bls.n	80013e4 <HAL_RCC_OscConfig+0x248>
 80013f4:	e719      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff f915 	bl	8000624 <HAL_GetTick>
 80013fa:	1bc0      	subs	r0, r0, r7
 80013fc:	4540      	cmp	r0, r8
 80013fe:	d9bd      	bls.n	800137c <HAL_RCC_OscConfig+0x1e0>
 8001400:	e713      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001402:	4d1b      	ldr	r5, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
 8001404:	68ab      	ldr	r3, [r5, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	f43f aeca 	beq.w	80011a4 <HAL_RCC_OscConfig+0x8>
 8001410:	4e1b      	ldr	r6, [pc, #108]	; (8001480 <HAL_RCC_OscConfig+0x2e4>)
 8001412:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001414:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001416:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001418:	d134      	bne.n	8001484 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800141a:	f7ff f903 	bl	8000624 <HAL_GetTick>
 800141e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	0199      	lsls	r1, r3, #6
 8001424:	d41e      	bmi.n	8001464 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001426:	6a22      	ldr	r2, [r4, #32]
 8001428:	69e3      	ldr	r3, [r4, #28]
 800142a:	4313      	orrs	r3, r2
 800142c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800142e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001432:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001434:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001438:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	4c0d      	ldr	r4, [pc, #52]	; (8001470 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800143c:	0852      	lsrs	r2, r2, #1
 800143e:	3a01      	subs	r2, #1
 8001440:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001444:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001446:	2301      	movs	r3, #1
 8001448:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800144a:	f7ff f8eb 	bl	8000624 <HAL_GetTick>
 800144e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	019a      	lsls	r2, r3, #6
 8001454:	f53f aebc 	bmi.w	80011d0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff f8e4 	bl	8000624 <HAL_GetTick>
 800145c:	1b40      	subs	r0, r0, r5
 800145e:	2802      	cmp	r0, #2
 8001460:	d9f6      	bls.n	8001450 <HAL_RCC_OscConfig+0x2b4>
 8001462:	e6e2      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff f8de 	bl	8000624 <HAL_GetTick>
 8001468:	1bc0      	subs	r0, r0, r7
 800146a:	2802      	cmp	r0, #2
 800146c:	d9d8      	bls.n	8001420 <HAL_RCC_OscConfig+0x284>
 800146e:	e6dc      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
 8001470:	40023800 	.word	0x40023800
 8001474:	42470000 	.word	0x42470000
 8001478:	42470e80 	.word	0x42470e80
 800147c:	40007000 	.word	0x40007000
 8001480:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001484:	f7ff f8ce 	bl	8000624 <HAL_GetTick>
 8001488:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148a:	682b      	ldr	r3, [r5, #0]
 800148c:	019b      	lsls	r3, r3, #6
 800148e:	f57f ae9f 	bpl.w	80011d0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff f8c7 	bl	8000624 <HAL_GetTick>
 8001496:	1b00      	subs	r0, r0, r4
 8001498:	2802      	cmp	r0, #2
 800149a:	d9f6      	bls.n	800148a <HAL_RCC_OscConfig+0x2ee>
 800149c:	e6c5      	b.n	800122a <HAL_RCC_OscConfig+0x8e>
 800149e:	bf00      	nop

080014a0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014a0:	4913      	ldr	r1, [pc, #76]	; (80014f0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80014a2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014a4:	688b      	ldr	r3, [r1, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d003      	beq.n	80014b6 <HAL_RCC_GetSysClockFreq+0x16>
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d003      	beq.n	80014ba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014b2:	4810      	ldr	r0, [pc, #64]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014b4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80014b6:	4810      	ldr	r0, [pc, #64]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x58>)
 80014b8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014bc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014be:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c4:	bf14      	ite	ne
 80014c6:	480c      	ldrne	r0, [pc, #48]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c8:	480a      	ldreq	r0, [pc, #40]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014ce:	bf18      	it	ne
 80014d0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d6:	fba1 0100 	umull	r0, r1, r1, r0
 80014da:	f7fe fed1 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <HAL_RCC_GetSysClockFreq+0x50>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014e6:	3301      	adds	r3, #1
 80014e8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80014ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ee:	bd08      	pop	{r3, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	00f42400 	.word	0x00f42400
 80014f8:	007a1200 	.word	0x007a1200

080014fc <HAL_RCC_ClockConfig>:
{
 80014fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001500:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001502:	4604      	mov	r4, r0
 8001504:	b910      	cbnz	r0, 800150c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001506:	2001      	movs	r0, #1
 8001508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_RCC_ClockConfig+0x124>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	f002 020f 	and.w	r2, r2, #15
 8001514:	428a      	cmp	r2, r1
 8001516:	d328      	bcc.n	800156a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001518:	6821      	ldr	r1, [r4, #0]
 800151a:	078f      	lsls	r7, r1, #30
 800151c:	d42d      	bmi.n	800157a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151e:	07c8      	lsls	r0, r1, #31
 8001520:	d440      	bmi.n	80015a4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001522:	4b3f      	ldr	r3, [pc, #252]	; (8001620 <HAL_RCC_ClockConfig+0x124>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f002 020f 	and.w	r2, r2, #15
 800152a:	4295      	cmp	r5, r2
 800152c:	d366      	bcc.n	80015fc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	0751      	lsls	r1, r2, #29
 8001532:	d46c      	bmi.n	800160e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001534:	0713      	lsls	r3, r2, #28
 8001536:	d507      	bpl.n	8001548 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001538:	4a3a      	ldr	r2, [pc, #232]	; (8001624 <HAL_RCC_ClockConfig+0x128>)
 800153a:	6921      	ldr	r1, [r4, #16]
 800153c:	6893      	ldr	r3, [r2, #8]
 800153e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001542:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001546:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001548:	f7ff ffaa 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 800154c:	4b35      	ldr	r3, [pc, #212]	; (8001624 <HAL_RCC_ClockConfig+0x128>)
 800154e:	4a36      	ldr	r2, [pc, #216]	; (8001628 <HAL_RCC_ClockConfig+0x12c>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	40d8      	lsrs	r0, r3
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_RCC_ClockConfig+0x130>)
 800155c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800155e:	200f      	movs	r0, #15
 8001560:	f7ff f816 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8001564:	2000      	movs	r0, #0
 8001566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156a:	b2ca      	uxtb	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	4299      	cmp	r1, r3
 8001576:	d1c6      	bne.n	8001506 <HAL_RCC_ClockConfig+0xa>
 8001578:	e7ce      	b.n	8001518 <HAL_RCC_ClockConfig+0x1c>
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001580:	bf1e      	ittt	ne
 8001582:	689a      	ldrne	r2, [r3, #8]
 8001584:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001588:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800158c:	bf42      	ittt	mi
 800158e:	689a      	ldrmi	r2, [r3, #8]
 8001590:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001594:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	68a0      	ldr	r0, [r4, #8]
 800159a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800159e:	4302      	orrs	r2, r0
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	e7bc      	b.n	800151e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a4:	6862      	ldr	r2, [r4, #4]
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_RCC_ClockConfig+0x128>)
 80015a8:	2a01      	cmp	r2, #1
 80015aa:	d11d      	bne.n	80015e8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b2:	d0a8      	beq.n	8001506 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b4:	4e1b      	ldr	r6, [pc, #108]	; (8001624 <HAL_RCC_ClockConfig+0x128>)
 80015b6:	68b3      	ldr	r3, [r6, #8]
 80015b8:	f023 0303 	bic.w	r3, r3, #3
 80015bc:	4313      	orrs	r3, r2
 80015be:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80015c0:	f7ff f830 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80015c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ca:	68b3      	ldr	r3, [r6, #8]
 80015cc:	6862      	ldr	r2, [r4, #4]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015d6:	d0a4      	beq.n	8001522 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7ff f824 	bl	8000624 <HAL_GetTick>
 80015dc:	1bc0      	subs	r0, r0, r7
 80015de:	4540      	cmp	r0, r8
 80015e0:	d9f3      	bls.n	80015ca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80015e2:	2003      	movs	r0, #3
}
 80015e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e8:	1e91      	subs	r1, r2, #2
 80015ea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ee:	d802      	bhi.n	80015f6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015f4:	e7dd      	b.n	80015b2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	f013 0f02 	tst.w	r3, #2
 80015fa:	e7da      	b.n	80015b2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fc:	b2ea      	uxtb	r2, r5
 80015fe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	429d      	cmp	r5, r3
 8001608:	f47f af7d 	bne.w	8001506 <HAL_RCC_ClockConfig+0xa>
 800160c:	e78f      	b.n	800152e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800160e:	4905      	ldr	r1, [pc, #20]	; (8001624 <HAL_RCC_ClockConfig+0x128>)
 8001610:	68e0      	ldr	r0, [r4, #12]
 8001612:	688b      	ldr	r3, [r1, #8]
 8001614:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001618:	4303      	orrs	r3, r0
 800161a:	608b      	str	r3, [r1, #8]
 800161c:	e78a      	b.n	8001534 <HAL_RCC_ClockConfig+0x38>
 800161e:	bf00      	nop
 8001620:	40023c00 	.word	0x40023c00
 8001624:	40023800 	.word	0x40023800
 8001628:	080044dd 	.word	0x080044dd
 800162c:	2000011c 	.word	0x2000011c

08001630 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001630:	4b01      	ldr	r3, [pc, #4]	; (8001638 <HAL_RCC_GetHCLKFreq+0x8>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000011c 	.word	0x2000011c

0800163c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800163c:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 800163e:	b189      	cbz	r1, 8001664 <HAL_TIM_Encoder_Start+0x28>
 8001640:	2904      	cmp	r1, #4
 8001642:	d007      	beq.n	8001654 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001644:	6a1a      	ldr	r2, [r3, #32]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800164c:	6a1a      	ldr	r2, [r3, #32]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001654:	6a1a      	ldr	r2, [r3, #32]
 8001656:	f022 0210 	bic.w	r2, r2, #16
 800165a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800165c:	6a1a      	ldr	r2, [r3, #32]
 800165e:	f042 0210 	orr.w	r2, r2, #16
 8001662:	e006      	b.n	8001672 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8001664:	6a1a      	ldr	r2, [r3, #32]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800166c:	6a1a      	ldr	r2, [r3, #32]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
}
 800167c:	2000      	movs	r0, #0
 800167e:	4770      	bx	lr

08001680 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001680:	4a22      	ldr	r2, [pc, #136]	; (800170c <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8001682:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001684:	4290      	cmp	r0, r2
 8001686:	d00e      	beq.n	80016a6 <TIM_Base_SetConfig+0x26>
 8001688:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800168c:	d00b      	beq.n	80016a6 <TIM_Base_SetConfig+0x26>
 800168e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001692:	4290      	cmp	r0, r2
 8001694:	d007      	beq.n	80016a6 <TIM_Base_SetConfig+0x26>
 8001696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800169a:	4290      	cmp	r0, r2
 800169c:	d003      	beq.n	80016a6 <TIM_Base_SetConfig+0x26>
 800169e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016a2:	4290      	cmp	r0, r2
 80016a4:	d119      	bne.n	80016da <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 80016a6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016ac:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <TIM_Base_SetConfig+0x8c>)
 80016b0:	4290      	cmp	r0, r2
 80016b2:	d104      	bne.n	80016be <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016b4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80016b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ba:	4313      	orrs	r3, r2
 80016bc:	e018      	b.n	80016f0 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80016be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016c2:	d0f7      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
 80016c4:	4a12      	ldr	r2, [pc, #72]	; (8001710 <TIM_Base_SetConfig+0x90>)
 80016c6:	4290      	cmp	r0, r2
 80016c8:	d0f4      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
 80016ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ce:	4290      	cmp	r0, r2
 80016d0:	d0f0      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
 80016d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016d6:	4290      	cmp	r0, r2
 80016d8:	d0ec      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <TIM_Base_SetConfig+0x94>)
 80016dc:	4290      	cmp	r0, r2
 80016de:	d0e9      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
 80016e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e4:	4290      	cmp	r0, r2
 80016e6:	d0e5      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
 80016e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ec:	4290      	cmp	r0, r2
 80016ee:	d0e1      	beq.n	80016b4 <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 80016f0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016f2:	688b      	ldr	r3, [r1, #8]
 80016f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80016f6:	680b      	ldr	r3, [r1, #0]
 80016f8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <TIM_Base_SetConfig+0x8c>)
 80016fc:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80016fe:	bf04      	itt	eq
 8001700:	690b      	ldreq	r3, [r1, #16]
 8001702:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001704:	2301      	movs	r3, #1
 8001706:	6143      	str	r3, [r0, #20]
}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40010000 	.word	0x40010000
 8001710:	40000400 	.word	0x40000400
 8001714:	40014000 	.word	0x40014000

08001718 <HAL_TIM_Encoder_Init>:
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	460c      	mov	r4, r1
  if(htim == NULL)
 800171c:	4605      	mov	r5, r0
 800171e:	2800      	cmp	r0, #0
 8001720:	d041      	beq.n	80017a6 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001722:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001726:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800172a:	b91b      	cbnz	r3, 8001734 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800172c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 8001730:	f001 ffd6 	bl	80036e0 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001734:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 8001736:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001738:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 800173c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001740:	6883      	ldr	r3, [r0, #8]
 8001742:	f023 0307 	bic.w	r3, r3, #7
 8001746:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8001748:	f7ff ff9a 	bl	8001680 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800174c:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800174e:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001750:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001752:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001754:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8001756:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001758:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800175a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800175c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001760:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001764:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8001768:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800176a:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800176e:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001770:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001778:	68e1      	ldr	r1, [r4, #12]
 800177a:	430b      	orrs	r3, r1
 800177c:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800177e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001782:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8001786:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001788:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800178a:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800178e:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001790:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001792:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8001796:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001798:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 800179a:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 800179c:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 800179e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 80017a2:	2000      	movs	r0, #0
 80017a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80017a6:	2001      	movs	r0, #1
}
 80017a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080017aa <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80017aa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80017ae:	2b01      	cmp	r3, #1
{
 80017b0:	b510      	push	{r4, lr}
 80017b2:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80017b6:	d018      	beq.n	80017ea <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80017b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017bc:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80017be:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017c0:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017c2:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017c8:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4322      	orrs	r2, r4
 80017ce:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d6:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80017de:	2301      	movs	r3, #1
 80017e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80017e4:	2300      	movs	r3, #0
 80017e6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80017ea:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80017ec:	bd10      	pop	{r4, pc}

080017ee <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80017ee:	b084      	sub	sp, #16
 80017f0:	b538      	push	{r3, r4, r5, lr}
 80017f2:	ad05      	add	r5, sp, #20
 80017f4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80017f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017fa:	2b01      	cmp	r3, #1
{
 80017fc:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80017fe:	d126      	bne.n	800184e <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001800:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001806:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001808:	68c3      	ldr	r3, [r0, #12]
 800180a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800180e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001812:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001814:	68c3      	ldr	r3, [r0, #12]
 8001816:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800181a:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 800181c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800181e:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001820:	bf02      	ittt	eq
 8001822:	68c3      	ldreq	r3, [r0, #12]
 8001824:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001828:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 800182a:	f000 fbdd 	bl	8001fe8 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 800182e:	9b08      	ldr	r3, [sp, #32]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d107      	bne.n	8001844 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001834:	68a3      	ldr	r3, [r4, #8]
 8001836:	f043 0306 	orr.w	r3, r3, #6
 800183a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800183c:	68a3      	ldr	r3, [r4, #8]
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8001844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001848:	2000      	movs	r0, #0
 800184a:	b004      	add	sp, #16
 800184c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800184e:	68c3      	ldr	r3, [r0, #12]
 8001850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001854:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8001856:	f000 fbc7 	bl	8001fe8 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800185a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001860:	e7e5      	b.n	800182e <USB_CoreInit+0x40>

08001862 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001862:	6883      	ldr	r3, [r0, #8]
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800186a:	2000      	movs	r0, #0
 800186c:	4770      	bx	lr

0800186e <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800186e:	6883      	ldr	r3, [r0, #8]
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8001876:	2000      	movs	r0, #0
 8001878:	4770      	bx	lr

0800187a <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800187a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800187c:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800187e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8001880:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001884:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8001886:	d108      	bne.n	800189a <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8001888:	68c3      	ldr	r3, [r0, #12]
 800188a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800188e:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8001890:	2032      	movs	r0, #50	; 0x32
 8001892:	f7fe fecd 	bl	8000630 <HAL_Delay>
  
  return HAL_OK;
}
 8001896:	2000      	movs	r0, #0
 8001898:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 800189a:	2900      	cmp	r1, #0
 800189c:	d1f8      	bne.n	8001890 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800189e:	68c3      	ldr	r3, [r0, #12]
 80018a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018a4:	60c3      	str	r3, [r0, #12]
 80018a6:	e7f3      	b.n	8001890 <USB_SetCurrentMode+0x16>

080018a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80018a8:	b084      	sub	sp, #16
 80018aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ae:	4604      	mov	r4, r0
 80018b0:	a807      	add	r0, sp, #28
 80018b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80018b6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80018b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80018ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018bc:	4688      	mov	r8, r1
  if (cfg.vbus_sensing_enable == 0U)
 80018be:	b9a6      	cbnz	r6, 80018ea <USB_DevInit+0x42>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80018c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80018cc:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80018d0:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80018d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80018d6:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80018d8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80018dc:	d15e      	bne.n	800199c <USB_DevInit+0xf4>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80018de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80018e0:	b939      	cbnz	r1, 80018f2 <USB_DevInit+0x4a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80018e2:	4620      	mov	r0, r4
 80018e4:	f000 f89e 	bl	8001a24 <USB_SetDevSpeed>
 80018e8:	e007      	b.n	80018fa <USB_DevInit+0x52>
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80018ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80018f0:	e7e9      	b.n	80018c6 <USB_DevInit+0x1e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80018f2:	4619      	mov	r1, r3
 80018f4:	4620      	mov	r0, r4
 80018f6:	f000 f895 	bl	8001a24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 80018fa:	2110      	movs	r1, #16
 80018fc:	4620      	mov	r0, r4
 80018fe:	f000 f86f 	bl	80019e0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8001902:	4620      	mov	r0, r4
 8001904:	f000 f87e 	bl	8001a04 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8001908:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 800190a:	f04f 32ff 	mov.w	r2, #4294967295
  USBx_DEVICE->DIEPMSK = 0U;
 800190e:	612b      	str	r3, [r5, #16]
 8001910:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 8001912:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8001914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001918:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 800191a:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0U;
 800191e:	61eb      	str	r3, [r5, #28]
 8001920:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001924:	4543      	cmp	r3, r8
 8001926:	d13b      	bne.n	80019a0 <USB_DevInit+0xf8>
 8001928:	2100      	movs	r1, #0
 800192a:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
 800192e:	4608      	mov	r0, r1
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8001930:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8001934:	f04f 0cff 	mov.w	ip, #255	; 0xff
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001938:	428b      	cmp	r3, r1
 800193a:	d13e      	bne.n	80019ba <USB_DevInit+0x112>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800193c:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 800193e:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001944:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001946:	d108      	bne.n	800195a <USB_DevInit+0xb2>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <USB_DevInit+0x130>)
 800194a:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800194c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800194e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001952:	f043 0303 	orr.w	r3, r3, #3
 8001956:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8001958:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800195e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001962:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8001964:	b91f      	cbnz	r7, 800196e <USB_DevInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8001966:	69a3      	ldr	r3, [r4, #24]
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800196e:	69a2      	ldr	r2, [r4, #24]
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <USB_DevInit+0x134>)
 8001972:	4313      	orrs	r3, r2
 8001974:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8001976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001978:	b11b      	cbz	r3, 8001982 <USB_DevInit+0xda>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800197a:	69a3      	ldr	r3, [r4, #24]
 800197c:	f043 0308 	orr.w	r3, r3, #8
 8001980:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8001982:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8001984:	bf01      	itttt	eq
 8001986:	69a3      	ldreq	r3, [r4, #24]
 8001988:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800198c:	f043 0304 	orreq.w	r3, r3, #4
 8001990:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8001992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001996:	2000      	movs	r0, #0
 8001998:	b004      	add	sp, #16
 800199a:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800199c:	2103      	movs	r1, #3
 800199e:	e7a0      	b.n	80018e2 <USB_DevInit+0x3a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80019a0:	f8d2 c000 	ldr.w	ip, [r2]
 80019a4:	f1bc 0f00 	cmp.w	ip, #0
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80019a8:	bfb4      	ite	lt
 80019aa:	6010      	strlt	r0, [r2, #0]
      USBx_INEP(i)->DIEPCTL = 0U;
 80019ac:	6011      	strge	r1, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80019ae:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80019b0:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80019b2:	f8c2 e008 	str.w	lr, [r2, #8]
 80019b6:	3220      	adds	r2, #32
 80019b8:	e7b4      	b.n	8001924 <USB_DevInit+0x7c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80019ba:	f8d2 8000 	ldr.w	r8, [r2]
 80019be:	f1b8 0f00 	cmp.w	r8, #0
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80019c2:	bfb4      	ite	lt
 80019c4:	f8c2 e000 	strlt.w	lr, [r2]
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80019c8:	6010      	strge	r0, [r2, #0]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80019ca:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80019cc:	6110      	str	r0, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 80019ce:	f8c2 c008 	str.w	ip, [r2, #8]
 80019d2:	3220      	adds	r2, #32
 80019d4:	e7b0      	b.n	8001938 <USB_DevInit+0x90>
 80019d6:	bf00      	nop
 80019d8:	00800100 	.word	0x00800100
 80019dc:	803c3800 	.word	0x803c3800

080019e0 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80019e0:	0189      	lsls	r1, r1, #6
 80019e2:	f041 0120 	orr.w	r1, r1, #32
 80019e6:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <USB_FlushTxFifo+0x20>)
 80019e8:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80019ea:	3a01      	subs	r2, #1
 80019ec:	d005      	beq.n	80019fa <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80019ee:	6903      	ldr	r3, [r0, #16]
 80019f0:	f013 0320 	ands.w	r3, r3, #32
 80019f4:	d1f9      	bne.n	80019ea <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80019f6:	4618      	mov	r0, r3
 80019f8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80019fa:	2003      	movs	r0, #3
}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	00030d41 	.word	0x00030d41

08001a04 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001a04:	2310      	movs	r3, #16
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <USB_FlushRxFifo+0x1c>)
 8001a08:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8001a0a:	3a01      	subs	r2, #1
 8001a0c:	d005      	beq.n	8001a1a <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001a0e:	6903      	ldr	r3, [r0, #16]
 8001a10:	f013 0310 	ands.w	r3, r3, #16
 8001a14:	d1f9      	bne.n	8001a0a <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8001a16:	4618      	mov	r0, r3
 8001a18:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001a1a:	2003      	movs	r0, #3
}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	00030d41 	.word	0x00030d41

08001a24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8001a24:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001a28:	4319      	orrs	r1, r3
 8001a2a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8001a2e:	2000      	movs	r0, #0
 8001a30:	4770      	bx	lr

08001a32 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8001a32:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8001a36:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8001a3a:	f010 0006 	ands.w	r0, r0, #6
 8001a3e:	d012      	beq.n	8001a66 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001a40:	6893      	ldr	r3, [r2, #8]
 8001a42:	f003 0306 	and.w	r3, r3, #6
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d00c      	beq.n	8001a64 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8001a4a:	6893      	ldr	r3, [r2, #8]
 8001a4c:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8001a50:	2b06      	cmp	r3, #6
 8001a52:	d007      	beq.n	8001a64 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001a54:	6893      	ldr	r3, [r2, #8]
 8001a56:	f003 0306 	and.w	r3, r3, #6
 8001a5a:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8001a5c:	bf14      	ite	ne
 8001a5e:	2000      	movne	r0, #0
 8001a60:	2002      	moveq	r0, #2
 8001a62:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8001a64:	2003      	movs	r0, #3
  }
  
  return speed;
}
 8001a66:	4770      	bx	lr

08001a68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001a68:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8001a6a:	784b      	ldrb	r3, [r1, #1]
 8001a6c:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001a6e:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8001a72:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d11b      	bne.n	8001ab2 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001a7a:	40a3      	lsls	r3, r4
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001a80:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8001a84:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8001a86:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	0412      	lsls	r2, r2, #16
 8001a8e:	d40e      	bmi.n	8001aae <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001a90:	688a      	ldr	r2, [r1, #8]
 8001a92:	78c8      	ldrb	r0, [r1, #3]
 8001a94:	681d      	ldr	r5, [r3, #0]
 8001a96:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8001a9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa2:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8001aa6:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8001aaa:	4328      	orrs	r0, r5
 8001aac:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8001aae:	2000      	movs	r0, #0
 8001ab0:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab6:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001ab8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001abc:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001abe:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8001ac2:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8001ac4:	6803      	ldr	r3, [r0, #0]
 8001ac6:	041b      	lsls	r3, r3, #16
 8001ac8:	d4f1      	bmi.n	8001aae <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8001aca:	688b      	ldr	r3, [r1, #8]
 8001acc:	78c9      	ldrb	r1, [r1, #3]
 8001ace:	6802      	ldr	r2, [r0, #0]
 8001ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001adc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	6003      	str	r3, [r0, #0]
 8001ae4:	e7e3      	b.n	8001aae <USB_ActivateEndpoint+0x46>

08001ae6 <USB_DeactivateEndpoint>:
 8001ae6:	f000 b801 	b.w	8001aec <USB_DeactivateDedicatedEndpoint>
	...

08001aec <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8001aec:	b570      	push	{r4, r5, r6, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8001aee:	784b      	ldrb	r3, [r1, #1]
 8001af0:	2b01      	cmp	r3, #1
{
 8001af2:	460e      	mov	r6, r1
 8001af4:	4605      	mov	r5, r0
 8001af6:	7809      	ldrb	r1, [r1, #0]
 8001af8:	f04f 0320 	mov.w	r3, #32
  if (ep->is_in == 1U)
 8001afc:	d126      	bne.n	8001b4c <USB_DeactivateDedicatedEndpoint+0x60>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8001afe:	f500 6210 	add.w	r2, r0, #2304	; 0x900
 8001b02:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b0c:	601a      	str	r2, [r3, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b12:	601a      	str	r2, [r3, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8001b14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <USB_DeactivateDedicatedEndpoint+0xac>)
    
    do
    {
      if (++count > 200000U)
 8001b1c:	3a01      	subs	r2, #1
 8001b1e:	d101      	bne.n	8001b24 <USB_DeactivateDedicatedEndpoint+0x38>
      {
        return HAL_TIMEOUT;
 8001b20:	2003      	movs	r0, #3
 8001b22:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8001b24:	689c      	ldr	r4, [r3, #8]
 8001b26:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8001b2a:	d1f7      	bne.n	8001b1c <USB_DeactivateDedicatedEndpoint+0x30>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f7ff ff56 	bl	80019e0 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8001b34:	7831      	ldrb	r1, [r6, #0]
 8001b36:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	408b      	lsls	r3, r1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	ea22 0303 	bic.w	r3, r2, r3
 8001b44:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8001b48:	4620      	mov	r0, r4
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8001b4c:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8001b50:	fb13 2301 	smlabb	r3, r3, r1, r2
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b5a:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001b5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b60:	601a      	str	r2, [r3, #0]
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8001b62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <USB_DeactivateDedicatedEndpoint+0xac>)
      if (++count > 200000U)
 8001b6a:	3a01      	subs	r2, #1
 8001b6c:	d0d8      	beq.n	8001b20 <USB_DeactivateDedicatedEndpoint+0x34>
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8001b6e:	6898      	ldr	r0, [r3, #8]
 8001b70:	f010 0010 	ands.w	r0, r0, #16
 8001b74:	d1f9      	bne.n	8001b6a <USB_DeactivateDedicatedEndpoint+0x7e>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b76:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7e:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8001b82:	f8d5 381c 	ldr.w	r3, [r5, #2076]	; 0x81c
 8001b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b8a:	408a      	lsls	r2, r1
 8001b8c:	ea23 0302 	bic.w	r3, r3, r2
 8001b90:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c

}
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
 8001b96:	bf00      	nop
 8001b98:	00030d41 	.word	0x00030d41

08001b9c <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8001b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001b9e:	784b      	ldrb	r3, [r1, #1]
 8001ba0:	780c      	ldrb	r4, [r1, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	694b      	ldr	r3, [r1, #20]
 8001ba6:	d177      	bne.n	8001c98 <USB_EPStartXfer+0xfc>
 8001ba8:	2620      	movs	r6, #32
 8001baa:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001bae:	fb16 5404 	smlabb	r4, r6, r4, r5
 8001bb2:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d138      	bne.n	8001c2a <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001bb8:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001bbc:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001bc0:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001bc2:	6926      	ldr	r6, [r4, #16]
 8001bc4:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8001bc8:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001bca:	6926      	ldr	r6, [r4, #16]
 8001bcc:	0cf6      	lsrs	r6, r6, #19
 8001bce:	04f6      	lsls	r6, r6, #19
 8001bd0:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8001bd2:	2a01      	cmp	r2, #1
 8001bd4:	d150      	bne.n	8001c78 <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001bd6:	780c      	ldrb	r4, [r1, #0]
 8001bd8:	690e      	ldr	r6, [r1, #16]
 8001bda:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001bde:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8001be0:	78ce      	ldrb	r6, [r1, #3]
 8001be2:	2e01      	cmp	r6, #1
 8001be4:	d10f      	bne.n	8001c06 <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001be6:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8001bea:	780f      	ldrb	r7, [r1, #0]
 8001bec:	f414 7f80 	tst.w	r4, #256	; 0x100
 8001bf0:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8001bf4:	fb14 5407 	smlabb	r4, r4, r7, r5
 8001bf8:	6827      	ldr	r7, [r4, #0]
 8001bfa:	bf0c      	ite	eq
 8001bfc:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8001c00:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8001c04:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001c06:	780f      	ldrb	r7, [r1, #0]
 8001c08:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8001c0c:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8001c0e:	682c      	ldr	r4, [r5, #0]
 8001c10:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001c14:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8001c16:	d105      	bne.n	8001c24 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8001c18:	9200      	str	r2, [sp, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	463a      	mov	r2, r7
 8001c1e:	68c9      	ldr	r1, [r1, #12]
 8001c20:	f000 f8ef 	bl	8001e02 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8001c24:	2000      	movs	r0, #0
 8001c26:	b003      	add	sp, #12
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001c2a:	0cf6      	lsrs	r6, r6, #19
 8001c2c:	04f6      	lsls	r6, r6, #19
 8001c2e:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001c30:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001c32:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001c34:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8001c38:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8001c3c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8001c3e:	19de      	adds	r6, r3, r7
 8001c40:	3e01      	subs	r6, #1
 8001c42:	fbb6 f7f7 	udiv	r7, r6, r7
 8001c46:	4e37      	ldr	r6, [pc, #220]	; (8001d24 <USB_EPStartXfer+0x188>)
 8001c48:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8001c4c:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8001c50:	ea46 060e 	orr.w	r6, r6, lr
 8001c54:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001c56:	6927      	ldr	r7, [r4, #16]
 8001c58:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8001c5c:	433e      	orrs	r6, r7
 8001c5e:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8001c60:	78ce      	ldrb	r6, [r1, #3]
 8001c62:	2e01      	cmp	r6, #1
 8001c64:	d15a      	bne.n	8001d1c <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8001c66:	6926      	ldr	r6, [r4, #16]
 8001c68:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8001c6c:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8001c6e:	6926      	ldr	r6, [r4, #16]
 8001c70:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001c74:	6126      	str	r6, [r4, #16]
 8001c76:	e7ac      	b.n	8001bd2 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8001c78:	78ce      	ldrb	r6, [r1, #3]
 8001c7a:	2e01      	cmp	r6, #1
 8001c7c:	d0b3      	beq.n	8001be6 <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0ae      	beq.n	8001be0 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8001c82:	f891 e000 	ldrb.w	lr, [r1]
 8001c86:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8001c8a:	2401      	movs	r4, #1
 8001c8c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c90:	433c      	orrs	r4, r7
 8001c92:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8001c96:	e7a3      	b.n	8001be0 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001c98:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8001c9c:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001ca0:	6925      	ldr	r5, [r4, #16]
 8001ca2:	0ced      	lsrs	r5, r5, #19
 8001ca4:	04ed      	lsls	r5, r5, #19
 8001ca6:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001ca8:	6925      	ldr	r5, [r4, #16]
 8001caa:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8001cae:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8001cb2:	6125      	str	r5, [r4, #16]
 8001cb4:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8001cb6:	b9fb      	cbnz	r3, 8001cf8 <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8001cb8:	6923      	ldr	r3, [r4, #16]
 8001cba:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001cbe:	431d      	orrs	r5, r3
 8001cc0:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001cc2:	6923      	ldr	r3, [r4, #16]
 8001cc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cc8:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8001cca:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8001ccc:	bf04      	itt	eq
 8001cce:	68cb      	ldreq	r3, [r1, #12]
 8001cd0:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8001cd2:	78cb      	ldrb	r3, [r1, #3]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10a      	bne.n	8001cee <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8001cd8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8001cdc:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	bf0c      	ite	eq
 8001ce4:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8001ce8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001cf4:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8001cf6:	e795      	b.n	8001c24 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001cf8:	4e0a      	ldr	r6, [pc, #40]	; (8001d24 <USB_EPStartXfer+0x188>)
 8001cfa:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8001cfc:	442b      	add	r3, r5
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8001d04:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8001d08:	433e      	orrs	r6, r7
 8001d0a:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	6926      	ldr	r6, [r4, #16]
 8001d10:	435d      	muls	r5, r3
 8001d12:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8001d16:	4335      	orrs	r5, r6
 8001d18:	6125      	str	r5, [r4, #16]
 8001d1a:	e7d6      	b.n	8001cca <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8001d1c:	2a01      	cmp	r2, #1
 8001d1e:	d1ae      	bne.n	8001c7e <USB_EPStartXfer+0xe2>
 8001d20:	e759      	b.n	8001bd6 <USB_EPStartXfer+0x3a>
 8001d22:	bf00      	nop
 8001d24:	1ff80000 	.word	0x1ff80000

08001d28 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8001d28:	784b      	ldrb	r3, [r1, #1]
 8001d2a:	2b01      	cmp	r3, #1
{
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	780b      	ldrb	r3, [r1, #0]
 8001d30:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8001d32:	d143      	bne.n	8001dbc <USB_EP0StartXfer+0x94>
 8001d34:	2420      	movs	r4, #32
 8001d36:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001d3a:	fb14 6303 	smlabb	r3, r4, r3, r6
 8001d3e:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8001d40:	b9cd      	cbnz	r5, 8001d76 <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001d42:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001d46:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001d4a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001d4c:	691c      	ldr	r4, [r3, #16]
 8001d4e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001d52:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8001d54:	691c      	ldr	r4, [r3, #16]
 8001d56:	0ce4      	lsrs	r4, r4, #19
 8001d58:	04e4      	lsls	r4, r4, #19
 8001d5a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001d5c:	780d      	ldrb	r5, [r1, #0]
 8001d5e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8001d62:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8001d64:	681c      	ldr	r4, [r3, #0]
 8001d66:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8001d6a:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8001d6c:	d11b      	bne.n	8001da6 <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8001d6e:	690a      	ldr	r2, [r1, #16]
 8001d70:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8001d72:	2000      	movs	r0, #0
 8001d74:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8001d76:	0ce4      	lsrs	r4, r4, #19
 8001d78:	04e4      	lsls	r4, r4, #19
 8001d7a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8001d7c:	691c      	ldr	r4, [r3, #16]
 8001d7e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8001d82:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8001d86:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8001d88:	688c      	ldr	r4, [r1, #8]
 8001d8a:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8001d8c:	bf88      	it	hi
 8001d8e:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001d90:	691c      	ldr	r4, [r3, #16]
 8001d92:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001d96:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8001d98:	694c      	ldr	r4, [r1, #20]
 8001d9a:	691d      	ldr	r5, [r3, #16]
 8001d9c:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8001da0:	432c      	orrs	r4, r5
 8001da2:	611c      	str	r4, [r3, #16]
 8001da4:	e7da      	b.n	8001d5c <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 8001da6:	694b      	ldr	r3, [r1, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0e2      	beq.n	8001d72 <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8001dac:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8001db0:	2301      	movs	r3, #1
 8001db2:	40ab      	lsls	r3, r5
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8001dba:	e7da      	b.n	8001d72 <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8001dbc:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001dc0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8001dc4:	6903      	ldr	r3, [r0, #16]
 8001dc6:	0cdb      	lsrs	r3, r3, #19
 8001dc8:	04db      	lsls	r3, r3, #19
 8001dca:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8001dcc:	6903      	ldr	r3, [r0, #16]
 8001dce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8001dd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8001dd6:	6103      	str	r3, [r0, #16]
 8001dd8:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8001dda:	b105      	cbz	r5, 8001dde <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8001ddc:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8001dde:	6904      	ldr	r4, [r0, #16]
 8001de0:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001de4:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001de6:	6904      	ldr	r4, [r0, #16]
 8001de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dec:	4323      	orrs	r3, r4
    if (dma == 1U)
 8001dee:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8001df0:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8001df2:	bf04      	itt	eq
 8001df4:	68cb      	ldreq	r3, [r1, #12]
 8001df6:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8001df8:	6803      	ldr	r3, [r0, #0]
 8001dfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8001dfe:	6003      	str	r3, [r0, #0]
 8001e00:	e7b7      	b.n	8001d72 <USB_EP0StartXfer+0x4a>

08001e02 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8001e02:	b510      	push	{r4, lr}
 8001e04:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8001e08:	b94c      	cbnz	r4, 8001e1e <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8001e0a:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001e0c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001e10:	f023 0303 	bic.w	r3, r3, #3
 8001e14:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8001e18:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8001e1a:	4299      	cmp	r1, r3
 8001e1c:	d101      	bne.n	8001e22 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8001e1e:	2000      	movs	r0, #0
 8001e20:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8001e22:	f851 0b04 	ldr.w	r0, [r1], #4
 8001e26:	6010      	str	r0, [r2, #0]
 8001e28:	e7f7      	b.n	8001e1a <USB_WritePacket+0x18>

08001e2a <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8001e2a:	3203      	adds	r2, #3
 8001e2c:	f022 0203 	bic.w	r2, r2, #3
 8001e30:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001e32:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8001e36:	4291      	cmp	r1, r2
 8001e38:	d101      	bne.n	8001e3e <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8001e3a:	4608      	mov	r0, r1
 8001e3c:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8001e3e:	6803      	ldr	r3, [r0, #0]
 8001e40:	f841 3b04 	str.w	r3, [r1], #4
 8001e44:	e7f7      	b.n	8001e36 <USB_ReadPacket+0xc>

08001e46 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001e46:	784b      	ldrb	r3, [r1, #1]
 8001e48:	780a      	ldrb	r2, [r1, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	f04f 0320 	mov.w	r3, #32
 8001e50:	d10b      	bne.n	8001e6a <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8001e52:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8001e56:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001e5a:	6803      	ldr	r3, [r0, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0b      	blt.n	8001e78 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8001e60:	6803      	ldr	r3, [r0, #0]
 8001e62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e66:	6003      	str	r3, [r0, #0]
 8001e68:	e006      	b.n	8001e78 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8001e6a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8001e6e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001e72:	6803      	ldr	r3, [r0, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	daf3      	bge.n	8001e60 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8001e78:	6803      	ldr	r3, [r0, #0]
 8001e7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e7e:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8001e80:	2000      	movs	r0, #0
 8001e82:	4770      	bx	lr

08001e84 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8001e84:	784b      	ldrb	r3, [r1, #1]
 8001e86:	780a      	ldrb	r2, [r1, #0]
 8001e88:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e8a:	bf0c      	ite	eq
 8001e8c:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e90:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8001e94:	2320      	movs	r3, #32
 8001e96:	fb13 0002 	smlabb	r0, r3, r2, r0
 8001e9a:	6803      	ldr	r3, [r0, #0]
 8001e9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ea0:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8001ea2:	78cb      	ldrb	r3, [r1, #3]
 8001ea4:	3b02      	subs	r3, #2
 8001ea6:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8001ea8:	bf9e      	ittt	ls
 8001eaa:	6803      	ldrls	r3, [r0, #0]
 8001eac:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	4770      	bx	lr

08001eb6 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8001eb6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001eba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ebe:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8001ec2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001ec6:	0109      	lsls	r1, r1, #4
 8001ec8:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8001ecc:	4319      	orrs	r1, r3
 8001ece:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	4770      	bx	lr

08001ed6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001ed6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8001ed8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001edc:	f023 0302 	bic.w	r3, r3, #2
 8001ee0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f7fe fba3 	bl	8000630 <HAL_Delay>
  
  return HAL_OK;  
}
 8001eea:	2000      	movs	r0, #0
 8001eec:	bd08      	pop	{r3, pc}

08001eee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8001eee:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8001ef0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001efc:	2003      	movs	r0, #3
 8001efe:	f7fe fb97 	bl	8000630 <HAL_Delay>
  
  return HAL_OK;  
}
 8001f02:	2000      	movs	r0, #0
 8001f04:	bd08      	pop	{r3, pc}

08001f06 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8001f06:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8001f08:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8001f0a:	4010      	ands	r0, r2
 8001f0c:	4770      	bx	lr

08001f0e <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001f0e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001f12:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001f16:	69c0      	ldr	r0, [r0, #28]
 8001f18:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8001f1a:	0c00      	lsrs	r0, r0, #16
 8001f1c:	4770      	bx	lr

08001f1e <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8001f1e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8001f22:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8001f26:	69c0      	ldr	r0, [r0, #28]
 8001f28:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8001f2a:	b280      	uxth	r0, r0
 8001f2c:	4770      	bx	lr

08001f2e <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001f2e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8001f32:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8001f36:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8001f3a:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8001f3c:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8001f3e:	4010      	ands	r0, r2
 8001f40:	4770      	bx	lr

08001f42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8001f42:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8001f44:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8001f48:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001f4c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001f50:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001f52:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001f56:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8001f58:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4323      	orrs	r3, r4
  return v;
}
 8001f5e:	4018      	ands	r0, r3
 8001f60:	bd10      	pop	{r4, pc}

08001f62 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8001f62:	6940      	ldr	r0, [r0, #20]
}
 8001f64:	f000 0001 	and.w	r0, r0, #1
 8001f68:	4770      	bx	lr

08001f6a <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8001f6a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8001f6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f72:	f023 0307 	bic.w	r3, r3, #7
 8001f76:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8001f7a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	f002 0206 	and.w	r2, r2, #6
 8001f84:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8001f86:	bf02      	ittt	eq
 8001f88:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8001f8c:	f042 0203 	orreq.w	r2, r2, #3
 8001f90:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	4770      	bx	lr

08001fa0 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8001fa0:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001fa2:	2400      	movs	r4, #0
 8001fa4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8001fa8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001fac:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8001fb0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8001fb4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8001fb8:	f044 0418 	orr.w	r4, r4, #24
 8001fbc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001fc0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8001fc4:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8001fc6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001fca:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001fce:	bf08      	it	eq
 8001fd0:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8001fd4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8001fd8:	bf04      	itt	eq
 8001fda:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8001fde:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	bd10      	pop	{r4, pc}
	...

08001fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001fea:	3b01      	subs	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001fee:	2003      	movs	r0, #3
 8001ff0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001ff2:	6902      	ldr	r2, [r0, #16]
 8001ff4:	2a00      	cmp	r2, #0
 8001ff6:	daf8      	bge.n	8001fea <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001ff8:	6903      	ldr	r3, [r0, #16]
 8001ffa:	4a06      	ldr	r2, [pc, #24]	; (8002014 <USB_CoreReset+0x2c>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002002:	3a01      	subs	r2, #1
 8002004:	d0f3      	beq.n	8001fee <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002006:	6903      	ldr	r3, [r0, #16]
 8002008:	f013 0301 	ands.w	r3, r3, #1
 800200c:	d1f9      	bne.n	8002002 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 800200e:	4618      	mov	r0, r3
}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	00030d41 	.word	0x00030d41

08002018 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002018:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800201c:	b11b      	cbz	r3, 8002026 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800201e:	2000      	movs	r0, #0
 8002020:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002024:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002026:	2002      	movs	r0, #2
  }
}
 8002028:	4770      	bx	lr

0800202a <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800202a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800202e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002030:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002034:	b15b      	cbz	r3, 800204e <USBD_CDC_EP0_RxReady+0x24>
 8002036:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800203a:	28ff      	cmp	r0, #255	; 0xff
 800203c:	d007      	beq.n	800204e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002044:	4621      	mov	r1, r4
 8002046:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002048:	23ff      	movs	r3, #255	; 0xff
 800204a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800204e:	2000      	movs	r0, #0
 8002050:	bd10      	pop	{r4, pc}
	...

08002054 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002054:	2343      	movs	r3, #67	; 0x43
 8002056:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002058:	4800      	ldr	r0, [pc, #0]	; (800205c <USBD_CDC_GetFSCfgDesc+0x8>)
 800205a:	4770      	bx	lr
 800205c:	20000040 	.word	0x20000040

08002060 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002060:	2343      	movs	r3, #67	; 0x43
 8002062:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002064:	4800      	ldr	r0, [pc, #0]	; (8002068 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002066:	4770      	bx	lr
 8002068:	20000084 	.word	0x20000084

0800206c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800206c:	2343      	movs	r3, #67	; 0x43
 800206e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002070:	4800      	ldr	r0, [pc, #0]	; (8002074 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002072:	4770      	bx	lr
 8002074:	200000d4 	.word	0x200000d4

08002078 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002078:	230a      	movs	r3, #10
 800207a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800207c:	4800      	ldr	r0, [pc, #0]	; (8002080 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800207e:	4770      	bx	lr
 8002080:	200000c8 	.word	0x200000c8

08002084 <USBD_CDC_DataOut>:
{      
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002088:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800208c:	f001 fd24 	bl	8003ad8 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002090:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002094:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002098:	b14b      	cbz	r3, 80020ae <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800209a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800209e:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80020a8:	4798      	blx	r3
    return USBD_OK;
 80020aa:	2000      	movs	r0, #0
 80020ac:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80020ae:	2002      	movs	r0, #2
}
 80020b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080020b4 <USBD_CDC_Setup>:
{
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80020b6:	780f      	ldrb	r7, [r1, #0]
 80020b8:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80020bc:	4606      	mov	r6, r0
 80020be:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80020c0:	d023      	beq.n	800210a <USBD_CDC_Setup+0x56>
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d119      	bne.n	80020fa <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80020c6:	88ca      	ldrh	r2, [r1, #6]
 80020c8:	784b      	ldrb	r3, [r1, #1]
 80020ca:	b1c2      	cbz	r2, 80020fe <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80020cc:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80020ce:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80020d2:	d50b      	bpl.n	80020ec <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80020d4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80020d8:	4618      	mov	r0, r3
 80020da:	688f      	ldr	r7, [r1, #8]
 80020dc:	4629      	mov	r1, r5
 80020de:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 80020e0:	88e2      	ldrh	r2, [r4, #6]
 80020e2:	4629      	mov	r1, r5
 80020e4:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 80020e6:	f000 fb9a 	bl	800281e <USBD_CtlSendData>
      break;
 80020ea:	e006      	b.n	80020fa <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80020ec:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80020f0:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 80020f4:	4629      	mov	r1, r5
 80020f6:	f000 fba7 	bl	8002848 <USBD_CtlPrepareRx>
}
 80020fa:	2000      	movs	r0, #0
 80020fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80020fe:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002102:	6884      	ldr	r4, [r0, #8]
 8002104:	4618      	mov	r0, r3
 8002106:	47a0      	blx	r4
 8002108:	e7f7      	b.n	80020fa <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 800210a:	784b      	ldrb	r3, [r1, #1]
 800210c:	2b0a      	cmp	r3, #10
 800210e:	d1f4      	bne.n	80020fa <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002110:	2201      	movs	r2, #1
 8002112:	4901      	ldr	r1, [pc, #4]	; (8002118 <USBD_CDC_Setup+0x64>)
 8002114:	e7e7      	b.n	80020e6 <USBD_CDC_Setup+0x32>
 8002116:	bf00      	nop
 8002118:	200001e4 	.word	0x200001e4

0800211c <USBD_CDC_DeInit>:
{
 800211c:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800211e:	2181      	movs	r1, #129	; 0x81
{
 8002120:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002122:	f001 fc71 	bl	8003a08 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002126:	2101      	movs	r1, #1
 8002128:	4620      	mov	r0, r4
 800212a:	f001 fc6d 	bl	8003a08 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800212e:	2182      	movs	r1, #130	; 0x82
 8002130:	4620      	mov	r0, r4
 8002132:	f001 fc69 	bl	8003a08 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002136:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800213a:	b153      	cbz	r3, 8002152 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800213c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002144:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002148:	f001 fd74 	bl	8003c34 <free>
    pdev->pClassData = NULL;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002152:	2000      	movs	r0, #0
 8002154:	bd10      	pop	{r4, pc}

08002156 <USBD_CDC_Init>:
{
 8002156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002158:	7c03      	ldrb	r3, [r0, #16]
{
 800215a:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800215c:	bb7b      	cbnz	r3, 80021be <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800215e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002162:	2202      	movs	r2, #2
 8002164:	2181      	movs	r1, #129	; 0x81
 8002166:	f001 fc3f 	bl	80039e8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800216a:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800216e:	2202      	movs	r2, #2
 8002170:	2101      	movs	r1, #1
 8002172:	4620      	mov	r0, r4
 8002174:	f001 fc38 	bl	80039e8 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002178:	2308      	movs	r3, #8
 800217a:	2203      	movs	r2, #3
 800217c:	2182      	movs	r1, #130	; 0x82
 800217e:	4620      	mov	r0, r4
 8002180:	f001 fc32 	bl	80039e8 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002184:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002188:	f001 fd4c 	bl	8003c24 <malloc>
 800218c:	4606      	mov	r6, r0
 800218e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002192:	b320      	cbz	r0, 80021de <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002194:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800219c:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800219e:	2500      	movs	r5, #0
 80021a0:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80021a4:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80021a8:	b987      	cbnz	r7, 80021cc <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 80021aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ae:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80021b2:	2101      	movs	r1, #1
 80021b4:	4620      	mov	r0, r4
 80021b6:	f001 fc81 	bl	8003abc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80021ba:	4638      	mov	r0, r7
 80021bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80021be:	2340      	movs	r3, #64	; 0x40
 80021c0:	2202      	movs	r2, #2
 80021c2:	2181      	movs	r1, #129	; 0x81
 80021c4:	f001 fc10 	bl	80039e8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80021c8:	2340      	movs	r3, #64	; 0x40
 80021ca:	e7d0      	b.n	800216e <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80021cc:	2340      	movs	r3, #64	; 0x40
 80021ce:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80021d2:	2101      	movs	r1, #1
 80021d4:	4620      	mov	r0, r4
 80021d6:	f001 fc71 	bl	8003abc <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80021da:	4628      	mov	r0, r5
 80021dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80021de:	2001      	movs	r0, #1
}
 80021e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080021e2 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80021e2:	b119      	cbz	r1, 80021ec <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80021e4:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80021e8:	2000      	movs	r0, #0
 80021ea:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80021ec:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80021ee:	4770      	bx	lr

080021f0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80021f0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80021f4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80021f6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80021fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80021fe:	4770      	bx	lr

08002200 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002200:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002204:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002206:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800220a:	4770      	bx	lr

0800220c <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800220c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002210:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8002212:	b172      	cbz	r2, 8002232 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8002214:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002218:	2301      	movs	r3, #1
 800221a:	b964      	cbnz	r4, 8002236 <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800221c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8002220:	2181      	movs	r1, #129	; 0x81
 8002222:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8002226:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800222a:	f001 fc39 	bl	8003aa0 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800222e:	4620      	mov	r0, r4
 8002230:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8002232:	2002      	movs	r0, #2
 8002234:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8002236:	4618      	mov	r0, r3
  }
}
 8002238:	bd10      	pop	{r4, pc}

0800223a <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800223a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800223e:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002240:	b162      	cbz	r2, 800225c <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002242:	7c04      	ldrb	r4, [r0, #16]
 8002244:	b944      	cbnz	r4, 8002258 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002246:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800224a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800224e:	2101      	movs	r1, #1
 8002250:	f001 fc34 	bl	8003abc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002254:	2000      	movs	r0, #0
 8002256:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002258:	2340      	movs	r3, #64	; 0x40
 800225a:	e7f6      	b.n	800224a <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 800225c:	2002      	movs	r0, #2
  }
}
 800225e:	bd10      	pop	{r4, pc}

08002260 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002260:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002262:	b180      	cbz	r0, 8002286 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002264:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002268:	b113      	cbz	r3, 8002270 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002270:	b109      	cbz	r1, 8002276 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002272:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002276:	2301      	movs	r3, #1
 8002278:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800227c:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800227e:	f001 fb71 	bl	8003964 <USBD_LL_Init>
  
  return USBD_OK; 
 8002282:	2000      	movs	r0, #0
 8002284:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002286:	2002      	movs	r0, #2
}
 8002288:	bd08      	pop	{r3, pc}

0800228a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800228a:	b119      	cbz	r1, 8002294 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800228c:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002290:	2000      	movs	r0, #0
 8002292:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002294:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002296:	4770      	bx	lr

08002298 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002298:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800229a:	f001 fb97 	bl	80039cc <USBD_LL_Start>
  
  return USBD_OK;  
}
 800229e:	2000      	movs	r0, #0
 80022a0:	bd08      	pop	{r3, pc}

080022a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80022a2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80022a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022a8:	b90b      	cbnz	r3, 80022ae <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80022aa:	2002      	movs	r0, #2
 80022ac:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4798      	blx	r3
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d1f9      	bne.n	80022aa <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80022b6:	bd08      	pop	{r3, pc}

080022b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80022b8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80022ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4798      	blx	r3
  return USBD_OK;
}
 80022c2:	2000      	movs	r0, #0
 80022c4:	bd08      	pop	{r3, pc}

080022c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80022c6:	b538      	push	{r3, r4, r5, lr}
 80022c8:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80022ca:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80022ce:	4628      	mov	r0, r5
 80022d0:	f000 fa75 	bl	80027be <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80022d4:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80022d6:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80022da:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80022de:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80022e2:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80022e6:	f001 031f 	and.w	r3, r1, #31
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d00e      	beq.n	800230c <USBD_LL_SetupStage+0x46>
 80022ee:	d307      	bcc.n	8002300 <USBD_LL_SetupStage+0x3a>
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d010      	beq.n	8002316 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80022f4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80022f8:	4620      	mov	r0, r4
 80022fa:	f001 fb93 	bl	8003a24 <USBD_LL_StallEP>
    break;
 80022fe:	e003      	b.n	8002308 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002300:	4629      	mov	r1, r5
 8002302:	4620      	mov	r0, r4
 8002304:	f000 f8e6 	bl	80024d4 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002308:	2000      	movs	r0, #0
 800230a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800230c:	4629      	mov	r1, r5
 800230e:	4620      	mov	r0, r4
 8002310:	f000 f9da 	bl	80026c8 <USBD_StdItfReq>
    break;
 8002314:	e7f8      	b.n	8002308 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002316:	4629      	mov	r1, r5
 8002318:	4620      	mov	r0, r4
 800231a:	f000 f9ed 	bl	80026f8 <USBD_StdEPReq>
    break;
 800231e:	e7f3      	b.n	8002308 <USBD_LL_SetupStage+0x42>

08002320 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4604      	mov	r4, r0
 8002324:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002326:	bb11      	cbnz	r1, 800236e <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002328:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800232c:	2b03      	cmp	r3, #3
 800232e:	d10f      	bne.n	8002350 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002330:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002334:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002338:	4293      	cmp	r3, r2
 800233a:	d90b      	bls.n	8002354 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800233c:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800233e:	429a      	cmp	r2, r3
 8002340:	bf28      	it	cs
 8002342:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002344:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002348:	b292      	uxth	r2, r2
 800234a:	4629      	mov	r1, r5
 800234c:	f000 fa8b 	bl	8002866 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002350:	2000      	movs	r0, #0
 8002352:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002354:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	b123      	cbz	r3, 8002366 <USBD_LL_DataOutStage+0x46>
 800235c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002360:	2a03      	cmp	r2, #3
 8002362:	d100      	bne.n	8002366 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002364:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002366:	4620      	mov	r0, r4
 8002368:	f000 fa85 	bl	8002876 <USBD_CtlSendStatus>
 800236c:	e7f0      	b.n	8002350 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800236e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0eb      	beq.n	8002350 <USBD_LL_DataOutStage+0x30>
 8002378:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800237c:	2a03      	cmp	r2, #3
 800237e:	d1e7      	bne.n	8002350 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002380:	4798      	blx	r3
 8002382:	e7e5      	b.n	8002350 <USBD_LL_DataOutStage+0x30>

08002384 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	4613      	mov	r3, r2
 8002388:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800238a:	460e      	mov	r6, r1
 800238c:	2900      	cmp	r1, #0
 800238e:	d13d      	bne.n	800240c <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002390:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002394:	2a02      	cmp	r2, #2
 8002396:	d10f      	bne.n	80023b8 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002398:	69c5      	ldr	r5, [r0, #28]
 800239a:	6a02      	ldr	r2, [r0, #32]
 800239c:	4295      	cmp	r5, r2
 800239e:	d914      	bls.n	80023ca <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80023a0:	1aaa      	subs	r2, r5, r2
 80023a2:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80023a4:	4619      	mov	r1, r3
 80023a6:	b292      	uxth	r2, r2
 80023a8:	f000 fa46 	bl	8002838 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80023ac:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80023ae:	461a      	mov	r2, r3
 80023b0:	4619      	mov	r1, r3
 80023b2:	4620      	mov	r0, r4
 80023b4:	f001 fb82 	bl	8003abc <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80023b8:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80023c6:	2000      	movs	r0, #0
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80023ca:	6983      	ldr	r3, [r0, #24]
 80023cc:	fbb3 f5f2 	udiv	r5, r3, r2
 80023d0:	fb02 3515 	mls	r5, r2, r5, r3
 80023d4:	b965      	cbnz	r5, 80023f0 <USBD_LL_DataInStage+0x6c>
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d80a      	bhi.n	80023f0 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80023da:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80023de:	4293      	cmp	r3, r2
 80023e0:	d206      	bcs.n	80023f0 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80023e2:	462a      	mov	r2, r5
 80023e4:	f000 fa28 	bl	8002838 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80023e8:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80023ec:	462b      	mov	r3, r5
 80023ee:	e7de      	b.n	80023ae <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80023f0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	b12b      	cbz	r3, 8002404 <USBD_LL_DataInStage+0x80>
 80023f8:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80023fc:	2a03      	cmp	r2, #3
 80023fe:	d101      	bne.n	8002404 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002400:	4620      	mov	r0, r4
 8002402:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002404:	4620      	mov	r0, r4
 8002406:	f000 fa41 	bl	800288c <USBD_CtlReceiveStatus>
 800240a:	e7d5      	b.n	80023b8 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 800240c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0d7      	beq.n	80023c6 <USBD_LL_DataInStage+0x42>
 8002416:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800241a:	2a03      	cmp	r2, #3
 800241c:	d1d3      	bne.n	80023c6 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800241e:	4798      	blx	r3
 8002420:	e7d1      	b.n	80023c6 <USBD_LL_DataInStage+0x42>

08002422 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002422:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002424:	2200      	movs	r2, #0
{
 8002426:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8002428:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800242a:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800242c:	2340      	movs	r3, #64	; 0x40
 800242e:	f001 fadb 	bl	80039e8 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002432:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002434:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002438:	2200      	movs	r2, #0
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	4620      	mov	r0, r4
 800243e:	f001 fad3 	bl	80039e8 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002442:	2301      	movs	r3, #1
 8002444:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002448:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800244c:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800244e:	b12b      	cbz	r3, 800245c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002450:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002454:	7921      	ldrb	r1, [r4, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4620      	mov	r0, r4
 800245a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800245c:	2000      	movs	r0, #0
 800245e:	bd38      	pop	{r3, r4, r5, pc}

08002460 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002460:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002462:	2000      	movs	r0, #0
 8002464:	4770      	bx	lr

08002466 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002466:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800246a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800246e:	2304      	movs	r3, #4
 8002470:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002474:	2000      	movs	r0, #0
 8002476:	4770      	bx	lr

08002478 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002478:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800247c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002480:	2000      	movs	r0, #0
 8002482:	4770      	bx	lr

08002484 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002484:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002486:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800248a:	2a03      	cmp	r2, #3
 800248c:	d104      	bne.n	8002498 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800248e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	b103      	cbz	r3, 8002498 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002496:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002498:	2000      	movs	r0, #0
 800249a:	bd08      	pop	{r3, pc}

0800249c <USBD_LL_IsoINIncomplete>:
 800249c:	2000      	movs	r0, #0
 800249e:	4770      	bx	lr

080024a0 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 80024a0:	2000      	movs	r0, #0
 80024a2:	4770      	bx	lr

080024a4 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 80024a4:	2000      	movs	r0, #0
 80024a6:	4770      	bx	lr

080024a8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80024a8:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80024aa:	2201      	movs	r2, #1
 80024ac:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80024b0:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80024b4:	7901      	ldrb	r1, [r0, #4]
 80024b6:	6852      	ldr	r2, [r2, #4]
 80024b8:	4790      	blx	r2
   
  return USBD_OK;
}
 80024ba:	2000      	movs	r0, #0
 80024bc:	bd08      	pop	{r3, pc}

080024be <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80024be:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80024c0:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80024c2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80024c4:	f001 faae 	bl	8003a24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80024c8:	4620      	mov	r0, r4
 80024ca:	2100      	movs	r1, #0
}
 80024cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80024d0:	f001 baa8 	b.w	8003a24 <USBD_LL_StallEP>

080024d4 <USBD_StdDevReq>:
{
 80024d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80024d6:	784b      	ldrb	r3, [r1, #1]
{
 80024d8:	4604      	mov	r4, r0
 80024da:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80024dc:	2b09      	cmp	r3, #9
 80024de:	d879      	bhi.n	80025d4 <USBD_StdDevReq+0x100>
 80024e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80024e4:	00e500c9 	.word	0x00e500c9
 80024e8:	00d90078 	.word	0x00d90078
 80024ec:	006d0078 	.word	0x006d0078
 80024f0:	0078000a 	.word	0x0078000a
 80024f4:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80024f8:	884b      	ldrh	r3, [r1, #2]
 80024fa:	0a1a      	lsrs	r2, r3, #8
 80024fc:	3a01      	subs	r2, #1
 80024fe:	2a06      	cmp	r2, #6
 8002500:	d868      	bhi.n	80025d4 <USBD_StdDevReq+0x100>
 8002502:	e8df f002 	tbb	[pc, r2]
 8002506:	1c04      	.short	0x1c04
 8002508:	49676729 	.word	0x49676729
 800250c:	52          	.byte	0x52
 800250d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800250e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002512:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002514:	7c20      	ldrb	r0, [r4, #16]
 8002516:	f10d 0106 	add.w	r1, sp, #6
 800251a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800251c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002520:	2a00      	cmp	r2, #0
 8002522:	d067      	beq.n	80025f4 <USBD_StdDevReq+0x120>
 8002524:	88eb      	ldrh	r3, [r5, #6]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d064      	beq.n	80025f4 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800252a:	429a      	cmp	r2, r3
 800252c:	bf28      	it	cs
 800252e:	461a      	movcs	r2, r3
 8002530:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002534:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8002536:	4620      	mov	r0, r4
 8002538:	f000 f971 	bl	800281e <USBD_CtlSendData>
 800253c:	e05a      	b.n	80025f4 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800253e:	7c02      	ldrb	r2, [r0, #16]
 8002540:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002544:	b932      	cbnz	r2, 8002554 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002548:	f10d 0006 	add.w	r0, sp, #6
 800254c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800254e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002550:	7043      	strb	r3, [r0, #1]
 8002552:	e7e3      	b.n	800251c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	e7f7      	b.n	8002548 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b05      	cmp	r3, #5
 800255c:	d83a      	bhi.n	80025d4 <USBD_StdDevReq+0x100>
 800255e:	e8df f003 	tbb	[pc, r3]
 8002562:	0703      	.short	0x0703
 8002564:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002568:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	e7d1      	b.n	8002514 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002570:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	e7cd      	b.n	8002514 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002578:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	e7c9      	b.n	8002514 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002580:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	e7c5      	b.n	8002514 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8002588:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	e7c1      	b.n	8002514 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002590:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	e7bd      	b.n	8002514 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002598:	7c03      	ldrb	r3, [r0, #16]
 800259a:	b9db      	cbnz	r3, 80025d4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800259c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025a0:	f10d 0006 	add.w	r0, sp, #6
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	4798      	blx	r3
 80025a8:	e7b8      	b.n	800251c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80025aa:	7c03      	ldrb	r3, [r0, #16]
 80025ac:	b993      	cbnz	r3, 80025d4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80025ae:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80025b2:	f10d 0006 	add.w	r0, sp, #6
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80025ba:	2307      	movs	r3, #7
 80025bc:	e7c8      	b.n	8002550 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80025be:	888b      	ldrh	r3, [r1, #4]
 80025c0:	b943      	cbnz	r3, 80025d4 <USBD_StdDevReq+0x100>
 80025c2:	88cb      	ldrh	r3, [r1, #6]
 80025c4:	b933      	cbnz	r3, 80025d4 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80025c6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80025ca:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80025cc:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80025ce:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80025d2:	d103      	bne.n	80025dc <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7ff ff72 	bl	80024be <USBD_CtlError.constprop.0>
    break;
 80025da:	e00b      	b.n	80025f4 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80025dc:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80025e0:	4629      	mov	r1, r5
 80025e2:	f001 fa4f 	bl	8003a84 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80025e6:	4620      	mov	r0, r4
 80025e8:	f000 f945 	bl	8002876 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80025ec:	b12d      	cbz	r5, 80025fa <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80025ee:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80025f0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80025f4:	2000      	movs	r0, #0
 80025f6:	b003      	add	sp, #12
 80025f8:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80025fa:	2301      	movs	r3, #1
 80025fc:	e7f8      	b.n	80025f0 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80025fe:	7889      	ldrb	r1, [r1, #2]
 8002600:	4d30      	ldr	r5, [pc, #192]	; (80026c4 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002602:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002604:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002606:	d8e5      	bhi.n	80025d4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8002608:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800260c:	2b02      	cmp	r3, #2
 800260e:	d00c      	beq.n	800262a <USBD_StdDevReq+0x156>
 8002610:	2b03      	cmp	r3, #3
 8002612:	d1df      	bne.n	80025d4 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002614:	b9b1      	cbnz	r1, 8002644 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002616:	2302      	movs	r3, #2
 8002618:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800261c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800261e:	f7ff fe4b 	bl	80022b8 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8002622:	4620      	mov	r0, r4
 8002624:	f000 f927 	bl	8002876 <USBD_CtlSendStatus>
 8002628:	e7e4      	b.n	80025f4 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800262a:	2900      	cmp	r1, #0
 800262c:	d0f9      	beq.n	8002622 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800262e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002630:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002632:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002634:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff fe32 	bl	80022a2 <USBD_SetClassConfig>
 800263e:	2802      	cmp	r0, #2
 8002640:	d1ef      	bne.n	8002622 <USBD_StdDevReq+0x14e>
 8002642:	e7c7      	b.n	80025d4 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002644:	6841      	ldr	r1, [r0, #4]
 8002646:	2901      	cmp	r1, #1
 8002648:	d0eb      	beq.n	8002622 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800264a:	b2c9      	uxtb	r1, r1
 800264c:	f7ff fe34 	bl	80022b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002650:	7829      	ldrb	r1, [r5, #0]
 8002652:	6061      	str	r1, [r4, #4]
 8002654:	e7f0      	b.n	8002638 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8002656:	88ca      	ldrh	r2, [r1, #6]
 8002658:	2a01      	cmp	r2, #1
 800265a:	d1bb      	bne.n	80025d4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 800265c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002660:	2b02      	cmp	r3, #2
 8002662:	d003      	beq.n	800266c <USBD_StdDevReq+0x198>
 8002664:	2b03      	cmp	r3, #3
 8002666:	d1b5      	bne.n	80025d4 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8002668:	1d01      	adds	r1, r0, #4
 800266a:	e764      	b.n	8002536 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800266c:	4601      	mov	r1, r0
 800266e:	2300      	movs	r3, #0
 8002670:	f841 3f08 	str.w	r3, [r1, #8]!
 8002674:	e75f      	b.n	8002536 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8002676:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800267a:	3b02      	subs	r3, #2
 800267c:	2b01      	cmp	r3, #1
 800267e:	d8a9      	bhi.n	80025d4 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002680:	2301      	movs	r3, #1
 8002682:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002684:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002688:	b10b      	cbz	r3, 800268e <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800268a:	2303      	movs	r3, #3
 800268c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800268e:	2202      	movs	r2, #2
 8002690:	f104 010c 	add.w	r1, r4, #12
 8002694:	e74f      	b.n	8002536 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002696:	884b      	ldrh	r3, [r1, #2]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d1ab      	bne.n	80025f4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800269c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80026a0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80026a4:	4629      	mov	r1, r5
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4620      	mov	r0, r4
 80026aa:	4798      	blx	r3
 80026ac:	e7b9      	b.n	8002622 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80026ae:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80026b2:	3b02      	subs	r3, #2
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d88d      	bhi.n	80025d4 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80026b8:	884b      	ldrh	r3, [r1, #2]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d19a      	bne.n	80025f4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80026be:	2300      	movs	r3, #0
 80026c0:	e7ec      	b.n	800269c <USBD_StdDevReq+0x1c8>
 80026c2:	bf00      	nop
 80026c4:	200001e5 	.word	0x200001e5

080026c8 <USBD_StdItfReq>:
{
 80026c8:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80026ca:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80026ce:	2b03      	cmp	r3, #3
{
 80026d0:	4604      	mov	r4, r0
 80026d2:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80026d4:	d10d      	bne.n	80026f2 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80026d6:	790b      	ldrb	r3, [r1, #4]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d80a      	bhi.n	80026f2 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80026dc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80026e4:	88eb      	ldrh	r3, [r5, #6]
 80026e6:	b913      	cbnz	r3, 80026ee <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80026e8:	4620      	mov	r0, r4
 80026ea:	f000 f8c4 	bl	8002876 <USBD_CtlSendStatus>
}
 80026ee:	2000      	movs	r0, #0
 80026f0:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80026f2:	f7ff fee4 	bl	80024be <USBD_CtlError.constprop.0>
    break;
 80026f6:	e7fa      	b.n	80026ee <USBD_StdItfReq+0x26>

080026f8 <USBD_StdEPReq>:
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80026fa:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80026fc:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80026fe:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002702:	2a20      	cmp	r2, #32
{
 8002704:	4604      	mov	r4, r0
 8002706:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002708:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800270a:	d105      	bne.n	8002718 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 800270c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4798      	blx	r3
}
 8002714:	2000      	movs	r0, #0
 8002716:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002718:	784a      	ldrb	r2, [r1, #1]
 800271a:	2a01      	cmp	r2, #1
 800271c:	d01c      	beq.n	8002758 <USBD_StdEPReq+0x60>
 800271e:	d32a      	bcc.n	8002776 <USBD_StdEPReq+0x7e>
 8002720:	2a03      	cmp	r2, #3
 8002722:	d1f7      	bne.n	8002714 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002724:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002728:	2a02      	cmp	r2, #2
 800272a:	d040      	beq.n	80027ae <USBD_StdEPReq+0xb6>
 800272c:	2a03      	cmp	r2, #3
 800272e:	d002      	beq.n	8002736 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002730:	f7ff fec5 	bl	80024be <USBD_CtlError.constprop.0>
      break;
 8002734:	e7ee      	b.n	8002714 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002736:	884a      	ldrh	r2, [r1, #2]
 8002738:	b922      	cbnz	r2, 8002744 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800273a:	065e      	lsls	r6, r3, #25
 800273c:	d002      	beq.n	8002744 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800273e:	4619      	mov	r1, r3
 8002740:	f001 f970 	bl	8003a24 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002744:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002748:	4629      	mov	r1, r5
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4620      	mov	r0, r4
 800274e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002750:	4620      	mov	r0, r4
 8002752:	f000 f890 	bl	8002876 <USBD_CtlSendStatus>
 8002756:	e7dd      	b.n	8002714 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002758:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800275c:	2a02      	cmp	r2, #2
 800275e:	d026      	beq.n	80027ae <USBD_StdEPReq+0xb6>
 8002760:	2a03      	cmp	r2, #3
 8002762:	d1e5      	bne.n	8002730 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002764:	884a      	ldrh	r2, [r1, #2]
 8002766:	2a00      	cmp	r2, #0
 8002768:	d1d4      	bne.n	8002714 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800276a:	0659      	lsls	r1, r3, #25
 800276c:	d0f0      	beq.n	8002750 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800276e:	4619      	mov	r1, r3
 8002770:	f001 f966 	bl	8003a40 <USBD_LL_ClearStallEP>
 8002774:	e7e6      	b.n	8002744 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002776:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800277a:	2a02      	cmp	r2, #2
 800277c:	d017      	beq.n	80027ae <USBD_StdEPReq+0xb6>
 800277e:	2a03      	cmp	r2, #3
 8002780:	d1d6      	bne.n	8002730 <USBD_StdEPReq+0x38>
 8002782:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002786:	f016 0f80 	tst.w	r6, #128	; 0x80
 800278a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800278e:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002790:	bf14      	ite	ne
 8002792:	3514      	addne	r5, #20
 8002794:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002798:	f001 f960 	bl	8003a5c <USBD_LL_IsStallEP>
 800279c:	b168      	cbz	r0, 80027ba <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800279e:	2301      	movs	r3, #1
 80027a0:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80027a2:	2202      	movs	r2, #2
 80027a4:	4629      	mov	r1, r5
 80027a6:	4620      	mov	r0, r4
 80027a8:	f000 f839 	bl	800281e <USBD_CtlSendData>
      break;
 80027ac:	e7b2      	b.n	8002714 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80027ae:	065a      	lsls	r2, r3, #25
 80027b0:	d0b0      	beq.n	8002714 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80027b2:	4619      	mov	r1, r3
 80027b4:	f001 f936 	bl	8003a24 <USBD_LL_StallEP>
 80027b8:	e7ac      	b.n	8002714 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80027ba:	6028      	str	r0, [r5, #0]
 80027bc:	e7f1      	b.n	80027a2 <USBD_StdEPReq+0xaa>

080027be <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80027be:	780b      	ldrb	r3, [r1, #0]
 80027c0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80027c2:	784b      	ldrb	r3, [r1, #1]
 80027c4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80027c6:	78ca      	ldrb	r2, [r1, #3]
 80027c8:	788b      	ldrb	r3, [r1, #2]
 80027ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027ce:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80027d0:	794a      	ldrb	r2, [r1, #5]
 80027d2:	790b      	ldrb	r3, [r1, #4]
 80027d4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027d8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80027da:	79ca      	ldrb	r2, [r1, #7]
 80027dc:	798b      	ldrb	r3, [r1, #6]
 80027de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80027e2:	80c3      	strh	r3, [r0, #6]
 80027e4:	4770      	bx	lr

080027e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80027e6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80027e8:	b188      	cbz	r0, 800280e <USBD_GetString+0x28>
 80027ea:	4605      	mov	r5, r0
 80027ec:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80027ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2c00      	cmp	r4, #0
 80027f6:	d1f9      	bne.n	80027ec <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	3302      	adds	r3, #2
 80027fc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80027fe:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002800:	2303      	movs	r3, #3
 8002802:	704b      	strb	r3, [r1, #1]
 8002804:	3801      	subs	r0, #1
 8002806:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8002808:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800280c:	b905      	cbnz	r5, 8002810 <USBD_GetString+0x2a>
 800280e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8002816:	3302      	adds	r3, #2
 8002818:	b2db      	uxtb	r3, r3
 800281a:	548c      	strb	r4, [r1, r2]
 800281c:	e7f4      	b.n	8002808 <USBD_GetString+0x22>

0800281e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800281e:	b510      	push	{r4, lr}
 8002820:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002822:	2202      	movs	r2, #2
 8002824:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002828:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800282a:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800282c:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800282e:	2100      	movs	r1, #0
 8002830:	f001 f936 	bl	8003aa0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002834:	2000      	movs	r0, #0
 8002836:	bd10      	pop	{r4, pc}

08002838 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002838:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800283a:	4613      	mov	r3, r2
 800283c:	460a      	mov	r2, r1
 800283e:	2100      	movs	r1, #0
 8002840:	f001 f92e 	bl	8003aa0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002844:	2000      	movs	r0, #0
 8002846:	bd08      	pop	{r3, pc}

08002848 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002848:	b510      	push	{r4, lr}
 800284a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800284c:	2203      	movs	r2, #3
 800284e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002852:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002856:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002858:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800285c:	2100      	movs	r1, #0
 800285e:	f001 f92d 	bl	8003abc <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002862:	2000      	movs	r0, #0
 8002864:	bd10      	pop	{r4, pc}

08002866 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002866:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002868:	4613      	mov	r3, r2
 800286a:	460a      	mov	r2, r1
 800286c:	2100      	movs	r1, #0
 800286e:	f001 f925 	bl	8003abc <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002872:	2000      	movs	r0, #0
 8002874:	bd08      	pop	{r3, pc}

08002876 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002876:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002878:	2304      	movs	r3, #4
 800287a:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800287e:	2300      	movs	r3, #0
 8002880:	461a      	mov	r2, r3
 8002882:	4619      	mov	r1, r3
 8002884:	f001 f90c 	bl	8003aa0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002888:	2000      	movs	r0, #0
 800288a:	bd08      	pop	{r3, pc}

0800288c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800288c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800288e:	2305      	movs	r3, #5
 8002890:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002894:	2300      	movs	r3, #0
 8002896:	461a      	mov	r2, r3
 8002898:	4619      	mov	r1, r3
 800289a:	f001 f90f 	bl	8003abc <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800289e:	2000      	movs	r0, #0
 80028a0:	bd08      	pop	{r3, pc}

080028a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028a2:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80028a4:	f000 fbe8 	bl	8003078 <vTaskStartScheduler>
  
  return osOK;
}
 80028a8:	2000      	movs	r0, #0
 80028aa:	bd08      	pop	{r3, pc}

080028ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028ac:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028ae:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80028b2:	8a02      	ldrh	r2, [r0, #16]
{
 80028b4:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028b6:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80028ba:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80028bc:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80028be:	bf14      	ite	ne
 80028c0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80028c2:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028c4:	a803      	add	r0, sp, #12
 80028c6:	9001      	str	r0, [sp, #4]
 80028c8:	9400      	str	r4, [sp, #0]
 80028ca:	4628      	mov	r0, r5
 80028cc:	f000 fb04 	bl	8002ed8 <xTaskCreate>
 80028d0:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80028d2:	bf0c      	ite	eq
 80028d4:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80028d6:	2000      	movne	r0, #0
}
 80028d8:	b005      	add	sp, #20
 80028da:	bd30      	pop	{r4, r5, pc}

080028dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80028dc:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80028de:	2800      	cmp	r0, #0
 80028e0:	bf08      	it	eq
 80028e2:	2001      	moveq	r0, #1
 80028e4:	f000 fd16 	bl	8003314 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80028e8:	2000      	movs	r0, #0
 80028ea:	bd08      	pop	{r3, pc}

080028ec <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80028ec:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80028ee:	f000 fda9 	bl	8003444 <xTaskGetSchedulerState>
 80028f2:	2801      	cmp	r0, #1
 80028f4:	d003      	beq.n	80028fe <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80028f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80028fa:	f000 b90b 	b.w	8002b14 <xPortSysTickHandler>
 80028fe:	bd08      	pop	{r3, pc}

08002900 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002900:	f100 0308 	add.w	r3, r0, #8
 8002904:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002906:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800290a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800290c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800290e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002910:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002912:	6003      	str	r3, [r0, #0]
 8002914:	4770      	bx	lr

08002916 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	6103      	str	r3, [r0, #16]
 800291a:	4770      	bx	lr

0800291c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800291c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800291e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002928:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800292a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800292c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800292e:	3301      	adds	r3, #1
 8002930:	6003      	str	r3, [r0, #0]
 8002932:	4770      	bx	lr

08002934 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002934:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002936:	1c53      	adds	r3, r2, #1
{
 8002938:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800293a:	d10a      	bne.n	8002952 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800293c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002942:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002944:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002946:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002948:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800294a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800294c:	3301      	adds	r3, #1
 800294e:	6003      	str	r3, [r0, #0]
 8002950:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002952:	f100 0308 	add.w	r3, r0, #8
 8002956:	685c      	ldr	r4, [r3, #4]
 8002958:	6825      	ldr	r5, [r4, #0]
 800295a:	42aa      	cmp	r2, r5
 800295c:	d3ef      	bcc.n	800293e <vListInsert+0xa>
 800295e:	4623      	mov	r3, r4
 8002960:	e7f9      	b.n	8002956 <vListInsert+0x22>

08002962 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002962:	6841      	ldr	r1, [r0, #4]
 8002964:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002966:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002968:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800296a:	6882      	ldr	r2, [r0, #8]
 800296c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002972:	bf08      	it	eq
 8002974:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002976:	2200      	movs	r2, #0
 8002978:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	3801      	subs	r0, #1
 800297e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002980:	4770      	bx	lr
	...

08002984 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <prvTaskExitError+0x2c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	d008      	beq.n	800299e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	e7fe      	b.n	800299c <prvTaskExitError+0x18>
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	e7fe      	b.n	80029ae <prvTaskExitError+0x2a>
 80029b0:	20000118 	.word	0x20000118

080029b4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80029b4:	4806      	ldr	r0, [pc, #24]	; (80029d0 <prvPortStartFirstTask+0x1c>)
 80029b6:	6800      	ldr	r0, [r0, #0]
 80029b8:	6800      	ldr	r0, [r0, #0]
 80029ba:	f380 8808 	msr	MSP, r0
 80029be:	b662      	cpsie	i
 80029c0:	b661      	cpsie	f
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	df00      	svc	0
 80029cc:	bf00      	nop
 80029ce:	0000      	.short	0x0000
 80029d0:	e000ed08 	.word	0xe000ed08

080029d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80029d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80029e4 <vPortEnableVFP+0x10>
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80029de:	6001      	str	r1, [r0, #0]
 80029e0:	4770      	bx	lr
 80029e2:	0000      	.short	0x0000
 80029e4:	e000ed88 	.word	0xe000ed88

080029e8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80029e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ec:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80029f0:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <pxPortInitialiseStack+0x28>)
 80029f2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029f6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80029fa:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029fe:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a02:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002a06:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002a0a:	3844      	subs	r0, #68	; 0x44
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	08002985 	.word	0x08002985
	...

08002a20 <SVC_Handler>:
	__asm volatile (
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <pxCurrentTCBConst2>)
 8002a22:	6819      	ldr	r1, [r3, #0]
 8002a24:	6808      	ldr	r0, [r1, #0]
 8002a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2a:	f380 8809 	msr	PSP, r0
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f04f 0000 	mov.w	r0, #0
 8002a36:	f380 8811 	msr	BASEPRI, r0
 8002a3a:	4770      	bx	lr
 8002a3c:	f3af 8000 	nop.w

08002a40 <pxCurrentTCBConst2>:
 8002a40:	20003e04 	.word	0x20003e04

08002a44 <vPortEnterCritical>:
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <vPortEnterCritical+0x3c>)
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002a5a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002a5c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002a5e:	d10d      	bne.n	8002a7c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <vPortEnterCritical+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002a68:	d008      	beq.n	8002a7c <vPortEnterCritical+0x38>
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	e7fe      	b.n	8002a7a <vPortEnterCritical+0x36>
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000118 	.word	0x20000118
 8002a84:	e000ed04 	.word	0xe000ed04

08002a88 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002a88:	4a08      	ldr	r2, [pc, #32]	; (8002aac <vPortExitCritical+0x24>)
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	b943      	cbnz	r3, 8002aa0 <vPortExitCritical+0x18>
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	e7fe      	b.n	8002a9e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002aa4:	b90b      	cbnz	r3, 8002aaa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	4770      	bx	lr
 8002aac:	20000118 	.word	0x20000118

08002ab0 <PendSV_Handler>:
	__asm volatile
 8002ab0:	f3ef 8009 	mrs	r0, PSP
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <pxCurrentTCBConst>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f01e 0f10 	tst.w	lr, #16
 8002ac0:	bf08      	it	eq
 8002ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aca:	6010      	str	r0, [r2, #0]
 8002acc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ad4:	f380 8811 	msr	BASEPRI, r0
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f000 fc76 	bl	80033d0 <vTaskSwitchContext>
 8002ae4:	f04f 0000 	mov.w	r0, #0
 8002ae8:	f380 8811 	msr	BASEPRI, r0
 8002aec:	bc08      	pop	{r3}
 8002aee:	6819      	ldr	r1, [r3, #0]
 8002af0:	6808      	ldr	r0, [r1, #0]
 8002af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af6:	f01e 0f10 	tst.w	lr, #16
 8002afa:	bf08      	it	eq
 8002afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b00:	f380 8809 	msr	PSP, r0
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	f3af 8000 	nop.w

08002b10 <pxCurrentTCBConst>:
 8002b10:	20003e04 	.word	0x20003e04

08002b14 <xPortSysTickHandler>:
{
 8002b14:	b508      	push	{r3, lr}
	__asm volatile
 8002b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002b26:	f000 faeb 	bl	8003100 <xTaskIncrementTick>
 8002b2a:	b118      	cbz	r0, 8002b34 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <xPortSysTickHandler+0x28>)
 8002b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b32:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002b34:	2300      	movs	r3, #0
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	bd08      	pop	{r3, pc}
 8002b3c:	e000ed04 	.word	0xe000ed04

08002b40 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <vPortSetupTimerInterrupt+0x1c>)
 8002b42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <vPortSetupTimerInterrupt+0x20>)
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <vPortSetupTimerInterrupt+0x24>)
 8002b54:	2207      	movs	r2, #7
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	2000011c 	.word	0x2000011c
 8002b60:	e000e014 	.word	0xe000e014
 8002b64:	e000e010 	.word	0xe000e010

08002b68 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b68:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <xPortStartScheduler+0xc8>)
 8002b6a:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <xPortStartScheduler+0xcc>)
{
 8002b6c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	4291      	cmp	r1, r2
 8002b72:	d108      	bne.n	8002b86 <xPortStartScheduler+0x1e>
	__asm volatile
 8002b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	e7fe      	b.n	8002b84 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <xPortStartScheduler+0xd0>)
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d108      	bne.n	8002ba0 <xPortStartScheduler+0x38>
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	f383 8811 	msr	BASEPRI, r3
 8002b96:	f3bf 8f6f 	isb	sy
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	e7fe      	b.n	8002b9e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ba0:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <xPortStartScheduler+0xd4>)
 8002ba2:	781a      	ldrb	r2, [r3, #0]
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bac:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bae:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002bba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bbe:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002bc0:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <xPortStartScheduler+0xdc>)
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002bcc:	0600      	lsls	r0, r0, #24
 8002bce:	f102 34ff 	add.w	r4, r2, #4294967295
 8002bd2:	d423      	bmi.n	8002c1c <xPortStartScheduler+0xb4>
 8002bd4:	b101      	cbz	r1, 8002bd8 <xPortStartScheduler+0x70>
 8002bd6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bdc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002be0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002be2:	9b01      	ldr	r3, [sp, #4]
 8002be4:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <xPortStartScheduler+0xd4>)
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <xPortStartScheduler+0xe0>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002bf2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002bfa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002bfc:	f7ff ffa0 	bl	8002b40 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <xPortStartScheduler+0xe4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002c06:	f7ff fee5 	bl	80029d4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <xPortStartScheduler+0xe8>)
 8002c0c:	6813      	ldr	r3, [r2, #0]
 8002c0e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c12:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002c14:	f7ff fece 	bl	80029b4 <prvPortStartFirstTask>
	prvTaskExitError();
 8002c18:	f7ff feb4 	bl	8002984 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002c20:	0052      	lsls	r2, r2, #1
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f88d 2003 	strb.w	r2, [sp, #3]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	e7cc      	b.n	8002bc8 <xPortStartScheduler+0x60>
 8002c2e:	bf00      	nop
 8002c30:	e000ed00 	.word	0xe000ed00
 8002c34:	410fc271 	.word	0x410fc271
 8002c38:	410fc270 	.word	0x410fc270
 8002c3c:	e000e400 	.word	0xe000e400
 8002c40:	200001e6 	.word	0x200001e6
 8002c44:	200001e8 	.word	0x200001e8
 8002c48:	e000ed20 	.word	0xe000ed20
 8002c4c:	20000118 	.word	0x20000118
 8002c50:	e000ef34 	.word	0xe000ef34

08002c54 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c54:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <prvInsertBlockIntoFreeList+0x40>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4282      	cmp	r2, r0
 8002c5c:	d318      	bcc.n	8002c90 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c5e:	685c      	ldr	r4, [r3, #4]
 8002c60:	1919      	adds	r1, r3, r4
 8002c62:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c64:	bf01      	itttt	eq
 8002c66:	6841      	ldreq	r1, [r0, #4]
 8002c68:	4618      	moveq	r0, r3
 8002c6a:	1909      	addeq	r1, r1, r4
 8002c6c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c6e:	6844      	ldr	r4, [r0, #4]
 8002c70:	1901      	adds	r1, r0, r4
 8002c72:	428a      	cmp	r2, r1
 8002c74:	d107      	bne.n	8002c86 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c76:	4908      	ldr	r1, [pc, #32]	; (8002c98 <prvInsertBlockIntoFreeList+0x44>)
 8002c78:	6809      	ldr	r1, [r1, #0]
 8002c7a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c7c:	bf1f      	itttt	ne
 8002c7e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c80:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c82:	1909      	addne	r1, r1, r4
 8002c84:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002c86:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002c88:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c8a:	bf18      	it	ne
 8002c8c:	6018      	strne	r0, [r3, #0]
 8002c8e:	bd10      	pop	{r4, pc}
 8002c90:	4613      	mov	r3, r2
 8002c92:	e7e1      	b.n	8002c58 <prvInsertBlockIntoFreeList+0x4>
 8002c94:	20003dfc 	.word	0x20003dfc
 8002c98:	200001ec 	.word	0x200001ec

08002c9c <pvPortMalloc>:
{
 8002c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002ca2:	f000 fa25 	bl	80030f0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002ca6:	493e      	ldr	r1, [pc, #248]	; (8002da0 <pvPortMalloc+0x104>)
 8002ca8:	4d3e      	ldr	r5, [pc, #248]	; (8002da4 <pvPortMalloc+0x108>)
 8002caa:	680b      	ldr	r3, [r1, #0]
 8002cac:	bb0b      	cbnz	r3, 8002cf2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002cae:	4a3e      	ldr	r2, [pc, #248]	; (8002da8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002cb0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002cb2:	bf1f      	itttt	ne
 8002cb4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002cb6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002cba:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8002cbe:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002cc0:	bf14      	ite	ne
 8002cc2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002cc4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002cc8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002cca:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ccc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002cd0:	4e36      	ldr	r6, [pc, #216]	; (8002dac <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002cd2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002cd8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002cda:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002cdc:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002cde:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ce0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ce2:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ce4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ce6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ce8:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <pvPortMalloc+0x118>)
 8002cea:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002cec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002cf0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002cf2:	682f      	ldr	r7, [r5, #0]
 8002cf4:	4227      	tst	r7, r4
 8002cf6:	d116      	bne.n	8002d26 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002cf8:	2c00      	cmp	r4, #0
 8002cfa:	d041      	beq.n	8002d80 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002cfc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d00:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d02:	bf1c      	itt	ne
 8002d04:	f023 0307 	bicne.w	r3, r3, #7
 8002d08:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d0a:	b163      	cbz	r3, 8002d26 <pvPortMalloc+0x8a>
 8002d0c:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <pvPortMalloc+0x118>)
 8002d0e:	6816      	ldr	r6, [r2, #0]
 8002d10:	42b3      	cmp	r3, r6
 8002d12:	4690      	mov	r8, r2
 8002d14:	d807      	bhi.n	8002d26 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002d16:	4a25      	ldr	r2, [pc, #148]	; (8002dac <pvPortMalloc+0x110>)
 8002d18:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d1a:	6868      	ldr	r0, [r5, #4]
 8002d1c:	4283      	cmp	r3, r0
 8002d1e:	d804      	bhi.n	8002d2a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002d20:	6809      	ldr	r1, [r1, #0]
 8002d22:	428d      	cmp	r5, r1
 8002d24:	d107      	bne.n	8002d36 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002d26:	2400      	movs	r4, #0
 8002d28:	e02a      	b.n	8002d80 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d2a:	682c      	ldr	r4, [r5, #0]
 8002d2c:	2c00      	cmp	r4, #0
 8002d2e:	d0f7      	beq.n	8002d20 <pvPortMalloc+0x84>
 8002d30:	462a      	mov	r2, r5
 8002d32:	4625      	mov	r5, r4
 8002d34:	e7f1      	b.n	8002d1a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d36:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d38:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d3a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d3c:	1ac2      	subs	r2, r0, r3
 8002d3e:	2a10      	cmp	r2, #16
 8002d40:	d90f      	bls.n	8002d62 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d42:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d44:	0741      	lsls	r1, r0, #29
 8002d46:	d008      	beq.n	8002d5a <pvPortMalloc+0xbe>
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	e7fe      	b.n	8002d58 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d5a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d5c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d5e:	f7ff ff79 	bl	8002c54 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d62:	4913      	ldr	r1, [pc, #76]	; (8002db0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d64:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d66:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d68:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d6a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d6c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002d6e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d72:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d76:	bf38      	it	cc
 8002d78:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d7a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d7c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002d7e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002d80:	f000 fa50 	bl	8003224 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d84:	0763      	lsls	r3, r4, #29
 8002d86:	d008      	beq.n	8002d9a <pvPortMalloc+0xfe>
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	e7fe      	b.n	8002d98 <pvPortMalloc+0xfc>
}
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002da0:	200001ec 	.word	0x200001ec
 8002da4:	20003df0 	.word	0x20003df0
 8002da8:	200001f0 	.word	0x200001f0
 8002dac:	20003dfc 	.word	0x20003dfc
 8002db0:	20003df8 	.word	0x20003df8
 8002db4:	20003df4 	.word	0x20003df4

08002db8 <vPortFree>:
{
 8002db8:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002dba:	4604      	mov	r4, r0
 8002dbc:	b370      	cbz	r0, 8002e1c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002dbe:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <vPortFree+0x68>)
 8002dc0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	4213      	tst	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <vPortFree+0x24>
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	e7fe      	b.n	8002dda <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ddc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002de0:	b141      	cbz	r1, 8002df4 <vPortFree+0x3c>
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	e7fe      	b.n	8002df2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002df4:	ea23 0302 	bic.w	r3, r3, r2
 8002df8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002dfc:	f000 f978 	bl	80030f0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e00:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <vPortFree+0x6c>)
 8002e02:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002e06:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e08:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e0c:	440b      	add	r3, r1
 8002e0e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e10:	f7ff ff20 	bl	8002c54 <prvInsertBlockIntoFreeList>
}
 8002e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002e18:	f000 ba04 	b.w	8003224 <xTaskResumeAll>
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	bf00      	nop
 8002e20:	20003df0 	.word	0x20003df0
 8002e24:	20003df4 	.word	0x20003df4

08002e28 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e28:	4a06      	ldr	r2, [pc, #24]	; (8002e44 <prvResetNextTaskUnblockTime+0x1c>)
 8002e2a:	6813      	ldr	r3, [r2, #0]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <prvResetNextTaskUnblockTime+0x20>)
 8002e30:	b919      	cbnz	r1, 8002e3a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e32:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e3e:	68d2      	ldr	r2, [r2, #12]
 8002e40:	6852      	ldr	r2, [r2, #4]
 8002e42:	e7f8      	b.n	8002e36 <prvResetNextTaskUnblockTime+0xe>
 8002e44:	20003e08 	.word	0x20003e08
 8002e48:	20003ee0 	.word	0x20003ee0

08002e4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e50:	4e1b      	ldr	r6, [pc, #108]	; (8002ec0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002e52:	681d      	ldr	r5, [r3, #0]
{
 8002e54:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e56:	6830      	ldr	r0, [r6, #0]
 8002e58:	3004      	adds	r0, #4
{
 8002e5a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e5c:	f7ff fd81 	bl	8002962 <uxListRemove>
 8002e60:	4633      	mov	r3, r6
 8002e62:	b940      	cbnz	r0, 8002e76 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002e64:	6831      	ldr	r1, [r6, #0]
 8002e66:	4e17      	ldr	r6, [pc, #92]	; (8002ec4 <prvAddCurrentTaskToDelayedList+0x78>)
 8002e68:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002e6a:	6832      	ldr	r2, [r6, #0]
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	4088      	lsls	r0, r1
 8002e70:	ea22 0200 	bic.w	r2, r2, r0
 8002e74:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e76:	1c62      	adds	r2, r4, #1
 8002e78:	d107      	bne.n	8002e8a <prvAddCurrentTaskToDelayedList+0x3e>
 8002e7a:	b137      	cbz	r7, 8002e8a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	4812      	ldr	r0, [pc, #72]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002e80:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e86:	f7ff bd49 	b.w	800291c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e8a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e8c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002e8e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e90:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002e92:	d907      	bls.n	8002ea4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e94:	4a0d      	ldr	r2, [pc, #52]	; (8002ecc <prvAddCurrentTaskToDelayedList+0x80>)
 8002e96:	6810      	ldr	r0, [r2, #0]
 8002e98:	6819      	ldr	r1, [r3, #0]
}
 8002e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e9e:	3104      	adds	r1, #4
 8002ea0:	f7ff bd48 	b.w	8002934 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <prvAddCurrentTaskToDelayedList+0x84>)
 8002ea6:	6810      	ldr	r0, [r2, #0]
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	3104      	adds	r1, #4
 8002eac:	f7ff fd42 	bl	8002934 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <prvAddCurrentTaskToDelayedList+0x88>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002eb6:	bf38      	it	cc
 8002eb8:	601c      	strcc	r4, [r3, #0]
 8002eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ebc:	20003f28 	.word	0x20003f28
 8002ec0:	20003e04 	.word	0x20003e04
 8002ec4:	20003eb0 	.word	0x20003eb0
 8002ec8:	20003f00 	.word	0x20003f00
 8002ecc:	20003e0c 	.word	0x20003e0c
 8002ed0:	20003e08 	.word	0x20003e08
 8002ed4:	20003ee0 	.word	0x20003ee0

08002ed8 <xTaskCreate>:
	{
 8002ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002edc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002ee0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee2:	4650      	mov	r0, sl
	{
 8002ee4:	460f      	mov	r7, r1
 8002ee6:	4699      	mov	r9, r3
 8002ee8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eea:	f7ff fed7 	bl	8002c9c <pvPortMalloc>
			if( pxStack != NULL )
 8002eee:	4605      	mov	r5, r0
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	f000 8096 	beq.w	8003022 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002ef6:	2054      	movs	r0, #84	; 0x54
 8002ef8:	f7ff fed0 	bl	8002c9c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002efc:	4604      	mov	r4, r0
 8002efe:	2800      	cmp	r0, #0
 8002f00:	f000 808c 	beq.w	800301c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f04:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002f08:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f0a:	4455      	add	r5, sl
 8002f0c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f0e:	f025 0a07 	bic.w	sl, r5, #7
 8002f12:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002f16:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f18:	7859      	ldrb	r1, [r3, #1]
 8002f1a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002f1e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002f22:	b109      	cbz	r1, 8002f28 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f24:	42bb      	cmp	r3, r7
 8002f26:	d1f7      	bne.n	8002f18 <xTaskCreate+0x40>
 8002f28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002f2a:	2d06      	cmp	r5, #6
 8002f2c:	bf28      	it	cs
 8002f2e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f30:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f34:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002f36:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002f38:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f3a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f3c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002f40:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f44:	f7ff fce7 	bl	8002916 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f48:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f4c:	f104 0018 	add.w	r0, r4, #24
 8002f50:	f7ff fce1 	bl	8002916 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002f54:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f58:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f5a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f5c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f5e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f62:	464a      	mov	r2, r9
 8002f64:	4641      	mov	r1, r8
 8002f66:	4650      	mov	r0, sl
 8002f68:	f7ff fd3e 	bl	80029e8 <pxPortInitialiseStack>
 8002f6c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002f6e:	b106      	cbz	r6, 8002f72 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f70:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002f72:	f7ff fd67 	bl	8002a44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002f76:	4b32      	ldr	r3, [pc, #200]	; (8003040 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002f78:	4e32      	ldr	r6, [pc, #200]	; (8003044 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8003070 <xTaskCreate+0x198>
 8002f80:	3201      	adds	r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002f84:	6835      	ldr	r5, [r6, #0]
 8002f86:	2d00      	cmp	r5, #0
 8002f88:	d14e      	bne.n	8003028 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8002f8a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d11d      	bne.n	8002fce <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f92:	eb08 0005 	add.w	r0, r8, r5
 8002f96:	3514      	adds	r5, #20
 8002f98:	f7ff fcb2 	bl	8002900 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f9c:	2d8c      	cmp	r5, #140	; 0x8c
 8002f9e:	d1f8      	bne.n	8002f92 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002fa0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003074 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002fa4:	4d28      	ldr	r5, [pc, #160]	; (8003048 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002fa6:	4648      	mov	r0, r9
 8002fa8:	f7ff fcaa 	bl	8002900 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fac:	4628      	mov	r0, r5
 8002fae:	f7ff fca7 	bl	8002900 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fb2:	4826      	ldr	r0, [pc, #152]	; (800304c <xTaskCreate+0x174>)
 8002fb4:	f7ff fca4 	bl	8002900 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002fb8:	4825      	ldr	r0, [pc, #148]	; (8003050 <xTaskCreate+0x178>)
 8002fba:	f7ff fca1 	bl	8002900 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002fbe:	4825      	ldr	r0, [pc, #148]	; (8003054 <xTaskCreate+0x17c>)
 8002fc0:	f7ff fc9e 	bl	8002900 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fc4:	4b24      	ldr	r3, [pc, #144]	; (8003058 <xTaskCreate+0x180>)
 8002fc6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <xTaskCreate+0x184>)
 8002fcc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002fce:	4a24      	ldr	r2, [pc, #144]	; (8003060 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002fd0:	4924      	ldr	r1, [pc, #144]	; (8003064 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002fd2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002fd4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002fda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fdc:	2501      	movs	r5, #1
 8002fde:	fa05 f302 	lsl.w	r3, r5, r2
 8002fe2:	4303      	orrs	r3, r0
 8002fe4:	2014      	movs	r0, #20
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	fb00 8002 	mla	r0, r0, r2, r8
 8002fec:	4639      	mov	r1, r7
 8002fee:	f7ff fc95 	bl	800291c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002ff2:	f7ff fd49 	bl	8002a88 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <xTaskCreate+0x190>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	b163      	cbz	r3, 8003016 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ffc:	6833      	ldr	r3, [r6, #0]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003002:	429a      	cmp	r2, r3
 8003004:	d207      	bcs.n	8003016 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <xTaskCreate+0x194>)
 8003008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	f3bf 8f6f 	isb	sy
	}
 8003016:	4628      	mov	r0, r5
 8003018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800301c:	4628      	mov	r0, r5
 800301e:	f7ff fecb 	bl	8002db8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003022:	f04f 35ff 	mov.w	r5, #4294967295
 8003026:	e7f6      	b.n	8003016 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <xTaskCreate+0x190>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ce      	bne.n	8002fce <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003030:	6833      	ldr	r3, [r6, #0]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003036:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003038:	bf98      	it	ls
 800303a:	6034      	strls	r4, [r6, #0]
 800303c:	e7c7      	b.n	8002fce <xTaskCreate+0xf6>
 800303e:	bf00      	nop
 8003040:	20003e9c 	.word	0x20003e9c
 8003044:	20003e04 	.word	0x20003e04
 8003048:	20003ec8 	.word	0x20003ec8
 800304c:	20003ee8 	.word	0x20003ee8
 8003050:	20003f14 	.word	0x20003f14
 8003054:	20003f00 	.word	0x20003f00
 8003058:	20003e08 	.word	0x20003e08
 800305c:	20003e0c 	.word	0x20003e0c
 8003060:	20003eac 	.word	0x20003eac
 8003064:	20003eb0 	.word	0x20003eb0
 8003068:	20003efc 	.word	0x20003efc
 800306c:	e000ed04 	.word	0xe000ed04
 8003070:	20003e10 	.word	0x20003e10
 8003074:	20003eb4 	.word	0x20003eb4

08003078 <vTaskStartScheduler>:
{
 8003078:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <vTaskStartScheduler+0x60>)
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	2400      	movs	r4, #0
 8003080:	9400      	str	r4, [sp, #0]
 8003082:	4623      	mov	r3, r4
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	4915      	ldr	r1, [pc, #84]	; (80030dc <vTaskStartScheduler+0x64>)
 8003088:	4815      	ldr	r0, [pc, #84]	; (80030e0 <vTaskStartScheduler+0x68>)
 800308a:	f7ff ff25 	bl	8002ed8 <xTaskCreate>
	if( xReturn == pdPASS )
 800308e:	2801      	cmp	r0, #1
 8003090:	d114      	bne.n	80030bc <vTaskStartScheduler+0x44>
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <vTaskStartScheduler+0x6c>)
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <vTaskStartScheduler+0x70>)
 80030ac:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80030ae:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <vTaskStartScheduler+0x74>)
 80030b0:	601c      	str	r4, [r3, #0]
}
 80030b2:	b002      	add	sp, #8
 80030b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80030b8:	f7ff bd56 	b.w	8002b68 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030bc:	3001      	adds	r0, #1
 80030be:	d108      	bne.n	80030d2 <vTaskStartScheduler+0x5a>
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	e7fe      	b.n	80030d0 <vTaskStartScheduler+0x58>
}
 80030d2:	b002      	add	sp, #8
 80030d4:	bd10      	pop	{r4, pc}
 80030d6:	bf00      	nop
 80030d8:	20003edc 	.word	0x20003edc
 80030dc:	080044c8 	.word	0x080044c8
 80030e0:	0800335d 	.word	0x0800335d
 80030e4:	20003ee0 	.word	0x20003ee0
 80030e8:	20003efc 	.word	0x20003efc
 80030ec:	20003f28 	.word	0x20003f28

080030f0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80030f0:	4a02      	ldr	r2, [pc, #8]	; (80030fc <vTaskSuspendAll+0xc>)
 80030f2:	6813      	ldr	r3, [r2, #0]
 80030f4:	3301      	adds	r3, #1
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20003ea8 	.word	0x20003ea8

08003100 <xTaskIncrementTick>:
{
 8003100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003104:	4b3c      	ldr	r3, [pc, #240]	; (80031f8 <xTaskIncrementTick+0xf8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d153      	bne.n	80031b4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800310c:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <xTaskIncrementTick+0xfc>)
 800310e:	681c      	ldr	r4, [r3, #0]
 8003110:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003112:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003114:	b9bc      	cbnz	r4, 8003146 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <xTaskIncrementTick+0x100>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	b142      	cbz	r2, 8003130 <xTaskIncrementTick+0x30>
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	e7fe      	b.n	800312e <xTaskIncrementTick+0x2e>
 8003130:	4a34      	ldr	r2, [pc, #208]	; (8003204 <xTaskIncrementTick+0x104>)
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	6810      	ldr	r0, [r2, #0]
 8003136:	6018      	str	r0, [r3, #0]
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	4a33      	ldr	r2, [pc, #204]	; (8003208 <xTaskIncrementTick+0x108>)
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	3301      	adds	r3, #1
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	f7ff fe71 	bl	8002e28 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003146:	4d31      	ldr	r5, [pc, #196]	; (800320c <xTaskIncrementTick+0x10c>)
 8003148:	4f31      	ldr	r7, [pc, #196]	; (8003210 <xTaskIncrementTick+0x110>)
 800314a:	682b      	ldr	r3, [r5, #0]
 800314c:	429c      	cmp	r4, r3
 800314e:	f04f 0b00 	mov.w	fp, #0
 8003152:	d33e      	bcc.n	80031d2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003154:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003200 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003158:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003220 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800315c:	f8d8 2000 	ldr.w	r2, [r8]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	bb72      	cbnz	r2, 80031c2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003164:	f04f 32ff 	mov.w	r2, #4294967295
 8003168:	602a      	str	r2, [r5, #0]
					break;
 800316a:	e032      	b.n	80031d2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800316c:	f106 0a04 	add.w	sl, r6, #4
 8003170:	4650      	mov	r0, sl
 8003172:	f7ff fbf6 	bl	8002962 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003176:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003178:	b119      	cbz	r1, 8003182 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800317a:	f106 0018 	add.w	r0, r6, #24
 800317e:	f7ff fbf0 	bl	8002962 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003182:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003184:	f8d9 3000 	ldr.w	r3, [r9]
 8003188:	2201      	movs	r2, #1
 800318a:	fa02 f100 	lsl.w	r1, r2, r0
 800318e:	4319      	orrs	r1, r3
 8003190:	4b20      	ldr	r3, [pc, #128]	; (8003214 <xTaskIncrementTick+0x114>)
 8003192:	f8c9 1000 	str.w	r1, [r9]
 8003196:	f04f 0e14 	mov.w	lr, #20
 800319a:	4651      	mov	r1, sl
 800319c:	fb0e 3000 	mla	r0, lr, r0, r3
 80031a0:	f7ff fbbc 	bl	800291c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031a4:	6838      	ldr	r0, [r7, #0]
 80031a6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80031a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80031aa:	4291      	cmp	r1, r2
 80031ac:	bf28      	it	cs
 80031ae:	f04f 0b01 	movcs.w	fp, #1
 80031b2:	e7d3      	b.n	800315c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80031b4:	4a18      	ldr	r2, [pc, #96]	; (8003218 <xTaskIncrementTick+0x118>)
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80031bc:	f04f 0b00 	mov.w	fp, #0
 80031c0:	e011      	b.n	80031e6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031c2:	f8d8 2000 	ldr.w	r2, [r8]
 80031c6:	68d2      	ldr	r2, [r2, #12]
 80031c8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031ca:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80031cc:	428c      	cmp	r4, r1
 80031ce:	d2cd      	bcs.n	800316c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80031d0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <xTaskIncrementTick+0x114>)
 80031d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031d8:	2214      	movs	r2, #20
 80031da:	434a      	muls	r2, r1
 80031dc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80031de:	2a02      	cmp	r2, #2
 80031e0:	bf28      	it	cs
 80031e2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80031e6:	4a0d      	ldr	r2, [pc, #52]	; (800321c <xTaskIncrementTick+0x11c>)
 80031e8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80031ea:	2a00      	cmp	r2, #0
 80031ec:	bf18      	it	ne
 80031ee:	f04f 0b01 	movne.w	fp, #1
}
 80031f2:	4658      	mov	r0, fp
 80031f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f8:	20003ea8 	.word	0x20003ea8
 80031fc:	20003f28 	.word	0x20003f28
 8003200:	20003e08 	.word	0x20003e08
 8003204:	20003e0c 	.word	0x20003e0c
 8003208:	20003ee4 	.word	0x20003ee4
 800320c:	20003ee0 	.word	0x20003ee0
 8003210:	20003e04 	.word	0x20003e04
 8003214:	20003e10 	.word	0x20003e10
 8003218:	20003ea4 	.word	0x20003ea4
 800321c:	20003f2c 	.word	0x20003f2c
 8003220:	20003eb0 	.word	0x20003eb0

08003224 <xTaskResumeAll>:
{
 8003224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003228:	4c31      	ldr	r4, [pc, #196]	; (80032f0 <xTaskResumeAll+0xcc>)
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	b943      	cbnz	r3, 8003240 <xTaskResumeAll+0x1c>
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	e7fe      	b.n	800323e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003240:	f7ff fc00 	bl	8002a44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	3b01      	subs	r3, #1
 8003248:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800324a:	6824      	ldr	r4, [r4, #0]
 800324c:	b12c      	cbz	r4, 800325a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800324e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003250:	f7ff fc1a 	bl	8002a88 <vPortExitCritical>
}
 8003254:	4620      	mov	r0, r4
 8003256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <xTaskResumeAll+0xd0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f5      	beq.n	800324e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003262:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800330c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8003266:	4f24      	ldr	r7, [pc, #144]	; (80032f8 <xTaskResumeAll+0xd4>)
 8003268:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003310 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800326c:	f8d9 3000 	ldr.w	r3, [r9]
 8003270:	b9e3      	cbnz	r3, 80032ac <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8003272:	b10c      	cbz	r4, 8003278 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003274:	f7ff fdd8 	bl	8002e28 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003278:	4d20      	ldr	r5, [pc, #128]	; (80032fc <xTaskResumeAll+0xd8>)
 800327a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800327c:	b144      	cbz	r4, 8003290 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800327e:	4e20      	ldr	r6, [pc, #128]	; (8003300 <xTaskResumeAll+0xdc>)
 8003280:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003282:	f7ff ff3d 	bl	8003100 <xTaskIncrementTick>
 8003286:	b100      	cbz	r0, 800328a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003288:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800328a:	3c01      	subs	r4, #1
 800328c:	d1f9      	bne.n	8003282 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800328e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <xTaskResumeAll+0xdc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0da      	beq.n	800324e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <xTaskResumeAll+0xe0>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80032a8:	2401      	movs	r4, #1
 80032aa:	e7d1      	b.n	8003250 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80032ac:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80032b0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032b2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032b4:	f104 0018 	add.w	r0, r4, #24
 80032b8:	f7ff fb53 	bl	8002962 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032bc:	4630      	mov	r0, r6
 80032be:	f7ff fb50 	bl	8002962 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032c4:	6839      	ldr	r1, [r7, #0]
 80032c6:	2501      	movs	r5, #1
 80032c8:	fa05 f302 	lsl.w	r3, r5, r2
 80032cc:	2014      	movs	r0, #20
 80032ce:	430b      	orrs	r3, r1
 80032d0:	fb00 8002 	mla	r0, r0, r2, r8
 80032d4:	4631      	mov	r1, r6
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	f7ff fb20 	bl	800291c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <xTaskResumeAll+0xe4>)
 80032de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80032e6:	bf24      	itt	cs
 80032e8:	4b05      	ldrcs	r3, [pc, #20]	; (8003300 <xTaskResumeAll+0xdc>)
 80032ea:	601d      	strcs	r5, [r3, #0]
 80032ec:	e7be      	b.n	800326c <xTaskResumeAll+0x48>
 80032ee:	bf00      	nop
 80032f0:	20003ea8 	.word	0x20003ea8
 80032f4:	20003e9c 	.word	0x20003e9c
 80032f8:	20003eb0 	.word	0x20003eb0
 80032fc:	20003ea4 	.word	0x20003ea4
 8003300:	20003f2c 	.word	0x20003f2c
 8003304:	e000ed04 	.word	0xe000ed04
 8003308:	20003e04 	.word	0x20003e04
 800330c:	20003ee8 	.word	0x20003ee8
 8003310:	20003e10 	.word	0x20003e10

08003314 <vTaskDelay>:
	{
 8003314:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003316:	b940      	cbnz	r0, 800332a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <vTaskDelay+0x40>)
 800331a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <vTaskDelay+0x44>)
 800332c:	6819      	ldr	r1, [r3, #0]
 800332e:	b141      	cbz	r1, 8003342 <vTaskDelay+0x2e>
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	e7fe      	b.n	8003340 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003342:	f7ff fed5 	bl	80030f0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003346:	f7ff fd81 	bl	8002e4c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800334a:	f7ff ff6b 	bl	8003224 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800334e:	2800      	cmp	r0, #0
 8003350:	d0e2      	beq.n	8003318 <vTaskDelay+0x4>
 8003352:	bd08      	pop	{r3, pc}
 8003354:	e000ed04 	.word	0xe000ed04
 8003358:	20003ea8 	.word	0x20003ea8

0800335c <prvIdleTask>:
{
 800335c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800335e:	4e17      	ldr	r6, [pc, #92]	; (80033bc <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003360:	4c17      	ldr	r4, [pc, #92]	; (80033c0 <prvIdleTask+0x64>)
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	b963      	cbnz	r3, 8003380 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003366:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <prvIdleTask+0x68>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d9f8      	bls.n	8003360 <prvIdleTask+0x4>
				taskYIELD();
 800336e:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <prvIdleTask+0x6c>)
 8003370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	e7ef      	b.n	8003360 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003380:	f7ff feb6 	bl	80030f0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003384:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8003386:	f7ff ff4d 	bl	8003224 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800338a:	2d00      	cmp	r5, #0
 800338c:	d0e9      	beq.n	8003362 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800338e:	f7ff fb59 	bl	8002a44 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003392:	68f3      	ldr	r3, [r6, #12]
 8003394:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003396:	1d28      	adds	r0, r5, #4
 8003398:	f7ff fae3 	bl	8002962 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800339c:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <prvIdleTask+0x70>)
 800339e:	6813      	ldr	r3, [r2, #0]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80033aa:	f7ff fb6d 	bl	8002a88 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80033ae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80033b0:	f7ff fd02 	bl	8002db8 <vPortFree>
			vPortFree( pxTCB );
 80033b4:	4628      	mov	r0, r5
 80033b6:	f7ff fcff 	bl	8002db8 <vPortFree>
 80033ba:	e7d2      	b.n	8003362 <prvIdleTask+0x6>
 80033bc:	20003f14 	.word	0x20003f14
 80033c0:	20003ea0 	.word	0x20003ea0
 80033c4:	20003e10 	.word	0x20003e10
 80033c8:	e000ed04 	.word	0xe000ed04
 80033cc:	20003e9c 	.word	0x20003e9c

080033d0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <vTaskSwitchContext+0x60>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	4b17      	ldr	r3, [pc, #92]	; (8003434 <vTaskSwitchContext+0x64>)
{
 80033d6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033d8:	b112      	cbz	r2, 80033e0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80033da:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80033e0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <vTaskSwitchContext+0x68>)
 80033e4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f1c3 031f 	rsb	r3, r3, #31
 80033f0:	2214      	movs	r2, #20
 80033f2:	4912      	ldr	r1, [pc, #72]	; (800343c <vTaskSwitchContext+0x6c>)
 80033f4:	435a      	muls	r2, r3
 80033f6:	1888      	adds	r0, r1, r2
 80033f8:	588c      	ldr	r4, [r1, r2]
 80033fa:	b944      	cbnz	r4, 800340e <vTaskSwitchContext+0x3e>
	__asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	e7fe      	b.n	800340c <vTaskSwitchContext+0x3c>
 800340e:	6844      	ldr	r4, [r0, #4]
 8003410:	3208      	adds	r2, #8
 8003412:	6864      	ldr	r4, [r4, #4]
 8003414:	6044      	str	r4, [r0, #4]
 8003416:	440a      	add	r2, r1
 8003418:	4294      	cmp	r4, r2
 800341a:	bf04      	itt	eq
 800341c:	6862      	ldreq	r2, [r4, #4]
 800341e:	6042      	streq	r2, [r0, #4]
 8003420:	2214      	movs	r2, #20
 8003422:	fb02 1303 	mla	r3, r2, r3, r1
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <vTaskSwitchContext+0x70>)
 800342c:	e7d6      	b.n	80033dc <vTaskSwitchContext+0xc>
 800342e:	bf00      	nop
 8003430:	20003ea8 	.word	0x20003ea8
 8003434:	20003f2c 	.word	0x20003f2c
 8003438:	20003eb0 	.word	0x20003eb0
 800343c:	20003e10 	.word	0x20003e10
 8003440:	20003e04 	.word	0x20003e04

08003444 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <xTaskGetSchedulerState+0x18>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	b133      	cbz	r3, 8003458 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <xTaskGetSchedulerState+0x1c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003450:	bf0c      	ite	eq
 8003452:	2002      	moveq	r0, #2
 8003454:	2000      	movne	r0, #0
 8003456:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003458:	2001      	movs	r0, #1
	}
 800345a:	4770      	bx	lr
 800345c:	20003efc 	.word	0x20003efc
 8003460:	20003ea8 	.word	0x20003ea8

08003464 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003464:	b530      	push	{r4, r5, lr}
 8003466:	b085      	sub	sp, #20
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003468:	f000 f99a 	bl	80037a0 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 800346c:	2118      	movs	r1, #24
 800346e:	480f      	ldr	r0, [pc, #60]	; (80034ac <StartDefaultTask+0x48>)
  /* Infinite loop */
  for(;;)
  {
	//  CDC_Transmit_FS((uint8_t *)htim3.Instance->CNT,9);
	  char buf[10];
	  sprintf(buf,"%lu",htim3.Instance->CNT);
 8003470:	4d0e      	ldr	r5, [pc, #56]	; (80034ac <StartDefaultTask+0x48>)
 8003472:	4c0f      	ldr	r4, [pc, #60]	; (80034b0 <StartDefaultTask+0x4c>)
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8003474:	f7fe f8e2 	bl	800163c <HAL_TIM_Encoder_Start>
	  sprintf(buf,"%lu",htim3.Instance->CNT);
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	4621      	mov	r1, r4
 800347c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347e:	a801      	add	r0, sp, #4
 8003480:	f000 fca8 	bl	8003dd4 <siprintf>
	  //char *c="23";
	  CDC_Transmit_FS((uint8_t*)buf,10);
 8003484:	210a      	movs	r1, #10
 8003486:	a801      	add	r0, sp, #4
 8003488:	f000 f9cc 	bl	8003824 <CDC_Transmit_FS>
	  HAL_Delay(100);
 800348c:	2064      	movs	r0, #100	; 0x64
 800348e:	f7fd f8cf 	bl	8000630 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t*)x,1);
 8003492:	2101      	movs	r1, #1
 8003494:	4807      	ldr	r0, [pc, #28]	; (80034b4 <StartDefaultTask+0x50>)
 8003496:	f000 f9c5 	bl	8003824 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800349a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800349e:	f7fd f8c7 	bl	8000630 <HAL_Delay>

	  //y=htim3.Instance->CNT;
	 // HAL_Delay(100);
    osDelay(1);
 80034a2:	2001      	movs	r0, #1
 80034a4:	f7ff fa1a 	bl	80028dc <osDelay>
 80034a8:	e7e6      	b.n	8003478 <StartDefaultTask+0x14>
 80034aa:	bf00      	nop
 80034ac:	20003f44 	.word	0x20003f44
 80034b0:	080044cd 	.word	0x080044cd
 80034b4:	08004557 	.word	0x08004557

080034b8 <SystemClock_Config>:
{
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <SystemClock_Config+0xa4>)
 80034be:	2100      	movs	r1, #0
 80034c0:	9101      	str	r1, [sp, #4]
 80034c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d4:	4b22      	ldr	r3, [pc, #136]	; (8003560 <SystemClock_Config+0xa8>)
 80034d6:	9102      	str	r1, [sp, #8]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034e6:	9302      	str	r3, [sp, #8]
 80034e8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034ea:	2301      	movs	r3, #1
 80034ec:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034f2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034f8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80034fa:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034fc:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 80034fe:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003500:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003502:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003504:	2303      	movs	r3, #3
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003506:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003508:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800350a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800350c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800350e:	f7fd fe45 	bl	800119c <HAL_RCC_OscConfig>
 8003512:	b100      	cbz	r0, 8003516 <SystemClock_Config+0x5e>
 8003514:	e7fe      	b.n	8003514 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003516:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800351c:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800351e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003520:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003522:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003524:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003526:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003528:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800352a:	f7fd ffe7 	bl	80014fc <HAL_RCC_ClockConfig>
 800352e:	4604      	mov	r4, r0
 8003530:	b100      	cbz	r0, 8003534 <SystemClock_Config+0x7c>
 8003532:	e7fe      	b.n	8003532 <SystemClock_Config+0x7a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003534:	f7fe f87c 	bl	8001630 <HAL_RCC_GetHCLKFreq>
 8003538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800353c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003540:	f7fd f8dc 	bl	80006fc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003544:	4630      	mov	r0, r6
 8003546:	f7fd f8ef 	bl	8000728 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800354a:	4622      	mov	r2, r4
 800354c:	4629      	mov	r1, r5
 800354e:	f04f 30ff 	mov.w	r0, #4294967295
 8003552:	f7fd f893 	bl	800067c <HAL_NVIC_SetPriority>
}
 8003556:	b014      	add	sp, #80	; 0x50
 8003558:	bd70      	pop	{r4, r5, r6, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40007000 	.word	0x40007000

08003564 <main>:
{
 8003564:	b500      	push	{lr}
 8003566:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003568:	2400      	movs	r4, #0
  HAL_Init();
 800356a:	f7fd f835 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 800356e:	f7ff ffa3 	bl	80034b8 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003572:	4b30      	ldr	r3, [pc, #192]	; (8003634 <main+0xd0>)
 8003574:	9400      	str	r4, [sp, #0]
 8003576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8003578:	482f      	ldr	r0, [pc, #188]	; (8003638 <main+0xd4>)
  htim3.Instance = TIM3;
 800357a:	4d30      	ldr	r5, [pc, #192]	; (800363c <main+0xd8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800357c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003580:	631a      	str	r2, [r3, #48]	; 0x30
 8003582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003584:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003588:	9200      	str	r2, [sp, #0]
 800358a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800358c:	9401      	str	r4, [sp, #4]
 800358e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
 8003596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003598:	f002 0201 	and.w	r2, r2, #1
 800359c:	9201      	str	r2, [sp, #4]
 800359e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a0:	9402      	str	r4, [sp, #8]
 80035a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a4:	f042 0208 	orr.w	r2, r2, #8
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80035b2:	4622      	mov	r2, r4
 80035b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ba:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80035bc:	f7fd f996 	bl	80008ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80035c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035c4:	a905      	add	r1, sp, #20
 80035c6:	481c      	ldr	r0, [pc, #112]	; (8003638 <main+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80035c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ca:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ce:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035d0:	f7fd f8b6 	bl	8000740 <HAL_GPIO_Init>
  htim3.Instance = TIM3;
 80035d4:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <main+0xdc>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d6:	60ac      	str	r4, [r5, #8]
  htim3.Init.Prescaler = 0;
 80035d8:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 0xffff;
 80035dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035e0:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035e2:	a905      	add	r1, sp, #20
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035e4:	2303      	movs	r3, #3
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035e6:	4628      	mov	r0, r5
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e8:	612c      	str	r4, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035ea:	9305      	str	r3, [sp, #20]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035ec:	9406      	str	r4, [sp, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035ee:	9607      	str	r6, [sp, #28]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035f0:	9408      	str	r4, [sp, #32]
  sConfig.IC1Filter = 0;
 80035f2:	9409      	str	r4, [sp, #36]	; 0x24
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035f4:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035f6:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035f8:	940c      	str	r4, [sp, #48]	; 0x30
  sConfig.IC2Filter = 0;
 80035fa:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035fc:	f7fe f88c 	bl	8001718 <HAL_TIM_Encoder_Init>
 8003600:	b100      	cbz	r0, 8003604 <main+0xa0>
 8003602:	e7fe      	b.n	8003602 <main+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003604:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003606:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003608:	a903      	add	r1, sp, #12
 800360a:	4628      	mov	r0, r5
 800360c:	f7fe f8cd 	bl	80017aa <HAL_TIMEx_MasterConfigSynchronization>
 8003610:	4606      	mov	r6, r0
 8003612:	b100      	cbz	r0, 8003616 <main+0xb2>
 8003614:	e7fe      	b.n	8003614 <main+0xb0>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003616:	4d0b      	ldr	r5, [pc, #44]	; (8003644 <main+0xe0>)
 8003618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800361a:	ac05      	add	r4, sp, #20
 800361c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800361e:	682b      	ldr	r3, [r5, #0]
 8003620:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003622:	4631      	mov	r1, r6
 8003624:	a805      	add	r0, sp, #20
 8003626:	f7ff f941 	bl	80028ac <osThreadCreate>
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <main+0xe4>)
 800362c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800362e:	f7ff f938 	bl	80028a2 <osKernelStart>
 8003632:	e7fe      	b.n	8003632 <main+0xce>
 8003634:	40023800 	.word	0x40023800
 8003638:	40020c00 	.word	0x40020c00
 800363c:	20003f44 	.word	0x20003f44
 8003640:	40000400 	.word	0x40000400
 8003644:	080044b4 	.word	0x080044b4
 8003648:	20003f40 	.word	0x20003f40

0800364c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800364c:	e7fe      	b.n	800364c <_Error_Handler>
	...

08003650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003650:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <HAL_MspInit+0x8c>)
 8003654:	2400      	movs	r4, #0
 8003656:	9400      	str	r4, [sp, #0]
 8003658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800365a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
 8003660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003662:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003666:	9200      	str	r2, [sp, #0]
 8003668:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	9401      	str	r4, [sp, #4]
 800366c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800366e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800367c:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003680:	f7fc ffea 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003684:	4622      	mov	r2, r4
 8003686:	4621      	mov	r1, r4
 8003688:	f06f 000b 	mvn.w	r0, #11
 800368c:	f7fc fff6 	bl	800067c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003690:	4622      	mov	r2, r4
 8003692:	4621      	mov	r1, r4
 8003694:	f06f 000a 	mvn.w	r0, #10
 8003698:	f7fc fff0 	bl	800067c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800369c:	4622      	mov	r2, r4
 800369e:	4621      	mov	r1, r4
 80036a0:	f06f 0009 	mvn.w	r0, #9
 80036a4:	f7fc ffea 	bl	800067c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80036a8:	4622      	mov	r2, r4
 80036aa:	4621      	mov	r1, r4
 80036ac:	f06f 0004 	mvn.w	r0, #4
 80036b0:	f7fc ffe4 	bl	800067c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80036b4:	4622      	mov	r2, r4
 80036b6:	4621      	mov	r1, r4
 80036b8:	f06f 0003 	mvn.w	r0, #3
 80036bc:	f7fc ffde 	bl	800067c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036c0:	4622      	mov	r2, r4
 80036c2:	210f      	movs	r1, #15
 80036c4:	f06f 0001 	mvn.w	r0, #1
 80036c8:	f7fc ffd8 	bl	800067c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80036cc:	4622      	mov	r2, r4
 80036ce:	210f      	movs	r1, #15
 80036d0:	f04f 30ff 	mov.w	r0, #4294967295
 80036d4:	f7fc ffd2 	bl	800067c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036d8:	b002      	add	sp, #8
 80036da:	bd10      	pop	{r4, pc}
 80036dc:	40023800 	.word	0x40023800

080036e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM3)
 80036e2:	6802      	ldr	r2, [r0, #0]
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_TIM_Encoder_MspInit+0x44>)
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d118      	bne.n	800371c <HAL_TIM_Encoder_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036ea:	2100      	movs	r1, #0
 80036ec:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80036f0:	9100      	str	r1, [sp, #0]
 80036f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f4:	480c      	ldr	r0, [pc, #48]	; (8003728 <HAL_TIM_Encoder_MspInit+0x48>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036f6:	f042 0202 	orr.w	r2, r2, #2
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	9104      	str	r1, [sp, #16]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003708:	23c0      	movs	r3, #192	; 0xc0
 800370a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370c:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003710:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003714:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003716:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003718:	f7fd f812 	bl	8000740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800371c:	b007      	add	sp, #28
 800371e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003722:	bf00      	nop
 8003724:	40000400 	.word	0x40000400
 8003728:	40020000 	.word	0x40020000

0800372c <NMI_Handler>:
 800372c:	4770      	bx	lr

0800372e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800372e:	e7fe      	b.n	800372e <HardFault_Handler>

08003730 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003730:	e7fe      	b.n	8003730 <MemManage_Handler>

08003732 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003732:	e7fe      	b.n	8003732 <BusFault_Handler>

08003734 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003734:	e7fe      	b.n	8003734 <UsageFault_Handler>

08003736 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003736:	4770      	bx	lr

08003738 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003738:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800373a:	f7fc ff67 	bl	800060c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800373e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8003742:	f7ff b8d3 	b.w	80028ec <osSystickHandler>
	...

08003748 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003748:	4801      	ldr	r0, [pc, #4]	; (8003750 <OTG_FS_IRQHandler+0x8>)
 800374a:	f7fd b955 	b.w	80009f8 <HAL_PCD_IRQHandler>
 800374e:	bf00      	nop
 8003750:	200051a4 	.word	0x200051a4

08003754 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003754:	490f      	ldr	r1, [pc, #60]	; (8003794 <SystemInit+0x40>)
 8003756:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800375a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <SystemInit+0x44>)
 8003764:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003766:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800376e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003776:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800377a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800377c:	4a07      	ldr	r2, [pc, #28]	; (800379c <SystemInit+0x48>)
 800377e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003786:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003788:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800378a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800378e:	608b      	str	r3, [r1, #8]
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000ed00 	.word	0xe000ed00
 8003798:	40023800 	.word	0x40023800
 800379c:	24003010 	.word	0x24003010

080037a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80037a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80037a2:	4c09      	ldr	r4, [pc, #36]	; (80037c8 <MX_USB_DEVICE_Init+0x28>)
 80037a4:	4909      	ldr	r1, [pc, #36]	; (80037cc <MX_USB_DEVICE_Init+0x2c>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	4620      	mov	r0, r4
 80037aa:	f7fe fd59 	bl	8002260 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80037ae:	4908      	ldr	r1, [pc, #32]	; (80037d0 <MX_USB_DEVICE_Init+0x30>)
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7fe fd6a 	bl	800228a <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80037b6:	4620      	mov	r0, r4
 80037b8:	4906      	ldr	r1, [pc, #24]	; (80037d4 <MX_USB_DEVICE_Init+0x34>)
 80037ba:	f7fe fd12 	bl	80021e2 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80037be:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80037c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 80037c4:	f7fe bd68 	b.w	8002298 <USBD_Start>
 80037c8:	20003f80 	.word	0x20003f80
 80037cc:	20000130 	.word	0x20000130
 80037d0:	20000008 	.word	0x20000008
 80037d4:	20000120 	.word	0x20000120

080037d8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80037d8:	2000      	movs	r0, #0
 80037da:	4770      	bx	lr

080037dc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80037dc:	2000      	movs	r0, #0
 80037de:	4770      	bx	lr

080037e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80037e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80037e2:	4c05      	ldr	r4, [pc, #20]	; (80037f8 <CDC_Receive_FS+0x18>)
 80037e4:	4601      	mov	r1, r0
 80037e6:	4620      	mov	r0, r4
 80037e8:	f7fe fd0a 	bl	8002200 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7fe fd24 	bl	800223a <USBD_CDC_ReceivePacket>
	  //char *c="23";
	  CDC_Transmit_FS((uint8_t*)buf,2);
  }*/
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80037f2:	2000      	movs	r0, #0
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	bf00      	nop
 80037f8:	20003f80 	.word	0x20003f80

080037fc <CDC_Init_FS>:
{
 80037fc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80037fe:	4c06      	ldr	r4, [pc, #24]	; (8003818 <CDC_Init_FS+0x1c>)
 8003800:	4906      	ldr	r1, [pc, #24]	; (800381c <CDC_Init_FS+0x20>)
 8003802:	2200      	movs	r2, #0
 8003804:	4620      	mov	r0, r4
 8003806:	f7fe fcf3 	bl	80021f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800380a:	4905      	ldr	r1, [pc, #20]	; (8003820 <CDC_Init_FS+0x24>)
 800380c:	4620      	mov	r0, r4
 800380e:	f7fe fcf7 	bl	8002200 <USBD_CDC_SetRxBuffer>
}
 8003812:	2000      	movs	r0, #0
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	20003f80 	.word	0x20003f80
 800381c:	200049a4 	.word	0x200049a4
 8003820:	200041a4 	.word	0x200041a4

08003824 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003824:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003826:	4c09      	ldr	r4, [pc, #36]	; (800384c <CDC_Transmit_FS+0x28>)
 8003828:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 800382c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8003830:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8003832:	b943      	cbnz	r3, 8003846 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003834:	4601      	mov	r1, r0
 8003836:	4620      	mov	r0, r4
 8003838:	f7fe fcda 	bl	80021f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800383c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800383e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003842:	f7fe bce3 	b.w	800220c <USBD_CDC_TransmitPacket>
}
 8003846:	2001      	movs	r0, #1
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop
 800384c:	20003f80 	.word	0x20003f80

08003850 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003850:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8003852:	6803      	ldr	r3, [r0, #0]
 8003854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003858:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 800385a:	d125      	bne.n	80038a8 <HAL_PCD_MspInit+0x58>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800385c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003860:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003866:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800386e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003870:	480e      	ldr	r0, [pc, #56]	; (80038ac <HAL_PCD_MspInit+0x5c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003872:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003876:	f7fc ff63 	bl	8000740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <HAL_PCD_MspInit+0x60>)
 800387c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003882:	635a      	str	r2, [r3, #52]	; 0x34
 8003884:	9400      	str	r4, [sp, #0]
 8003886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800388c:	645a      	str	r2, [r3, #68]	; 0x44
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003894:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8003896:	2043      	movs	r0, #67	; 0x43
 8003898:	4622      	mov	r2, r4
 800389a:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800389c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800389e:	f7fc feed 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80038a2:	2043      	movs	r0, #67	; 0x43
 80038a4:	f7fc ff1e 	bl	80006e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80038a8:	b006      	add	sp, #24
 80038aa:	bd10      	pop	{r4, pc}
 80038ac:	40020000 	.word	0x40020000
 80038b0:	40023800 	.word	0x40023800

080038b4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80038b4:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 80038b8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80038bc:	f7fe bd03 	b.w	80022c6 <USBD_LL_SetupStage>

080038c0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80038c0:	231c      	movs	r3, #28
 80038c2:	fb03 0301 	mla	r3, r3, r1, r0
 80038c6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80038ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80038ce:	f7fe bd27 	b.w	8002320 <USBD_LL_DataOutStage>

080038d2 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80038d2:	231c      	movs	r3, #28
 80038d4:	fb03 0301 	mla	r3, r3, r1, r0
 80038d8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80038dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038de:	f7fe bd51 	b.w	8002384 <USBD_LL_DataInStage>

080038e2 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80038e2:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80038e6:	f7fe bdcd 	b.w	8002484 <USBD_LL_SOF>

080038ea <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80038ea:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 80038ec:	68c1      	ldr	r1, [r0, #12]
{ 
 80038ee:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80038f0:	3100      	adds	r1, #0
 80038f2:	bf18      	it	ne
 80038f4:	2101      	movne	r1, #1
 80038f6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80038fa:	f7fe fdb1 	bl	8002460 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80038fe:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8003902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003906:	f7fe bd8c 	b.w	8002422 <USBD_LL_Reset>
	...

0800390c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800390c:	b510      	push	{r4, lr}
 800390e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003910:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003914:	f7fe fda7 	bl	8002466 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003918:	6822      	ldr	r2, [r4, #0]
 800391a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003926:	6a23      	ldr	r3, [r4, #32]
 8003928:	b123      	cbz	r3, 8003934 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800392a:	4a03      	ldr	r2, [pc, #12]	; (8003938 <HAL_PCD_SuspendCallback+0x2c>)
 800392c:	6913      	ldr	r3, [r2, #16]
 800392e:	f043 0306 	orr.w	r3, r3, #6
 8003932:	6113      	str	r3, [r2, #16]
 8003934:	bd10      	pop	{r4, pc}
 8003936:	bf00      	nop
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800393c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003940:	f7fe bd9a 	b.w	8002478 <USBD_LL_Resume>

08003944 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003944:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003948:	f7fe bdaa 	b.w	80024a0 <USBD_LL_IsoOUTIncomplete>

0800394c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800394c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003950:	f7fe bda4 	b.w	800249c <USBD_LL_IsoINIncomplete>

08003954 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003954:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003958:	f7fe bda4 	b.w	80024a4 <USBD_LL_DevConnected>

0800395c <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800395c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8003960:	f7fe bda2 	b.w	80024a8 <USBD_LL_DevDisconnected>

08003964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003964:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003966:	7802      	ldrb	r2, [r0, #0]
 8003968:	bb52      	cbnz	r2, 80039c0 <USBD_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800396a:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <USBD_LL_Init+0x60>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800396c:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 800396e:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 8003972:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003976:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800397a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800397e:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003980:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003982:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003984:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003986:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003988:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800398a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800398c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003990:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003994:	f7fc ffaf 	bl	80008f6 <HAL_PCD_Init>
 8003998:	b120      	cbz	r0, 80039a4 <USBD_LL_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 800399a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800399e:	480a      	ldr	r0, [pc, #40]	; (80039c8 <USBD_LL_Init+0x64>)
 80039a0:	f7ff fe54 	bl	800364c <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	4807      	ldr	r0, [pc, #28]	; (80039c4 <USBD_LL_Init+0x60>)
 80039a8:	f7fd fbf3 	bl	8001192 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	2100      	movs	r1, #0
 80039b0:	4804      	ldr	r0, [pc, #16]	; (80039c4 <USBD_LL_Init+0x60>)
 80039b2:	f7fd fbcd 	bl	8001150 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	2101      	movs	r1, #1
 80039ba:	4802      	ldr	r0, [pc, #8]	; (80039c4 <USBD_LL_Init+0x60>)
 80039bc:	f7fd fbc8 	bl	8001150 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 80039c0:	2000      	movs	r0, #0
 80039c2:	bd08      	pop	{r3, pc}
 80039c4:	200051a4 	.word	0x200051a4
 80039c8:	080044f1 	.word	0x080044f1

080039cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80039cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80039ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80039d2:	f7fc fffc 	bl	80009ce <HAL_PCD_Start>
 80039d6:	2803      	cmp	r0, #3
 80039d8:	bf9a      	itte	ls
 80039da:	4b02      	ldrls	r3, [pc, #8]	; (80039e4 <USBD_LL_Start+0x18>)
 80039dc:	5c18      	ldrbls	r0, [r3, r0]
 80039de:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80039e0:	bd08      	pop	{r3, pc}
 80039e2:	bf00      	nop
 80039e4:	080044ed 	.word	0x080044ed

080039e8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80039e8:	b510      	push	{r4, lr}
 80039ea:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80039ec:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80039f0:	4613      	mov	r3, r2
 80039f2:	4622      	mov	r2, r4
 80039f4:	f7fd fabe 	bl	8000f74 <HAL_PCD_EP_Open>
 80039f8:	2803      	cmp	r0, #3
 80039fa:	bf9a      	itte	ls
 80039fc:	4b01      	ldrls	r3, [pc, #4]	; (8003a04 <USBD_LL_OpenEP+0x1c>)
 80039fe:	5c18      	ldrbls	r0, [r3, r0]
 8003a00:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003a02:	bd10      	pop	{r4, pc}
 8003a04:	080044ed 	.word	0x080044ed

08003a08 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003a0a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a0e:	f7fd fadf 	bl	8000fd0 <HAL_PCD_EP_Close>
 8003a12:	2803      	cmp	r0, #3
 8003a14:	bf9a      	itte	ls
 8003a16:	4b02      	ldrls	r3, [pc, #8]	; (8003a20 <USBD_LL_CloseEP+0x18>)
 8003a18:	5c18      	ldrbls	r0, [r3, r0]
 8003a1a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003a1c:	bd08      	pop	{r3, pc}
 8003a1e:	bf00      	nop
 8003a20:	080044ed 	.word	0x080044ed

08003a24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a24:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003a26:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a2a:	f7fd fb40 	bl	80010ae <HAL_PCD_EP_SetStall>
 8003a2e:	2803      	cmp	r0, #3
 8003a30:	bf9a      	itte	ls
 8003a32:	4b02      	ldrls	r3, [pc, #8]	; (8003a3c <USBD_LL_StallEP+0x18>)
 8003a34:	5c18      	ldrbls	r0, [r3, r0]
 8003a36:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003a38:	bd08      	pop	{r3, pc}
 8003a3a:	bf00      	nop
 8003a3c:	080044ed 	.word	0x080044ed

08003a40 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a40:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003a42:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a46:	f7fd fb5e 	bl	8001106 <HAL_PCD_EP_ClrStall>
 8003a4a:	2803      	cmp	r0, #3
 8003a4c:	bf9a      	itte	ls
 8003a4e:	4b02      	ldrls	r3, [pc, #8]	; (8003a58 <USBD_LL_ClearStallEP+0x18>)
 8003a50:	5c18      	ldrbls	r0, [r3, r0]
 8003a52:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003a54:	bd08      	pop	{r3, pc}
 8003a56:	bf00      	nop
 8003a58:	080044ed 	.word	0x080044ed

08003a5c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003a5c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003a60:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8003a64:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003a68:	bf1b      	ittet	ne
 8003a6a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003a6e:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003a72:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003a76:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003a7a:	bf08      	it	eq
 8003a7c:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8003a80:	4770      	bx	lr
	...

08003a84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003a84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003a86:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a8a:	f7fd fa61 	bl	8000f50 <HAL_PCD_SetAddress>
 8003a8e:	2803      	cmp	r0, #3
 8003a90:	bf9a      	itte	ls
 8003a92:	4b02      	ldrls	r3, [pc, #8]	; (8003a9c <USBD_LL_SetUSBAddress+0x18>)
 8003a94:	5c18      	ldrbls	r0, [r3, r0]
 8003a96:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003a98:	bd08      	pop	{r3, pc}
 8003a9a:	bf00      	nop
 8003a9c:	080044ed 	.word	0x080044ed

08003aa0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003aa0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003aa2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003aa6:	f7fd fae2 	bl	800106e <HAL_PCD_EP_Transmit>
 8003aaa:	2803      	cmp	r0, #3
 8003aac:	bf9a      	itte	ls
 8003aae:	4b02      	ldrls	r3, [pc, #8]	; (8003ab8 <USBD_LL_Transmit+0x18>)
 8003ab0:	5c18      	ldrbls	r0, [r3, r0]
 8003ab2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003ab4:	bd08      	pop	{r3, pc}
 8003ab6:	bf00      	nop
 8003ab8:	080044ed 	.word	0x080044ed

08003abc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003abc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003abe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003ac2:	f7fd faa8 	bl	8001016 <HAL_PCD_EP_Receive>
 8003ac6:	2803      	cmp	r0, #3
 8003ac8:	bf9a      	itte	ls
 8003aca:	4b02      	ldrls	r3, [pc, #8]	; (8003ad4 <USBD_LL_PrepareReceive+0x18>)
 8003acc:	5c18      	ldrbls	r0, [r3, r0]
 8003ace:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003ad0:	bd08      	pop	{r3, pc}
 8003ad2:	bf00      	nop
 8003ad4:	080044ed 	.word	0x080044ed

08003ad8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003ad8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003ada:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003ade:	f7fd fabe 	bl	800105e <HAL_PCD_EP_GetRxCount>
}
 8003ae2:	bd08      	pop	{r3, pc}

08003ae4 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003ae4:	2312      	movs	r3, #18
 8003ae6:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003ae8:	4800      	ldr	r0, [pc, #0]	; (8003aec <USBD_FS_DeviceDescriptor+0x8>)
 8003aea:	4770      	bx	lr
 8003aec:	2000014c 	.word	0x2000014c

08003af0 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003af0:	2304      	movs	r3, #4
 8003af2:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003af4:	4800      	ldr	r0, [pc, #0]	; (8003af8 <USBD_FS_LangIDStrDescriptor+0x8>)
 8003af6:	4770      	bx	lr
 8003af8:	20000160 	.word	0x20000160

08003afc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003afc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003afe:	4c04      	ldr	r4, [pc, #16]	; (8003b10 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003b00:	4804      	ldr	r0, [pc, #16]	; (8003b14 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003b02:	460a      	mov	r2, r1
 8003b04:	4621      	mov	r1, r4
 8003b06:	f7fe fe6e 	bl	80027e6 <USBD_GetString>
  return USBD_StrDesc;
}
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	bd10      	pop	{r4, pc}
 8003b0e:	bf00      	nop
 8003b10:	20005594 	.word	0x20005594
 8003b14:	0800451d 	.word	0x0800451d

08003b18 <USBD_FS_ProductStrDescriptor>:
{
 8003b18:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003b1a:	4c04      	ldr	r4, [pc, #16]	; (8003b2c <USBD_FS_ProductStrDescriptor+0x14>)
 8003b1c:	4804      	ldr	r0, [pc, #16]	; (8003b30 <USBD_FS_ProductStrDescriptor+0x18>)
 8003b1e:	460a      	mov	r2, r1
 8003b20:	4621      	mov	r1, r4
 8003b22:	f7fe fe60 	bl	80027e6 <USBD_GetString>
}
 8003b26:	4620      	mov	r0, r4
 8003b28:	bd10      	pop	{r4, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20005594 	.word	0x20005594
 8003b30:	08004530 	.word	0x08004530

08003b34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003b34:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003b36:	4c04      	ldr	r4, [pc, #16]	; (8003b48 <USBD_FS_SerialStrDescriptor+0x14>)
 8003b38:	4804      	ldr	r0, [pc, #16]	; (8003b4c <USBD_FS_SerialStrDescriptor+0x18>)
 8003b3a:	460a      	mov	r2, r1
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	f7fe fe52 	bl	80027e6 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003b42:	4620      	mov	r0, r4
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	bf00      	nop
 8003b48:	20005594 	.word	0x20005594
 8003b4c:	08004546 	.word	0x08004546

08003b50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003b50:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003b52:	4c04      	ldr	r4, [pc, #16]	; (8003b64 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003b54:	4804      	ldr	r0, [pc, #16]	; (8003b68 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003b56:	460a      	mov	r2, r1
 8003b58:	4621      	mov	r1, r4
 8003b5a:	f7fe fe44 	bl	80027e6 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003b5e:	4620      	mov	r0, r4
 8003b60:	bd10      	pop	{r4, pc}
 8003b62:	bf00      	nop
 8003b64:	20005594 	.word	0x20005594
 8003b68:	08004504 	.word	0x08004504

08003b6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003b6c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003b6e:	4c04      	ldr	r4, [pc, #16]	; (8003b80 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003b70:	4804      	ldr	r0, [pc, #16]	; (8003b84 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003b72:	460a      	mov	r2, r1
 8003b74:	4621      	mov	r1, r4
 8003b76:	f7fe fe36 	bl	80027e6 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	bf00      	nop
 8003b80:	20005594 	.word	0x20005594
 8003b84:	0800450f 	.word	0x0800450f

08003b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b8e:	e003      	b.n	8003b98 <LoopCopyDataInit>

08003b90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b96:	3104      	adds	r1, #4

08003b98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b98:	480b      	ldr	r0, [pc, #44]	; (8003bc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ba0:	d3f6      	bcc.n	8003b90 <CopyDataInit>
  ldr  r2, =_sbss
 8003ba2:	4a0b      	ldr	r2, [pc, #44]	; (8003bd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ba4:	e002      	b.n	8003bac <LoopFillZerobss>

08003ba6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ba6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ba8:	f842 3b04 	str.w	r3, [r2], #4

08003bac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003bae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bb0:	d3f9      	bcc.n	8003ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bb2:	f7ff fdcf 	bl	8003754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bb6:	f000 f811 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bba:	f7ff fcd3 	bl	8003564 <main>
  bx  lr    
 8003bbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003bc4:	08004598 	.word	0x08004598
  ldr  r0, =_sdata
 8003bc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bcc:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8003bd0:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8003bd4:	20005798 	.word	0x20005798

08003bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd8:	e7fe      	b.n	8003bd8 <ADC_IRQHandler>
	...

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4e0d      	ldr	r6, [pc, #52]	; (8003c14 <__libc_init_array+0x38>)
 8003be0:	4c0d      	ldr	r4, [pc, #52]	; (8003c18 <__libc_init_array+0x3c>)
 8003be2:	1ba4      	subs	r4, r4, r6
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	2500      	movs	r5, #0
 8003be8:	42a5      	cmp	r5, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	4e0b      	ldr	r6, [pc, #44]	; (8003c1c <__libc_init_array+0x40>)
 8003bee:	4c0c      	ldr	r4, [pc, #48]	; (8003c20 <__libc_init_array+0x44>)
 8003bf0:	f000 fc54 	bl	800449c <_init>
 8003bf4:	1ba4      	subs	r4, r4, r6
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	2500      	movs	r5, #0
 8003bfa:	42a5      	cmp	r5, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c04:	4798      	blx	r3
 8003c06:	3501      	adds	r5, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c0e:	4798      	blx	r3
 8003c10:	3501      	adds	r5, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	08004590 	.word	0x08004590
 8003c18:	08004590 	.word	0x08004590
 8003c1c:	08004590 	.word	0x08004590
 8003c20:	08004594 	.word	0x08004594

08003c24 <malloc>:
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <malloc+0xc>)
 8003c26:	4601      	mov	r1, r0
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	f000 b865 	b.w	8003cf8 <_malloc_r>
 8003c2e:	bf00      	nop
 8003c30:	20000164 	.word	0x20000164

08003c34 <free>:
 8003c34:	4b02      	ldr	r3, [pc, #8]	; (8003c40 <free+0xc>)
 8003c36:	4601      	mov	r1, r0
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	f000 b80f 	b.w	8003c5c <_free_r>
 8003c3e:	bf00      	nop
 8003c40:	20000164 	.word	0x20000164

08003c44 <memcpy>:
 8003c44:	b510      	push	{r4, lr}
 8003c46:	1e43      	subs	r3, r0, #1
 8003c48:	440a      	add	r2, r1
 8003c4a:	4291      	cmp	r1, r2
 8003c4c:	d100      	bne.n	8003c50 <memcpy+0xc>
 8003c4e:	bd10      	pop	{r4, pc}
 8003c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c58:	e7f7      	b.n	8003c4a <memcpy+0x6>
	...

08003c5c <_free_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4605      	mov	r5, r0
 8003c60:	2900      	cmp	r1, #0
 8003c62:	d045      	beq.n	8003cf0 <_free_r+0x94>
 8003c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c68:	1f0c      	subs	r4, r1, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bfb8      	it	lt
 8003c6e:	18e4      	addlt	r4, r4, r3
 8003c70:	f000 f8d4 	bl	8003e1c <__malloc_lock>
 8003c74:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <_free_r+0x98>)
 8003c76:	6813      	ldr	r3, [r2, #0]
 8003c78:	4610      	mov	r0, r2
 8003c7a:	b933      	cbnz	r3, 8003c8a <_free_r+0x2e>
 8003c7c:	6063      	str	r3, [r4, #4]
 8003c7e:	6014      	str	r4, [r2, #0]
 8003c80:	4628      	mov	r0, r5
 8003c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c86:	f000 b8ca 	b.w	8003e1e <__malloc_unlock>
 8003c8a:	42a3      	cmp	r3, r4
 8003c8c:	d90c      	bls.n	8003ca8 <_free_r+0x4c>
 8003c8e:	6821      	ldr	r1, [r4, #0]
 8003c90:	1862      	adds	r2, r4, r1
 8003c92:	4293      	cmp	r3, r2
 8003c94:	bf04      	itt	eq
 8003c96:	681a      	ldreq	r2, [r3, #0]
 8003c98:	685b      	ldreq	r3, [r3, #4]
 8003c9a:	6063      	str	r3, [r4, #4]
 8003c9c:	bf04      	itt	eq
 8003c9e:	1852      	addeq	r2, r2, r1
 8003ca0:	6022      	streq	r2, [r4, #0]
 8003ca2:	6004      	str	r4, [r0, #0]
 8003ca4:	e7ec      	b.n	8003c80 <_free_r+0x24>
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	b10a      	cbz	r2, 8003cb0 <_free_r+0x54>
 8003cac:	42a2      	cmp	r2, r4
 8003cae:	d9fa      	bls.n	8003ca6 <_free_r+0x4a>
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	1858      	adds	r0, r3, r1
 8003cb4:	42a0      	cmp	r0, r4
 8003cb6:	d10b      	bne.n	8003cd0 <_free_r+0x74>
 8003cb8:	6820      	ldr	r0, [r4, #0]
 8003cba:	4401      	add	r1, r0
 8003cbc:	1858      	adds	r0, r3, r1
 8003cbe:	4282      	cmp	r2, r0
 8003cc0:	6019      	str	r1, [r3, #0]
 8003cc2:	d1dd      	bne.n	8003c80 <_free_r+0x24>
 8003cc4:	6810      	ldr	r0, [r2, #0]
 8003cc6:	6852      	ldr	r2, [r2, #4]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	4401      	add	r1, r0
 8003ccc:	6019      	str	r1, [r3, #0]
 8003cce:	e7d7      	b.n	8003c80 <_free_r+0x24>
 8003cd0:	d902      	bls.n	8003cd8 <_free_r+0x7c>
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	602b      	str	r3, [r5, #0]
 8003cd6:	e7d3      	b.n	8003c80 <_free_r+0x24>
 8003cd8:	6820      	ldr	r0, [r4, #0]
 8003cda:	1821      	adds	r1, r4, r0
 8003cdc:	428a      	cmp	r2, r1
 8003cde:	bf04      	itt	eq
 8003ce0:	6811      	ldreq	r1, [r2, #0]
 8003ce2:	6852      	ldreq	r2, [r2, #4]
 8003ce4:	6062      	str	r2, [r4, #4]
 8003ce6:	bf04      	itt	eq
 8003ce8:	1809      	addeq	r1, r1, r0
 8003cea:	6021      	streq	r1, [r4, #0]
 8003cec:	605c      	str	r4, [r3, #4]
 8003cee:	e7c7      	b.n	8003c80 <_free_r+0x24>
 8003cf0:	bd38      	pop	{r3, r4, r5, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20003f30 	.word	0x20003f30

08003cf8 <_malloc_r>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	1ccd      	adds	r5, r1, #3
 8003cfc:	f025 0503 	bic.w	r5, r5, #3
 8003d00:	3508      	adds	r5, #8
 8003d02:	2d0c      	cmp	r5, #12
 8003d04:	bf38      	it	cc
 8003d06:	250c      	movcc	r5, #12
 8003d08:	2d00      	cmp	r5, #0
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	db01      	blt.n	8003d12 <_malloc_r+0x1a>
 8003d0e:	42a9      	cmp	r1, r5
 8003d10:	d903      	bls.n	8003d1a <_malloc_r+0x22>
 8003d12:	230c      	movs	r3, #12
 8003d14:	6033      	str	r3, [r6, #0]
 8003d16:	2000      	movs	r0, #0
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
 8003d1a:	f000 f87f 	bl	8003e1c <__malloc_lock>
 8003d1e:	4a23      	ldr	r2, [pc, #140]	; (8003dac <_malloc_r+0xb4>)
 8003d20:	6814      	ldr	r4, [r2, #0]
 8003d22:	4621      	mov	r1, r4
 8003d24:	b991      	cbnz	r1, 8003d4c <_malloc_r+0x54>
 8003d26:	4c22      	ldr	r4, [pc, #136]	; (8003db0 <_malloc_r+0xb8>)
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	b91b      	cbnz	r3, 8003d34 <_malloc_r+0x3c>
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	f000 f841 	bl	8003db4 <_sbrk_r>
 8003d32:	6020      	str	r0, [r4, #0]
 8003d34:	4629      	mov	r1, r5
 8003d36:	4630      	mov	r0, r6
 8003d38:	f000 f83c 	bl	8003db4 <_sbrk_r>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d126      	bne.n	8003d8e <_malloc_r+0x96>
 8003d40:	230c      	movs	r3, #12
 8003d42:	6033      	str	r3, [r6, #0]
 8003d44:	4630      	mov	r0, r6
 8003d46:	f000 f86a 	bl	8003e1e <__malloc_unlock>
 8003d4a:	e7e4      	b.n	8003d16 <_malloc_r+0x1e>
 8003d4c:	680b      	ldr	r3, [r1, #0]
 8003d4e:	1b5b      	subs	r3, r3, r5
 8003d50:	d41a      	bmi.n	8003d88 <_malloc_r+0x90>
 8003d52:	2b0b      	cmp	r3, #11
 8003d54:	d90f      	bls.n	8003d76 <_malloc_r+0x7e>
 8003d56:	600b      	str	r3, [r1, #0]
 8003d58:	50cd      	str	r5, [r1, r3]
 8003d5a:	18cc      	adds	r4, r1, r3
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	f000 f85e 	bl	8003e1e <__malloc_unlock>
 8003d62:	f104 000b 	add.w	r0, r4, #11
 8003d66:	1d23      	adds	r3, r4, #4
 8003d68:	f020 0007 	bic.w	r0, r0, #7
 8003d6c:	1ac3      	subs	r3, r0, r3
 8003d6e:	d01b      	beq.n	8003da8 <_malloc_r+0xb0>
 8003d70:	425a      	negs	r2, r3
 8003d72:	50e2      	str	r2, [r4, r3]
 8003d74:	bd70      	pop	{r4, r5, r6, pc}
 8003d76:	428c      	cmp	r4, r1
 8003d78:	bf0d      	iteet	eq
 8003d7a:	6863      	ldreq	r3, [r4, #4]
 8003d7c:	684b      	ldrne	r3, [r1, #4]
 8003d7e:	6063      	strne	r3, [r4, #4]
 8003d80:	6013      	streq	r3, [r2, #0]
 8003d82:	bf18      	it	ne
 8003d84:	460c      	movne	r4, r1
 8003d86:	e7e9      	b.n	8003d5c <_malloc_r+0x64>
 8003d88:	460c      	mov	r4, r1
 8003d8a:	6849      	ldr	r1, [r1, #4]
 8003d8c:	e7ca      	b.n	8003d24 <_malloc_r+0x2c>
 8003d8e:	1cc4      	adds	r4, r0, #3
 8003d90:	f024 0403 	bic.w	r4, r4, #3
 8003d94:	42a0      	cmp	r0, r4
 8003d96:	d005      	beq.n	8003da4 <_malloc_r+0xac>
 8003d98:	1a21      	subs	r1, r4, r0
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f000 f80a 	bl	8003db4 <_sbrk_r>
 8003da0:	3001      	adds	r0, #1
 8003da2:	d0cd      	beq.n	8003d40 <_malloc_r+0x48>
 8003da4:	6025      	str	r5, [r4, #0]
 8003da6:	e7d9      	b.n	8003d5c <_malloc_r+0x64>
 8003da8:	bd70      	pop	{r4, r5, r6, pc}
 8003daa:	bf00      	nop
 8003dac:	20003f30 	.word	0x20003f30
 8003db0:	20003f34 	.word	0x20003f34

08003db4 <_sbrk_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	4c06      	ldr	r4, [pc, #24]	; (8003dd0 <_sbrk_r+0x1c>)
 8003db8:	2300      	movs	r3, #0
 8003dba:	4605      	mov	r5, r0
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	6023      	str	r3, [r4, #0]
 8003dc0:	f000 fb5e 	bl	8004480 <_sbrk>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_sbrk_r+0x1a>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_sbrk_r+0x1a>
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	20005794 	.word	0x20005794

08003dd4 <siprintf>:
 8003dd4:	b40e      	push	{r1, r2, r3}
 8003dd6:	b500      	push	{lr}
 8003dd8:	b09c      	sub	sp, #112	; 0x70
 8003dda:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003dde:	ab1d      	add	r3, sp, #116	; 0x74
 8003de0:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003de4:	9002      	str	r0, [sp, #8]
 8003de6:	9006      	str	r0, [sp, #24]
 8003de8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dec:	480a      	ldr	r0, [pc, #40]	; (8003e18 <siprintf+0x44>)
 8003dee:	9104      	str	r1, [sp, #16]
 8003df0:	9107      	str	r1, [sp, #28]
 8003df2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dfa:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003dfe:	6800      	ldr	r0, [r0, #0]
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	a902      	add	r1, sp, #8
 8003e04:	f000 f868 	bl	8003ed8 <_svfiprintf_r>
 8003e08:	9b02      	ldr	r3, [sp, #8]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	b01c      	add	sp, #112	; 0x70
 8003e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e14:	b003      	add	sp, #12
 8003e16:	4770      	bx	lr
 8003e18:	20000164 	.word	0x20000164

08003e1c <__malloc_lock>:
 8003e1c:	4770      	bx	lr

08003e1e <__malloc_unlock>:
 8003e1e:	4770      	bx	lr

08003e20 <__ssputs_r>:
 8003e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e24:	688e      	ldr	r6, [r1, #8]
 8003e26:	429e      	cmp	r6, r3
 8003e28:	4682      	mov	sl, r0
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	4691      	mov	r9, r2
 8003e2e:	4698      	mov	r8, r3
 8003e30:	d835      	bhi.n	8003e9e <__ssputs_r+0x7e>
 8003e32:	898a      	ldrh	r2, [r1, #12]
 8003e34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e38:	d031      	beq.n	8003e9e <__ssputs_r+0x7e>
 8003e3a:	6825      	ldr	r5, [r4, #0]
 8003e3c:	6909      	ldr	r1, [r1, #16]
 8003e3e:	1a6f      	subs	r7, r5, r1
 8003e40:	6965      	ldr	r5, [r4, #20]
 8003e42:	2302      	movs	r3, #2
 8003e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e48:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e4c:	f108 0301 	add.w	r3, r8, #1
 8003e50:	443b      	add	r3, r7
 8003e52:	429d      	cmp	r5, r3
 8003e54:	bf38      	it	cc
 8003e56:	461d      	movcc	r5, r3
 8003e58:	0553      	lsls	r3, r2, #21
 8003e5a:	d531      	bpl.n	8003ec0 <__ssputs_r+0xa0>
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	f7ff ff4b 	bl	8003cf8 <_malloc_r>
 8003e62:	4606      	mov	r6, r0
 8003e64:	b950      	cbnz	r0, 8003e7c <__ssputs_r+0x5c>
 8003e66:	230c      	movs	r3, #12
 8003e68:	f8ca 3000 	str.w	r3, [sl]
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e72:	81a3      	strh	r3, [r4, #12]
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7c:	463a      	mov	r2, r7
 8003e7e:	6921      	ldr	r1, [r4, #16]
 8003e80:	f7ff fee0 	bl	8003c44 <memcpy>
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8e:	81a3      	strh	r3, [r4, #12]
 8003e90:	6126      	str	r6, [r4, #16]
 8003e92:	6165      	str	r5, [r4, #20]
 8003e94:	443e      	add	r6, r7
 8003e96:	1bed      	subs	r5, r5, r7
 8003e98:	6026      	str	r6, [r4, #0]
 8003e9a:	60a5      	str	r5, [r4, #8]
 8003e9c:	4646      	mov	r6, r8
 8003e9e:	4546      	cmp	r6, r8
 8003ea0:	bf28      	it	cs
 8003ea2:	4646      	movcs	r6, r8
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	6820      	ldr	r0, [r4, #0]
 8003eaa:	f000 fa9f 	bl	80043ec <memmove>
 8003eae:	68a3      	ldr	r3, [r4, #8]
 8003eb0:	1b9b      	subs	r3, r3, r6
 8003eb2:	60a3      	str	r3, [r4, #8]
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	441e      	add	r6, r3
 8003eb8:	6026      	str	r6, [r4, #0]
 8003eba:	2000      	movs	r0, #0
 8003ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec0:	462a      	mov	r2, r5
 8003ec2:	f000 faad 	bl	8004420 <_realloc_r>
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d1e1      	bne.n	8003e90 <__ssputs_r+0x70>
 8003ecc:	6921      	ldr	r1, [r4, #16]
 8003ece:	4650      	mov	r0, sl
 8003ed0:	f7ff fec4 	bl	8003c5c <_free_r>
 8003ed4:	e7c7      	b.n	8003e66 <__ssputs_r+0x46>
	...

08003ed8 <_svfiprintf_r>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	b09d      	sub	sp, #116	; 0x74
 8003ede:	4680      	mov	r8, r0
 8003ee0:	9303      	str	r3, [sp, #12]
 8003ee2:	898b      	ldrh	r3, [r1, #12]
 8003ee4:	061c      	lsls	r4, r3, #24
 8003ee6:	460d      	mov	r5, r1
 8003ee8:	4616      	mov	r6, r2
 8003eea:	d50f      	bpl.n	8003f0c <_svfiprintf_r+0x34>
 8003eec:	690b      	ldr	r3, [r1, #16]
 8003eee:	b96b      	cbnz	r3, 8003f0c <_svfiprintf_r+0x34>
 8003ef0:	2140      	movs	r1, #64	; 0x40
 8003ef2:	f7ff ff01 	bl	8003cf8 <_malloc_r>
 8003ef6:	6028      	str	r0, [r5, #0]
 8003ef8:	6128      	str	r0, [r5, #16]
 8003efa:	b928      	cbnz	r0, 8003f08 <_svfiprintf_r+0x30>
 8003efc:	230c      	movs	r3, #12
 8003efe:	f8c8 3000 	str.w	r3, [r8]
 8003f02:	f04f 30ff 	mov.w	r0, #4294967295
 8003f06:	e0c5      	b.n	8004094 <_svfiprintf_r+0x1bc>
 8003f08:	2340      	movs	r3, #64	; 0x40
 8003f0a:	616b      	str	r3, [r5, #20]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f10:	2320      	movs	r3, #32
 8003f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f16:	2330      	movs	r3, #48	; 0x30
 8003f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f1c:	f04f 0b01 	mov.w	fp, #1
 8003f20:	4637      	mov	r7, r6
 8003f22:	463c      	mov	r4, r7
 8003f24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d13c      	bne.n	8003fa6 <_svfiprintf_r+0xce>
 8003f2c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f30:	d00b      	beq.n	8003f4a <_svfiprintf_r+0x72>
 8003f32:	4653      	mov	r3, sl
 8003f34:	4632      	mov	r2, r6
 8003f36:	4629      	mov	r1, r5
 8003f38:	4640      	mov	r0, r8
 8003f3a:	f7ff ff71 	bl	8003e20 <__ssputs_r>
 8003f3e:	3001      	adds	r0, #1
 8003f40:	f000 80a3 	beq.w	800408a <_svfiprintf_r+0x1b2>
 8003f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f46:	4453      	add	r3, sl
 8003f48:	9309      	str	r3, [sp, #36]	; 0x24
 8003f4a:	783b      	ldrb	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 809c 	beq.w	800408a <_svfiprintf_r+0x1b2>
 8003f52:	2300      	movs	r3, #0
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	9304      	str	r3, [sp, #16]
 8003f5a:	9307      	str	r3, [sp, #28]
 8003f5c:	9205      	str	r2, [sp, #20]
 8003f5e:	9306      	str	r3, [sp, #24]
 8003f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f64:	931a      	str	r3, [sp, #104]	; 0x68
 8003f66:	2205      	movs	r2, #5
 8003f68:	7821      	ldrb	r1, [r4, #0]
 8003f6a:	4850      	ldr	r0, [pc, #320]	; (80040ac <_svfiprintf_r+0x1d4>)
 8003f6c:	f7fc f938 	bl	80001e0 <memchr>
 8003f70:	1c67      	adds	r7, r4, #1
 8003f72:	9b04      	ldr	r3, [sp, #16]
 8003f74:	b9d8      	cbnz	r0, 8003fae <_svfiprintf_r+0xd6>
 8003f76:	06d9      	lsls	r1, r3, #27
 8003f78:	bf44      	itt	mi
 8003f7a:	2220      	movmi	r2, #32
 8003f7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f80:	071a      	lsls	r2, r3, #28
 8003f82:	bf44      	itt	mi
 8003f84:	222b      	movmi	r2, #43	; 0x2b
 8003f86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f8a:	7822      	ldrb	r2, [r4, #0]
 8003f8c:	2a2a      	cmp	r2, #42	; 0x2a
 8003f8e:	d016      	beq.n	8003fbe <_svfiprintf_r+0xe6>
 8003f90:	9a07      	ldr	r2, [sp, #28]
 8003f92:	2100      	movs	r1, #0
 8003f94:	200a      	movs	r0, #10
 8003f96:	4627      	mov	r7, r4
 8003f98:	3401      	adds	r4, #1
 8003f9a:	783b      	ldrb	r3, [r7, #0]
 8003f9c:	3b30      	subs	r3, #48	; 0x30
 8003f9e:	2b09      	cmp	r3, #9
 8003fa0:	d951      	bls.n	8004046 <_svfiprintf_r+0x16e>
 8003fa2:	b1c9      	cbz	r1, 8003fd8 <_svfiprintf_r+0x100>
 8003fa4:	e011      	b.n	8003fca <_svfiprintf_r+0xf2>
 8003fa6:	2b25      	cmp	r3, #37	; 0x25
 8003fa8:	d0c0      	beq.n	8003f2c <_svfiprintf_r+0x54>
 8003faa:	4627      	mov	r7, r4
 8003fac:	e7b9      	b.n	8003f22 <_svfiprintf_r+0x4a>
 8003fae:	4a3f      	ldr	r2, [pc, #252]	; (80040ac <_svfiprintf_r+0x1d4>)
 8003fb0:	1a80      	subs	r0, r0, r2
 8003fb2:	fa0b f000 	lsl.w	r0, fp, r0
 8003fb6:	4318      	orrs	r0, r3
 8003fb8:	9004      	str	r0, [sp, #16]
 8003fba:	463c      	mov	r4, r7
 8003fbc:	e7d3      	b.n	8003f66 <_svfiprintf_r+0x8e>
 8003fbe:	9a03      	ldr	r2, [sp, #12]
 8003fc0:	1d11      	adds	r1, r2, #4
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	9103      	str	r1, [sp, #12]
 8003fc6:	2a00      	cmp	r2, #0
 8003fc8:	db01      	blt.n	8003fce <_svfiprintf_r+0xf6>
 8003fca:	9207      	str	r2, [sp, #28]
 8003fcc:	e004      	b.n	8003fd8 <_svfiprintf_r+0x100>
 8003fce:	4252      	negs	r2, r2
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	9207      	str	r2, [sp, #28]
 8003fd6:	9304      	str	r3, [sp, #16]
 8003fd8:	783b      	ldrb	r3, [r7, #0]
 8003fda:	2b2e      	cmp	r3, #46	; 0x2e
 8003fdc:	d10e      	bne.n	8003ffc <_svfiprintf_r+0x124>
 8003fde:	787b      	ldrb	r3, [r7, #1]
 8003fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe2:	f107 0101 	add.w	r1, r7, #1
 8003fe6:	d132      	bne.n	800404e <_svfiprintf_r+0x176>
 8003fe8:	9b03      	ldr	r3, [sp, #12]
 8003fea:	1d1a      	adds	r2, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	9203      	str	r2, [sp, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bfb8      	it	lt
 8003ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ff8:	3702      	adds	r7, #2
 8003ffa:	9305      	str	r3, [sp, #20]
 8003ffc:	4c2c      	ldr	r4, [pc, #176]	; (80040b0 <_svfiprintf_r+0x1d8>)
 8003ffe:	7839      	ldrb	r1, [r7, #0]
 8004000:	2203      	movs	r2, #3
 8004002:	4620      	mov	r0, r4
 8004004:	f7fc f8ec 	bl	80001e0 <memchr>
 8004008:	b138      	cbz	r0, 800401a <_svfiprintf_r+0x142>
 800400a:	2340      	movs	r3, #64	; 0x40
 800400c:	1b00      	subs	r0, r0, r4
 800400e:	fa03 f000 	lsl.w	r0, r3, r0
 8004012:	9b04      	ldr	r3, [sp, #16]
 8004014:	4303      	orrs	r3, r0
 8004016:	9304      	str	r3, [sp, #16]
 8004018:	3701      	adds	r7, #1
 800401a:	7839      	ldrb	r1, [r7, #0]
 800401c:	4825      	ldr	r0, [pc, #148]	; (80040b4 <_svfiprintf_r+0x1dc>)
 800401e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004022:	2206      	movs	r2, #6
 8004024:	1c7e      	adds	r6, r7, #1
 8004026:	f7fc f8db 	bl	80001e0 <memchr>
 800402a:	2800      	cmp	r0, #0
 800402c:	d035      	beq.n	800409a <_svfiprintf_r+0x1c2>
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <_svfiprintf_r+0x1e0>)
 8004030:	b9fb      	cbnz	r3, 8004072 <_svfiprintf_r+0x19a>
 8004032:	9b03      	ldr	r3, [sp, #12]
 8004034:	3307      	adds	r3, #7
 8004036:	f023 0307 	bic.w	r3, r3, #7
 800403a:	3308      	adds	r3, #8
 800403c:	9303      	str	r3, [sp, #12]
 800403e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004040:	444b      	add	r3, r9
 8004042:	9309      	str	r3, [sp, #36]	; 0x24
 8004044:	e76c      	b.n	8003f20 <_svfiprintf_r+0x48>
 8004046:	fb00 3202 	mla	r2, r0, r2, r3
 800404a:	2101      	movs	r1, #1
 800404c:	e7a3      	b.n	8003f96 <_svfiprintf_r+0xbe>
 800404e:	2300      	movs	r3, #0
 8004050:	9305      	str	r3, [sp, #20]
 8004052:	4618      	mov	r0, r3
 8004054:	240a      	movs	r4, #10
 8004056:	460f      	mov	r7, r1
 8004058:	3101      	adds	r1, #1
 800405a:	783a      	ldrb	r2, [r7, #0]
 800405c:	3a30      	subs	r2, #48	; 0x30
 800405e:	2a09      	cmp	r2, #9
 8004060:	d903      	bls.n	800406a <_svfiprintf_r+0x192>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ca      	beq.n	8003ffc <_svfiprintf_r+0x124>
 8004066:	9005      	str	r0, [sp, #20]
 8004068:	e7c8      	b.n	8003ffc <_svfiprintf_r+0x124>
 800406a:	fb04 2000 	mla	r0, r4, r0, r2
 800406e:	2301      	movs	r3, #1
 8004070:	e7f1      	b.n	8004056 <_svfiprintf_r+0x17e>
 8004072:	ab03      	add	r3, sp, #12
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	462a      	mov	r2, r5
 8004078:	4b10      	ldr	r3, [pc, #64]	; (80040bc <_svfiprintf_r+0x1e4>)
 800407a:	a904      	add	r1, sp, #16
 800407c:	4640      	mov	r0, r8
 800407e:	f3af 8000 	nop.w
 8004082:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004086:	4681      	mov	r9, r0
 8004088:	d1d9      	bne.n	800403e <_svfiprintf_r+0x166>
 800408a:	89ab      	ldrh	r3, [r5, #12]
 800408c:	065b      	lsls	r3, r3, #25
 800408e:	f53f af38 	bmi.w	8003f02 <_svfiprintf_r+0x2a>
 8004092:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004094:	b01d      	add	sp, #116	; 0x74
 8004096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800409a:	ab03      	add	r3, sp, #12
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	462a      	mov	r2, r5
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <_svfiprintf_r+0x1e4>)
 80040a2:	a904      	add	r1, sp, #16
 80040a4:	4640      	mov	r0, r8
 80040a6:	f000 f881 	bl	80041ac <_printf_i>
 80040aa:	e7ea      	b.n	8004082 <_svfiprintf_r+0x1aa>
 80040ac:	08004553 	.word	0x08004553
 80040b0:	08004559 	.word	0x08004559
 80040b4:	0800455d 	.word	0x0800455d
 80040b8:	00000000 	.word	0x00000000
 80040bc:	08003e21 	.word	0x08003e21

080040c0 <_printf_common>:
 80040c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c4:	4691      	mov	r9, r2
 80040c6:	461f      	mov	r7, r3
 80040c8:	688a      	ldr	r2, [r1, #8]
 80040ca:	690b      	ldr	r3, [r1, #16]
 80040cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040d0:	4293      	cmp	r3, r2
 80040d2:	bfb8      	it	lt
 80040d4:	4613      	movlt	r3, r2
 80040d6:	f8c9 3000 	str.w	r3, [r9]
 80040da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040de:	4606      	mov	r6, r0
 80040e0:	460c      	mov	r4, r1
 80040e2:	b112      	cbz	r2, 80040ea <_printf_common+0x2a>
 80040e4:	3301      	adds	r3, #1
 80040e6:	f8c9 3000 	str.w	r3, [r9]
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	0699      	lsls	r1, r3, #26
 80040ee:	bf42      	ittt	mi
 80040f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040f4:	3302      	addmi	r3, #2
 80040f6:	f8c9 3000 	strmi.w	r3, [r9]
 80040fa:	6825      	ldr	r5, [r4, #0]
 80040fc:	f015 0506 	ands.w	r5, r5, #6
 8004100:	d107      	bne.n	8004112 <_printf_common+0x52>
 8004102:	f104 0a19 	add.w	sl, r4, #25
 8004106:	68e3      	ldr	r3, [r4, #12]
 8004108:	f8d9 2000 	ldr.w	r2, [r9]
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	429d      	cmp	r5, r3
 8004110:	db29      	blt.n	8004166 <_printf_common+0xa6>
 8004112:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004116:	6822      	ldr	r2, [r4, #0]
 8004118:	3300      	adds	r3, #0
 800411a:	bf18      	it	ne
 800411c:	2301      	movne	r3, #1
 800411e:	0692      	lsls	r2, r2, #26
 8004120:	d42e      	bmi.n	8004180 <_printf_common+0xc0>
 8004122:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004126:	4639      	mov	r1, r7
 8004128:	4630      	mov	r0, r6
 800412a:	47c0      	blx	r8
 800412c:	3001      	adds	r0, #1
 800412e:	d021      	beq.n	8004174 <_printf_common+0xb4>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	68e5      	ldr	r5, [r4, #12]
 8004134:	f8d9 2000 	ldr.w	r2, [r9]
 8004138:	f003 0306 	and.w	r3, r3, #6
 800413c:	2b04      	cmp	r3, #4
 800413e:	bf08      	it	eq
 8004140:	1aad      	subeq	r5, r5, r2
 8004142:	68a3      	ldr	r3, [r4, #8]
 8004144:	6922      	ldr	r2, [r4, #16]
 8004146:	bf0c      	ite	eq
 8004148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800414c:	2500      	movne	r5, #0
 800414e:	4293      	cmp	r3, r2
 8004150:	bfc4      	itt	gt
 8004152:	1a9b      	subgt	r3, r3, r2
 8004154:	18ed      	addgt	r5, r5, r3
 8004156:	f04f 0900 	mov.w	r9, #0
 800415a:	341a      	adds	r4, #26
 800415c:	454d      	cmp	r5, r9
 800415e:	d11b      	bne.n	8004198 <_printf_common+0xd8>
 8004160:	2000      	movs	r0, #0
 8004162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004166:	2301      	movs	r3, #1
 8004168:	4652      	mov	r2, sl
 800416a:	4639      	mov	r1, r7
 800416c:	4630      	mov	r0, r6
 800416e:	47c0      	blx	r8
 8004170:	3001      	adds	r0, #1
 8004172:	d103      	bne.n	800417c <_printf_common+0xbc>
 8004174:	f04f 30ff 	mov.w	r0, #4294967295
 8004178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417c:	3501      	adds	r5, #1
 800417e:	e7c2      	b.n	8004106 <_printf_common+0x46>
 8004180:	18e1      	adds	r1, r4, r3
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	2030      	movs	r0, #48	; 0x30
 8004186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800418a:	4422      	add	r2, r4
 800418c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004194:	3302      	adds	r3, #2
 8004196:	e7c4      	b.n	8004122 <_printf_common+0x62>
 8004198:	2301      	movs	r3, #1
 800419a:	4622      	mov	r2, r4
 800419c:	4639      	mov	r1, r7
 800419e:	4630      	mov	r0, r6
 80041a0:	47c0      	blx	r8
 80041a2:	3001      	adds	r0, #1
 80041a4:	d0e6      	beq.n	8004174 <_printf_common+0xb4>
 80041a6:	f109 0901 	add.w	r9, r9, #1
 80041aa:	e7d7      	b.n	800415c <_printf_common+0x9c>

080041ac <_printf_i>:
 80041ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041b0:	4617      	mov	r7, r2
 80041b2:	7e0a      	ldrb	r2, [r1, #24]
 80041b4:	b085      	sub	sp, #20
 80041b6:	2a6e      	cmp	r2, #110	; 0x6e
 80041b8:	4698      	mov	r8, r3
 80041ba:	4606      	mov	r6, r0
 80041bc:	460c      	mov	r4, r1
 80041be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041c0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80041c4:	f000 80bc 	beq.w	8004340 <_printf_i+0x194>
 80041c8:	d81a      	bhi.n	8004200 <_printf_i+0x54>
 80041ca:	2a63      	cmp	r2, #99	; 0x63
 80041cc:	d02e      	beq.n	800422c <_printf_i+0x80>
 80041ce:	d80a      	bhi.n	80041e6 <_printf_i+0x3a>
 80041d0:	2a00      	cmp	r2, #0
 80041d2:	f000 80c8 	beq.w	8004366 <_printf_i+0x1ba>
 80041d6:	2a58      	cmp	r2, #88	; 0x58
 80041d8:	f000 808a 	beq.w	80042f0 <_printf_i+0x144>
 80041dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80041e4:	e02a      	b.n	800423c <_printf_i+0x90>
 80041e6:	2a64      	cmp	r2, #100	; 0x64
 80041e8:	d001      	beq.n	80041ee <_printf_i+0x42>
 80041ea:	2a69      	cmp	r2, #105	; 0x69
 80041ec:	d1f6      	bne.n	80041dc <_printf_i+0x30>
 80041ee:	6821      	ldr	r1, [r4, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80041f6:	d023      	beq.n	8004240 <_printf_i+0x94>
 80041f8:	1d11      	adds	r1, r2, #4
 80041fa:	6019      	str	r1, [r3, #0]
 80041fc:	6813      	ldr	r3, [r2, #0]
 80041fe:	e027      	b.n	8004250 <_printf_i+0xa4>
 8004200:	2a73      	cmp	r2, #115	; 0x73
 8004202:	f000 80b4 	beq.w	800436e <_printf_i+0x1c2>
 8004206:	d808      	bhi.n	800421a <_printf_i+0x6e>
 8004208:	2a6f      	cmp	r2, #111	; 0x6f
 800420a:	d02a      	beq.n	8004262 <_printf_i+0xb6>
 800420c:	2a70      	cmp	r2, #112	; 0x70
 800420e:	d1e5      	bne.n	80041dc <_printf_i+0x30>
 8004210:	680a      	ldr	r2, [r1, #0]
 8004212:	f042 0220 	orr.w	r2, r2, #32
 8004216:	600a      	str	r2, [r1, #0]
 8004218:	e003      	b.n	8004222 <_printf_i+0x76>
 800421a:	2a75      	cmp	r2, #117	; 0x75
 800421c:	d021      	beq.n	8004262 <_printf_i+0xb6>
 800421e:	2a78      	cmp	r2, #120	; 0x78
 8004220:	d1dc      	bne.n	80041dc <_printf_i+0x30>
 8004222:	2278      	movs	r2, #120	; 0x78
 8004224:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004228:	496e      	ldr	r1, [pc, #440]	; (80043e4 <_printf_i+0x238>)
 800422a:	e064      	b.n	80042f6 <_printf_i+0x14a>
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004232:	1d11      	adds	r1, r2, #4
 8004234:	6019      	str	r1, [r3, #0]
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423c:	2301      	movs	r3, #1
 800423e:	e0a3      	b.n	8004388 <_printf_i+0x1dc>
 8004240:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004244:	f102 0104 	add.w	r1, r2, #4
 8004248:	6019      	str	r1, [r3, #0]
 800424a:	d0d7      	beq.n	80041fc <_printf_i+0x50>
 800424c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004250:	2b00      	cmp	r3, #0
 8004252:	da03      	bge.n	800425c <_printf_i+0xb0>
 8004254:	222d      	movs	r2, #45	; 0x2d
 8004256:	425b      	negs	r3, r3
 8004258:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800425c:	4962      	ldr	r1, [pc, #392]	; (80043e8 <_printf_i+0x23c>)
 800425e:	220a      	movs	r2, #10
 8004260:	e017      	b.n	8004292 <_printf_i+0xe6>
 8004262:	6820      	ldr	r0, [r4, #0]
 8004264:	6819      	ldr	r1, [r3, #0]
 8004266:	f010 0f80 	tst.w	r0, #128	; 0x80
 800426a:	d003      	beq.n	8004274 <_printf_i+0xc8>
 800426c:	1d08      	adds	r0, r1, #4
 800426e:	6018      	str	r0, [r3, #0]
 8004270:	680b      	ldr	r3, [r1, #0]
 8004272:	e006      	b.n	8004282 <_printf_i+0xd6>
 8004274:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004278:	f101 0004 	add.w	r0, r1, #4
 800427c:	6018      	str	r0, [r3, #0]
 800427e:	d0f7      	beq.n	8004270 <_printf_i+0xc4>
 8004280:	880b      	ldrh	r3, [r1, #0]
 8004282:	4959      	ldr	r1, [pc, #356]	; (80043e8 <_printf_i+0x23c>)
 8004284:	2a6f      	cmp	r2, #111	; 0x6f
 8004286:	bf14      	ite	ne
 8004288:	220a      	movne	r2, #10
 800428a:	2208      	moveq	r2, #8
 800428c:	2000      	movs	r0, #0
 800428e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004292:	6865      	ldr	r5, [r4, #4]
 8004294:	60a5      	str	r5, [r4, #8]
 8004296:	2d00      	cmp	r5, #0
 8004298:	f2c0 809c 	blt.w	80043d4 <_printf_i+0x228>
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	f020 0004 	bic.w	r0, r0, #4
 80042a2:	6020      	str	r0, [r4, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d13f      	bne.n	8004328 <_printf_i+0x17c>
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	f040 8095 	bne.w	80043d8 <_printf_i+0x22c>
 80042ae:	4675      	mov	r5, lr
 80042b0:	2a08      	cmp	r2, #8
 80042b2:	d10b      	bne.n	80042cc <_printf_i+0x120>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	07da      	lsls	r2, r3, #31
 80042b8:	d508      	bpl.n	80042cc <_printf_i+0x120>
 80042ba:	6923      	ldr	r3, [r4, #16]
 80042bc:	6862      	ldr	r2, [r4, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	bfde      	ittt	le
 80042c2:	2330      	movle	r3, #48	; 0x30
 80042c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042cc:	ebae 0305 	sub.w	r3, lr, r5
 80042d0:	6123      	str	r3, [r4, #16]
 80042d2:	f8cd 8000 	str.w	r8, [sp]
 80042d6:	463b      	mov	r3, r7
 80042d8:	aa03      	add	r2, sp, #12
 80042da:	4621      	mov	r1, r4
 80042dc:	4630      	mov	r0, r6
 80042de:	f7ff feef 	bl	80040c0 <_printf_common>
 80042e2:	3001      	adds	r0, #1
 80042e4:	d155      	bne.n	8004392 <_printf_i+0x1e6>
 80042e6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ea:	b005      	add	sp, #20
 80042ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042f0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80042f4:	493c      	ldr	r1, [pc, #240]	; (80043e8 <_printf_i+0x23c>)
 80042f6:	6822      	ldr	r2, [r4, #0]
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80042fe:	f100 0504 	add.w	r5, r0, #4
 8004302:	601d      	str	r5, [r3, #0]
 8004304:	d001      	beq.n	800430a <_printf_i+0x15e>
 8004306:	6803      	ldr	r3, [r0, #0]
 8004308:	e002      	b.n	8004310 <_printf_i+0x164>
 800430a:	0655      	lsls	r5, r2, #25
 800430c:	d5fb      	bpl.n	8004306 <_printf_i+0x15a>
 800430e:	8803      	ldrh	r3, [r0, #0]
 8004310:	07d0      	lsls	r0, r2, #31
 8004312:	bf44      	itt	mi
 8004314:	f042 0220 	orrmi.w	r2, r2, #32
 8004318:	6022      	strmi	r2, [r4, #0]
 800431a:	b91b      	cbnz	r3, 8004324 <_printf_i+0x178>
 800431c:	6822      	ldr	r2, [r4, #0]
 800431e:	f022 0220 	bic.w	r2, r2, #32
 8004322:	6022      	str	r2, [r4, #0]
 8004324:	2210      	movs	r2, #16
 8004326:	e7b1      	b.n	800428c <_printf_i+0xe0>
 8004328:	4675      	mov	r5, lr
 800432a:	fbb3 f0f2 	udiv	r0, r3, r2
 800432e:	fb02 3310 	mls	r3, r2, r0, r3
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004338:	4603      	mov	r3, r0
 800433a:	2800      	cmp	r0, #0
 800433c:	d1f5      	bne.n	800432a <_printf_i+0x17e>
 800433e:	e7b7      	b.n	80042b0 <_printf_i+0x104>
 8004340:	6808      	ldr	r0, [r1, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	6949      	ldr	r1, [r1, #20]
 8004346:	f010 0f80 	tst.w	r0, #128	; 0x80
 800434a:	d004      	beq.n	8004356 <_printf_i+0x1aa>
 800434c:	1d10      	adds	r0, r2, #4
 800434e:	6018      	str	r0, [r3, #0]
 8004350:	6813      	ldr	r3, [r2, #0]
 8004352:	6019      	str	r1, [r3, #0]
 8004354:	e007      	b.n	8004366 <_printf_i+0x1ba>
 8004356:	f010 0f40 	tst.w	r0, #64	; 0x40
 800435a:	f102 0004 	add.w	r0, r2, #4
 800435e:	6018      	str	r0, [r3, #0]
 8004360:	6813      	ldr	r3, [r2, #0]
 8004362:	d0f6      	beq.n	8004352 <_printf_i+0x1a6>
 8004364:	8019      	strh	r1, [r3, #0]
 8004366:	2300      	movs	r3, #0
 8004368:	6123      	str	r3, [r4, #16]
 800436a:	4675      	mov	r5, lr
 800436c:	e7b1      	b.n	80042d2 <_printf_i+0x126>
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	1d11      	adds	r1, r2, #4
 8004372:	6019      	str	r1, [r3, #0]
 8004374:	6815      	ldr	r5, [r2, #0]
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	2100      	movs	r1, #0
 800437a:	4628      	mov	r0, r5
 800437c:	f7fb ff30 	bl	80001e0 <memchr>
 8004380:	b108      	cbz	r0, 8004386 <_printf_i+0x1da>
 8004382:	1b40      	subs	r0, r0, r5
 8004384:	6060      	str	r0, [r4, #4]
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	2300      	movs	r3, #0
 800438c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004390:	e79f      	b.n	80042d2 <_printf_i+0x126>
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	462a      	mov	r2, r5
 8004396:	4639      	mov	r1, r7
 8004398:	4630      	mov	r0, r6
 800439a:	47c0      	blx	r8
 800439c:	3001      	adds	r0, #1
 800439e:	d0a2      	beq.n	80042e6 <_printf_i+0x13a>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	079b      	lsls	r3, r3, #30
 80043a4:	d507      	bpl.n	80043b6 <_printf_i+0x20a>
 80043a6:	2500      	movs	r5, #0
 80043a8:	f104 0919 	add.w	r9, r4, #25
 80043ac:	68e3      	ldr	r3, [r4, #12]
 80043ae:	9a03      	ldr	r2, [sp, #12]
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	429d      	cmp	r5, r3
 80043b4:	db05      	blt.n	80043c2 <_printf_i+0x216>
 80043b6:	68e0      	ldr	r0, [r4, #12]
 80043b8:	9b03      	ldr	r3, [sp, #12]
 80043ba:	4298      	cmp	r0, r3
 80043bc:	bfb8      	it	lt
 80043be:	4618      	movlt	r0, r3
 80043c0:	e793      	b.n	80042ea <_printf_i+0x13e>
 80043c2:	2301      	movs	r3, #1
 80043c4:	464a      	mov	r2, r9
 80043c6:	4639      	mov	r1, r7
 80043c8:	4630      	mov	r0, r6
 80043ca:	47c0      	blx	r8
 80043cc:	3001      	adds	r0, #1
 80043ce:	d08a      	beq.n	80042e6 <_printf_i+0x13a>
 80043d0:	3501      	adds	r5, #1
 80043d2:	e7eb      	b.n	80043ac <_printf_i+0x200>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1a7      	bne.n	8004328 <_printf_i+0x17c>
 80043d8:	780b      	ldrb	r3, [r1, #0]
 80043da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e2:	e765      	b.n	80042b0 <_printf_i+0x104>
 80043e4:	08004575 	.word	0x08004575
 80043e8:	08004564 	.word	0x08004564

080043ec <memmove>:
 80043ec:	4288      	cmp	r0, r1
 80043ee:	b510      	push	{r4, lr}
 80043f0:	eb01 0302 	add.w	r3, r1, r2
 80043f4:	d803      	bhi.n	80043fe <memmove+0x12>
 80043f6:	1e42      	subs	r2, r0, #1
 80043f8:	4299      	cmp	r1, r3
 80043fa:	d10c      	bne.n	8004416 <memmove+0x2a>
 80043fc:	bd10      	pop	{r4, pc}
 80043fe:	4298      	cmp	r0, r3
 8004400:	d2f9      	bcs.n	80043f6 <memmove+0xa>
 8004402:	1881      	adds	r1, r0, r2
 8004404:	1ad2      	subs	r2, r2, r3
 8004406:	42d3      	cmn	r3, r2
 8004408:	d100      	bne.n	800440c <memmove+0x20>
 800440a:	bd10      	pop	{r4, pc}
 800440c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004410:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004414:	e7f7      	b.n	8004406 <memmove+0x1a>
 8004416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800441a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800441e:	e7eb      	b.n	80043f8 <memmove+0xc>

08004420 <_realloc_r>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	4607      	mov	r7, r0
 8004424:	4614      	mov	r4, r2
 8004426:	460e      	mov	r6, r1
 8004428:	b921      	cbnz	r1, 8004434 <_realloc_r+0x14>
 800442a:	4611      	mov	r1, r2
 800442c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004430:	f7ff bc62 	b.w	8003cf8 <_malloc_r>
 8004434:	b922      	cbnz	r2, 8004440 <_realloc_r+0x20>
 8004436:	f7ff fc11 	bl	8003c5c <_free_r>
 800443a:	4625      	mov	r5, r4
 800443c:	4628      	mov	r0, r5
 800443e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004440:	f000 f814 	bl	800446c <_malloc_usable_size_r>
 8004444:	4284      	cmp	r4, r0
 8004446:	d90f      	bls.n	8004468 <_realloc_r+0x48>
 8004448:	4621      	mov	r1, r4
 800444a:	4638      	mov	r0, r7
 800444c:	f7ff fc54 	bl	8003cf8 <_malloc_r>
 8004450:	4605      	mov	r5, r0
 8004452:	2800      	cmp	r0, #0
 8004454:	d0f2      	beq.n	800443c <_realloc_r+0x1c>
 8004456:	4631      	mov	r1, r6
 8004458:	4622      	mov	r2, r4
 800445a:	f7ff fbf3 	bl	8003c44 <memcpy>
 800445e:	4631      	mov	r1, r6
 8004460:	4638      	mov	r0, r7
 8004462:	f7ff fbfb 	bl	8003c5c <_free_r>
 8004466:	e7e9      	b.n	800443c <_realloc_r+0x1c>
 8004468:	4635      	mov	r5, r6
 800446a:	e7e7      	b.n	800443c <_realloc_r+0x1c>

0800446c <_malloc_usable_size_r>:
 800446c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004470:	2800      	cmp	r0, #0
 8004472:	f1a0 0004 	sub.w	r0, r0, #4
 8004476:	bfbc      	itt	lt
 8004478:	580b      	ldrlt	r3, [r1, r0]
 800447a:	18c0      	addlt	r0, r0, r3
 800447c:	4770      	bx	lr
	...

08004480 <_sbrk>:
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <_sbrk+0x14>)
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	4602      	mov	r2, r0
 8004486:	b909      	cbnz	r1, 800448c <_sbrk+0xc>
 8004488:	4903      	ldr	r1, [pc, #12]	; (8004498 <_sbrk+0x18>)
 800448a:	6019      	str	r1, [r3, #0]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	4402      	add	r2, r0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	4770      	bx	lr
 8004494:	20003f38 	.word	0x20003f38
 8004498:	20005798 	.word	0x20005798

0800449c <_init>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr

080044a8 <_fini>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr
